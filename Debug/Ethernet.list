
Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002d44  08002d44  00012d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002db8  08002db8  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08002db8  08002db8  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002db8  08002db8  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002db8  08002db8  00012db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002dbc  08002dbc  00012dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08002dc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200000ac  08002e6c  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08002e6c  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006c06  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bd2  00000000  00000000  00026d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000878  00000000  00000000  000288f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000641  00000000  00000000  00029168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181bd  00000000  00000000  000297a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009178  00000000  00000000  00041966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008683d  00000000  00000000  0004aade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000026d4  00000000  00000000  000d131c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d39f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d2c 	.word	0x08002d2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b0 	.word	0x200000b0
 8000148:	08002d2c 	.word	0x08002d2c

0800014c <main>:
		.gw = {192,168,1,1},
		.dhcp = NETINFO_STATIC
};

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000150:	f001 fa04 	bl	800155c <HAL_Init>

  SystemClock_Config();
 8000154:	f000 f80e 	bl	8000174 <SystemClock_Config>

  MX_GPIO_Init();
 8000158:	f000 f87e 	bl	8000258 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f846 	bl	80001ec <MX_SPI1_Init>
  W5500Init();
 8000160:	f000 fbe6 	bl	8000930 <W5500Init>

  ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO2);
 8000164:	4902      	ldr	r1, [pc, #8]	; (8000170 <main+0x24>)
 8000166:	2000      	movs	r0, #0
 8000168:	f000 fdea 	bl	8000d40 <ctlnetwork>

  while (1)
 800016c:	e7fe      	b.n	800016c <main+0x20>
 800016e:	bf00      	nop
 8000170:	20000000 	.word	0x20000000

08000174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b090      	sub	sp, #64	; 0x40
 8000178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800017a:	f107 0318 	add.w	r3, r7, #24
 800017e:	2228      	movs	r2, #40	; 0x28
 8000180:	2100      	movs	r1, #0
 8000182:	4618      	mov	r0, r3
 8000184:	f002 fb24 	bl	80027d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000188:	1d3b      	adds	r3, r7, #4
 800018a:	2200      	movs	r2, #0
 800018c:	601a      	str	r2, [r3, #0]
 800018e:	605a      	str	r2, [r3, #4]
 8000190:	609a      	str	r2, [r3, #8]
 8000192:	60da      	str	r2, [r3, #12]
 8000194:	611a      	str	r2, [r3, #16]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000196:	2302      	movs	r3, #2
 8000198:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800019a:	2301      	movs	r3, #1
 800019c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800019e:	2310      	movs	r3, #16
 80001a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001a2:	2300      	movs	r3, #0
 80001a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001a6:	f107 0318 	add.w	r3, r7, #24
 80001aa:	4618      	mov	r0, r3
 80001ac:	f001 fcb8 	bl	8001b20 <HAL_RCC_OscConfig>
 80001b0:	4603      	mov	r3, r0
 80001b2:	2b00      	cmp	r3, #0
 80001b4:	d001      	beq.n	80001ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001b6:	f000 f865 	bl	8000284 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ba:	230f      	movs	r3, #15
 80001bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001be:	2300      	movs	r3, #0
 80001c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c2:	2300      	movs	r3, #0
 80001c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ca:	2300      	movs	r3, #0
 80001cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2100      	movs	r1, #0
 80001d2:	4618      	mov	r0, r3
 80001d4:	f001 ff26 	bl	8002024 <HAL_RCC_ClockConfig>
 80001d8:	4603      	mov	r3, r0
 80001da:	2b00      	cmp	r3, #0
 80001dc:	d001      	beq.n	80001e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001de:	f000 f851 	bl	8000284 <Error_Handler>
  }
}
 80001e2:	bf00      	nop
 80001e4:	3740      	adds	r7, #64	; 0x40
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
	...

080001ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80001f0:	4b17      	ldr	r3, [pc, #92]	; (8000250 <MX_SPI1_Init+0x64>)
 80001f2:	4a18      	ldr	r2, [pc, #96]	; (8000254 <MX_SPI1_Init+0x68>)
 80001f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80001f6:	4b16      	ldr	r3, [pc, #88]	; (8000250 <MX_SPI1_Init+0x64>)
 80001f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80001fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80001fe:	4b14      	ldr	r3, [pc, #80]	; (8000250 <MX_SPI1_Init+0x64>)
 8000200:	2200      	movs	r2, #0
 8000202:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000204:	4b12      	ldr	r3, [pc, #72]	; (8000250 <MX_SPI1_Init+0x64>)
 8000206:	2200      	movs	r2, #0
 8000208:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800020a:	4b11      	ldr	r3, [pc, #68]	; (8000250 <MX_SPI1_Init+0x64>)
 800020c:	2200      	movs	r2, #0
 800020e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000210:	4b0f      	ldr	r3, [pc, #60]	; (8000250 <MX_SPI1_Init+0x64>)
 8000212:	2200      	movs	r2, #0
 8000214:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000216:	4b0e      	ldr	r3, [pc, #56]	; (8000250 <MX_SPI1_Init+0x64>)
 8000218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800021c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800021e:	4b0c      	ldr	r3, [pc, #48]	; (8000250 <MX_SPI1_Init+0x64>)
 8000220:	2220      	movs	r2, #32
 8000222:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000224:	4b0a      	ldr	r3, [pc, #40]	; (8000250 <MX_SPI1_Init+0x64>)
 8000226:	2200      	movs	r2, #0
 8000228:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800022a:	4b09      	ldr	r3, [pc, #36]	; (8000250 <MX_SPI1_Init+0x64>)
 800022c:	2200      	movs	r2, #0
 800022e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000230:	4b07      	ldr	r3, [pc, #28]	; (8000250 <MX_SPI1_Init+0x64>)
 8000232:	2200      	movs	r2, #0
 8000234:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000236:	4b06      	ldr	r3, [pc, #24]	; (8000250 <MX_SPI1_Init+0x64>)
 8000238:	220a      	movs	r2, #10
 800023a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800023c:	4804      	ldr	r0, [pc, #16]	; (8000250 <MX_SPI1_Init+0x64>)
 800023e:	f002 f84d 	bl	80022dc <HAL_SPI_Init>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000248:	f000 f81c 	bl	8000284 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	200000c8 	.word	0x200000c8
 8000254:	40013000 	.word	0x40013000

08000258 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025e:	4b08      	ldr	r3, [pc, #32]	; (8000280 <MX_GPIO_Init+0x28>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4a07      	ldr	r2, [pc, #28]	; (8000280 <MX_GPIO_Init+0x28>)
 8000264:	f043 0304 	orr.w	r3, r3, #4
 8000268:	6193      	str	r3, [r2, #24]
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <MX_GPIO_Init+0x28>)
 800026c:	699b      	ldr	r3, [r3, #24]
 800026e:	f003 0304 	and.w	r3, r3, #4
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000276:	bf00      	nop
 8000278:	370c      	adds	r7, #12
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	40021000 	.word	0x40021000

08000284 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000288:	b672      	cpsid	i
}
 800028a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800028c:	e7fe      	b.n	800028c <Error_Handler+0x8>
	...

08000290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000296:	4b0e      	ldr	r3, [pc, #56]	; (80002d0 <HAL_MspInit+0x40>)
 8000298:	699b      	ldr	r3, [r3, #24]
 800029a:	4a0d      	ldr	r2, [pc, #52]	; (80002d0 <HAL_MspInit+0x40>)
 800029c:	f043 0301 	orr.w	r3, r3, #1
 80002a0:	6193      	str	r3, [r2, #24]
 80002a2:	4b0b      	ldr	r3, [pc, #44]	; (80002d0 <HAL_MspInit+0x40>)
 80002a4:	699b      	ldr	r3, [r3, #24]
 80002a6:	f003 0301 	and.w	r3, r3, #1
 80002aa:	607b      	str	r3, [r7, #4]
 80002ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <HAL_MspInit+0x40>)
 80002b0:	69db      	ldr	r3, [r3, #28]
 80002b2:	4a07      	ldr	r2, [pc, #28]	; (80002d0 <HAL_MspInit+0x40>)
 80002b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002b8:	61d3      	str	r3, [r2, #28]
 80002ba:	4b05      	ldr	r3, [pc, #20]	; (80002d0 <HAL_MspInit+0x40>)
 80002bc:	69db      	ldr	r3, [r3, #28]
 80002be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002c2:	603b      	str	r3, [r7, #0]
 80002c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40021000 	.word	0x40021000

080002d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b088      	sub	sp, #32
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002dc:	f107 0310 	add.w	r3, r7, #16
 80002e0:	2200      	movs	r2, #0
 80002e2:	601a      	str	r2, [r3, #0]
 80002e4:	605a      	str	r2, [r3, #4]
 80002e6:	609a      	str	r2, [r3, #8]
 80002e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a1b      	ldr	r2, [pc, #108]	; (800035c <HAL_SPI_MspInit+0x88>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d12f      	bne.n	8000354 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80002f4:	4b1a      	ldr	r3, [pc, #104]	; (8000360 <HAL_SPI_MspInit+0x8c>)
 80002f6:	699b      	ldr	r3, [r3, #24]
 80002f8:	4a19      	ldr	r2, [pc, #100]	; (8000360 <HAL_SPI_MspInit+0x8c>)
 80002fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002fe:	6193      	str	r3, [r2, #24]
 8000300:	4b17      	ldr	r3, [pc, #92]	; (8000360 <HAL_SPI_MspInit+0x8c>)
 8000302:	699b      	ldr	r3, [r3, #24]
 8000304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000308:	60fb      	str	r3, [r7, #12]
 800030a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800030c:	4b14      	ldr	r3, [pc, #80]	; (8000360 <HAL_SPI_MspInit+0x8c>)
 800030e:	699b      	ldr	r3, [r3, #24]
 8000310:	4a13      	ldr	r2, [pc, #76]	; (8000360 <HAL_SPI_MspInit+0x8c>)
 8000312:	f043 0304 	orr.w	r3, r3, #4
 8000316:	6193      	str	r3, [r2, #24]
 8000318:	4b11      	ldr	r3, [pc, #68]	; (8000360 <HAL_SPI_MspInit+0x8c>)
 800031a:	699b      	ldr	r3, [r3, #24]
 800031c:	f003 0304 	and.w	r3, r3, #4
 8000320:	60bb      	str	r3, [r7, #8]
 8000322:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000324:	23a0      	movs	r3, #160	; 0xa0
 8000326:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000328:	2302      	movs	r3, #2
 800032a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800032c:	2303      	movs	r3, #3
 800032e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000330:	f107 0310 	add.w	r3, r7, #16
 8000334:	4619      	mov	r1, r3
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <HAL_SPI_MspInit+0x90>)
 8000338:	f001 fa56 	bl	80017e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800033c:	2340      	movs	r3, #64	; 0x40
 800033e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000340:	2300      	movs	r3, #0
 8000342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000344:	2300      	movs	r3, #0
 8000346:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000348:	f107 0310 	add.w	r3, r7, #16
 800034c:	4619      	mov	r1, r3
 800034e:	4805      	ldr	r0, [pc, #20]	; (8000364 <HAL_SPI_MspInit+0x90>)
 8000350:	f001 fa4a 	bl	80017e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000354:	bf00      	nop
 8000356:	3720      	adds	r7, #32
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	40013000 	.word	0x40013000
 8000360:	40021000 	.word	0x40021000
 8000364:	40010800 	.word	0x40010800

08000368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800036c:	e7fe      	b.n	800036c <NMI_Handler+0x4>

0800036e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800036e:	b480      	push	{r7}
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000372:	e7fe      	b.n	8000372 <HardFault_Handler+0x4>

08000374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000378:	e7fe      	b.n	8000378 <MemManage_Handler+0x4>

0800037a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800037a:	b480      	push	{r7}
 800037c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800037e:	e7fe      	b.n	800037e <BusFault_Handler+0x4>

08000380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000384:	e7fe      	b.n	8000384 <UsageFault_Handler+0x4>

08000386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000386:	b480      	push	{r7}
 8000388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800038a:	bf00      	nop
 800038c:	46bd      	mov	sp, r7
 800038e:	bc80      	pop	{r7}
 8000390:	4770      	bx	lr

08000392 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000392:	b480      	push	{r7}
 8000394:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000396:	bf00      	nop
 8000398:	46bd      	mov	sp, r7
 800039a:	bc80      	pop	{r7}
 800039c:	4770      	bx	lr

0800039e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bc80      	pop	{r7}
 80003a8:	4770      	bx	lr

080003aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003aa:	b580      	push	{r7, lr}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003ae:	f001 f91b 	bl	80015e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}

080003b6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003b6:	b580      	push	{r7, lr}
 80003b8:	b086      	sub	sp, #24
 80003ba:	af00      	add	r7, sp, #0
 80003bc:	60f8      	str	r0, [r7, #12]
 80003be:	60b9      	str	r1, [r7, #8]
 80003c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
 80003c6:	e00a      	b.n	80003de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003c8:	f3af 8000 	nop.w
 80003cc:	4601      	mov	r1, r0
 80003ce:	68bb      	ldr	r3, [r7, #8]
 80003d0:	1c5a      	adds	r2, r3, #1
 80003d2:	60ba      	str	r2, [r7, #8]
 80003d4:	b2ca      	uxtb	r2, r1
 80003d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	3301      	adds	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	697a      	ldr	r2, [r7, #20]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	429a      	cmp	r2, r3
 80003e4:	dbf0      	blt.n	80003c8 <_read+0x12>
  }

  return len;
 80003e6:	687b      	ldr	r3, [r7, #4]
}
 80003e8:	4618      	mov	r0, r3
 80003ea:	3718      	adds	r7, #24
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}

080003f0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	60f8      	str	r0, [r7, #12]
 80003f8:	60b9      	str	r1, [r7, #8]
 80003fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
 8000400:	e009      	b.n	8000416 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	1c5a      	adds	r2, r3, #1
 8000406:	60ba      	str	r2, [r7, #8]
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	4618      	mov	r0, r3
 800040c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000410:	697b      	ldr	r3, [r7, #20]
 8000412:	3301      	adds	r3, #1
 8000414:	617b      	str	r3, [r7, #20]
 8000416:	697a      	ldr	r2, [r7, #20]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	429a      	cmp	r2, r3
 800041c:	dbf1      	blt.n	8000402 <_write+0x12>
  }
  return len;
 800041e:	687b      	ldr	r3, [r7, #4]
}
 8000420:	4618      	mov	r0, r3
 8000422:	3718      	adds	r7, #24
 8000424:	46bd      	mov	sp, r7
 8000426:	bd80      	pop	{r7, pc}

08000428 <_close>:

int _close(int file)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000430:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000434:	4618      	mov	r0, r3
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr

0800043e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800043e:	b480      	push	{r7}
 8000440:	b083      	sub	sp, #12
 8000442:	af00      	add	r7, sp, #0
 8000444:	6078      	str	r0, [r7, #4]
 8000446:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000448:	683b      	ldr	r3, [r7, #0]
 800044a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800044e:	605a      	str	r2, [r3, #4]
  return 0;
 8000450:	2300      	movs	r3, #0
}
 8000452:	4618      	mov	r0, r3
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	bc80      	pop	{r7}
 800045a:	4770      	bx	lr

0800045c <_isatty>:

int _isatty(int file)
{
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000464:	2301      	movs	r3, #1
}
 8000466:	4618      	mov	r0, r3
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr

08000470 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000470:	b480      	push	{r7}
 8000472:	b085      	sub	sp, #20
 8000474:	af00      	add	r7, sp, #0
 8000476:	60f8      	str	r0, [r7, #12]
 8000478:	60b9      	str	r1, [r7, #8]
 800047a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800047c:	2300      	movs	r3, #0
}
 800047e:	4618      	mov	r0, r3
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000490:	4a14      	ldr	r2, [pc, #80]	; (80004e4 <_sbrk+0x5c>)
 8000492:	4b15      	ldr	r3, [pc, #84]	; (80004e8 <_sbrk+0x60>)
 8000494:	1ad3      	subs	r3, r2, r3
 8000496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000498:	697b      	ldr	r3, [r7, #20]
 800049a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800049c:	4b13      	ldr	r3, [pc, #76]	; (80004ec <_sbrk+0x64>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d102      	bne.n	80004aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004a4:	4b11      	ldr	r3, [pc, #68]	; (80004ec <_sbrk+0x64>)
 80004a6:	4a12      	ldr	r2, [pc, #72]	; (80004f0 <_sbrk+0x68>)
 80004a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004aa:	4b10      	ldr	r3, [pc, #64]	; (80004ec <_sbrk+0x64>)
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4413      	add	r3, r2
 80004b2:	693a      	ldr	r2, [r7, #16]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d207      	bcs.n	80004c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004b8:	f002 f9d8 	bl	800286c <__errno>
 80004bc:	4603      	mov	r3, r0
 80004be:	220c      	movs	r2, #12
 80004c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295
 80004c6:	e009      	b.n	80004dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004c8:	4b08      	ldr	r3, [pc, #32]	; (80004ec <_sbrk+0x64>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004ce:	4b07      	ldr	r3, [pc, #28]	; (80004ec <_sbrk+0x64>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4413      	add	r3, r2
 80004d6:	4a05      	ldr	r2, [pc, #20]	; (80004ec <_sbrk+0x64>)
 80004d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004da:	68fb      	ldr	r3, [r7, #12]
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3718      	adds	r7, #24
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	20005000 	.word	0x20005000
 80004e8:	00000400 	.word	0x00000400
 80004ec:	20000120 	.word	0x20000120
 80004f0:	20000280 	.word	0x20000280

080004f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000508:	4b22      	ldr	r3, [pc, #136]	; (8000594 <WIZCHIP_READ+0x94>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800050e:	4b21      	ldr	r3, [pc, #132]	; (8000594 <WIZCHIP_READ+0x94>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000514:	4b1f      	ldr	r3, [pc, #124]	; (8000594 <WIZCHIP_READ+0x94>)
 8000516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000518:	2b00      	cmp	r3, #0
 800051a:	d003      	beq.n	8000524 <WIZCHIP_READ+0x24>
 800051c:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <WIZCHIP_READ+0x94>)
 800051e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000520:	2b00      	cmp	r3, #0
 8000522:	d114      	bne.n	800054e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <WIZCHIP_READ+0x94>)
 8000526:	6a1b      	ldr	r3, [r3, #32]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	0c12      	lsrs	r2, r2, #16
 800052c:	b2d2      	uxtb	r2, r2
 800052e:	4610      	mov	r0, r2
 8000530:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000532:	4b18      	ldr	r3, [pc, #96]	; (8000594 <WIZCHIP_READ+0x94>)
 8000534:	6a1b      	ldr	r3, [r3, #32]
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	0a12      	lsrs	r2, r2, #8
 800053a:	b2d2      	uxtb	r2, r2
 800053c:	4610      	mov	r0, r2
 800053e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000540:	4b14      	ldr	r3, [pc, #80]	; (8000594 <WIZCHIP_READ+0x94>)
 8000542:	6a1b      	ldr	r3, [r3, #32]
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	b2d2      	uxtb	r2, r2
 8000548:	4610      	mov	r0, r2
 800054a:	4798      	blx	r3
 800054c:	e011      	b.n	8000572 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	0c1b      	lsrs	r3, r3, #16
 8000552:	b2db      	uxtb	r3, r3
 8000554:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	0a1b      	lsrs	r3, r3, #8
 800055a:	b2db      	uxtb	r3, r3
 800055c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	b2db      	uxtb	r3, r3
 8000562:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <WIZCHIP_READ+0x94>)
 8000566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000568:	f107 020c 	add.w	r2, r7, #12
 800056c:	2103      	movs	r1, #3
 800056e:	4610      	mov	r0, r2
 8000570:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <WIZCHIP_READ+0x94>)
 8000574:	69db      	ldr	r3, [r3, #28]
 8000576:	4798      	blx	r3
 8000578:	4603      	mov	r3, r0
 800057a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <WIZCHIP_READ+0x94>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000582:	4b04      	ldr	r3, [pc, #16]	; (8000594 <WIZCHIP_READ+0x94>)
 8000584:	691b      	ldr	r3, [r3, #16]
 8000586:	4798      	blx	r3
   return ret;
 8000588:	7bfb      	ldrb	r3, [r7, #15]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3710      	adds	r7, #16
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	2000001c 	.word	0x2000001c

08000598 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80005a4:	4b22      	ldr	r3, [pc, #136]	; (8000630 <WIZCHIP_WRITE+0x98>)
 80005a6:	68db      	ldr	r3, [r3, #12]
 80005a8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80005aa:	4b21      	ldr	r3, [pc, #132]	; (8000630 <WIZCHIP_WRITE+0x98>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f043 0304 	orr.w	r3, r3, #4
 80005b6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80005b8:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <WIZCHIP_WRITE+0x98>)
 80005ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d119      	bne.n	80005f4 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80005c0:	4b1b      	ldr	r3, [pc, #108]	; (8000630 <WIZCHIP_WRITE+0x98>)
 80005c2:	6a1b      	ldr	r3, [r3, #32]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	0c12      	lsrs	r2, r2, #16
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	4610      	mov	r0, r2
 80005cc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80005ce:	4b18      	ldr	r3, [pc, #96]	; (8000630 <WIZCHIP_WRITE+0x98>)
 80005d0:	6a1b      	ldr	r3, [r3, #32]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	0a12      	lsrs	r2, r2, #8
 80005d6:	b2d2      	uxtb	r2, r2
 80005d8:	4610      	mov	r0, r2
 80005da:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80005dc:	4b14      	ldr	r3, [pc, #80]	; (8000630 <WIZCHIP_WRITE+0x98>)
 80005de:	6a1b      	ldr	r3, [r3, #32]
 80005e0:	687a      	ldr	r2, [r7, #4]
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	4610      	mov	r0, r2
 80005e6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80005e8:	4b11      	ldr	r3, [pc, #68]	; (8000630 <WIZCHIP_WRITE+0x98>)
 80005ea:	6a1b      	ldr	r3, [r3, #32]
 80005ec:	78fa      	ldrb	r2, [r7, #3]
 80005ee:	4610      	mov	r0, r2
 80005f0:	4798      	blx	r3
 80005f2:	e013      	b.n	800061c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	0c1b      	lsrs	r3, r3, #16
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	0a1b      	lsrs	r3, r3, #8
 8000600:	b2db      	uxtb	r3, r3
 8000602:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	b2db      	uxtb	r3, r3
 8000608:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800060a:	78fb      	ldrb	r3, [r7, #3]
 800060c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <WIZCHIP_WRITE+0x98>)
 8000610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000612:	f107 020c 	add.w	r2, r7, #12
 8000616:	2104      	movs	r1, #4
 8000618:	4610      	mov	r0, r2
 800061a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <WIZCHIP_WRITE+0x98>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000622:	4b03      	ldr	r3, [pc, #12]	; (8000630 <WIZCHIP_WRITE+0x98>)
 8000624:	691b      	ldr	r3, [r3, #16]
 8000626:	4798      	blx	r3
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000001c 	.word	0x2000001c

08000634 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000634:	b590      	push	{r4, r7, lr}
 8000636:	b087      	sub	sp, #28
 8000638:	af00      	add	r7, sp, #0
 800063a:	60f8      	str	r0, [r7, #12]
 800063c:	60b9      	str	r1, [r7, #8]
 800063e:	4613      	mov	r3, r2
 8000640:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <WIZCHIP_READ_BUF+0xbc>)
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000648:	4b29      	ldr	r3, [pc, #164]	; (80006f0 <WIZCHIP_READ_BUF+0xbc>)
 800064a:	695b      	ldr	r3, [r3, #20]
 800064c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <WIZCHIP_READ_BUF+0xbc>)
 8000650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000652:	2b00      	cmp	r3, #0
 8000654:	d003      	beq.n	800065e <WIZCHIP_READ_BUF+0x2a>
 8000656:	4b26      	ldr	r3, [pc, #152]	; (80006f0 <WIZCHIP_READ_BUF+0xbc>)
 8000658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800065a:	2b00      	cmp	r3, #0
 800065c:	d126      	bne.n	80006ac <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800065e:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <WIZCHIP_READ_BUF+0xbc>)
 8000660:	6a1b      	ldr	r3, [r3, #32]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	0c12      	lsrs	r2, r2, #16
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	4610      	mov	r0, r2
 800066a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800066c:	4b20      	ldr	r3, [pc, #128]	; (80006f0 <WIZCHIP_READ_BUF+0xbc>)
 800066e:	6a1b      	ldr	r3, [r3, #32]
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	0a12      	lsrs	r2, r2, #8
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	4610      	mov	r0, r2
 8000678:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <WIZCHIP_READ_BUF+0xbc>)
 800067c:	6a1b      	ldr	r3, [r3, #32]
 800067e:	68fa      	ldr	r2, [r7, #12]
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	4610      	mov	r0, r2
 8000684:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000686:	2300      	movs	r3, #0
 8000688:	82fb      	strh	r3, [r7, #22]
 800068a:	e00a      	b.n	80006a2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <WIZCHIP_READ_BUF+0xbc>)
 800068e:	69db      	ldr	r3, [r3, #28]
 8000690:	8afa      	ldrh	r2, [r7, #22]
 8000692:	68b9      	ldr	r1, [r7, #8]
 8000694:	188c      	adds	r4, r1, r2
 8000696:	4798      	blx	r3
 8000698:	4603      	mov	r3, r0
 800069a:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 800069c:	8afb      	ldrh	r3, [r7, #22]
 800069e:	3301      	adds	r3, #1
 80006a0:	82fb      	strh	r3, [r7, #22]
 80006a2:	8afa      	ldrh	r2, [r7, #22]
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	429a      	cmp	r2, r3
 80006a8:	d3f0      	bcc.n	800068c <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80006aa:	e017      	b.n	80006dc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	0c1b      	lsrs	r3, r3, #16
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	0a1b      	lsrs	r3, r3, #8
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <WIZCHIP_READ_BUF+0xbc>)
 80006c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006c6:	f107 0210 	add.w	r2, r7, #16
 80006ca:	2103      	movs	r1, #3
 80006cc:	4610      	mov	r0, r2
 80006ce:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <WIZCHIP_READ_BUF+0xbc>)
 80006d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d4:	88fa      	ldrh	r2, [r7, #6]
 80006d6:	4611      	mov	r1, r2
 80006d8:	68b8      	ldr	r0, [r7, #8]
 80006da:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80006dc:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <WIZCHIP_READ_BUF+0xbc>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80006e2:	4b03      	ldr	r3, [pc, #12]	; (80006f0 <WIZCHIP_READ_BUF+0xbc>)
 80006e4:	691b      	ldr	r3, [r3, #16]
 80006e6:	4798      	blx	r3
}
 80006e8:	bf00      	nop
 80006ea:	371c      	adds	r7, #28
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}
 80006f0:	2000001c 	.word	0x2000001c

080006f4 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	60f8      	str	r0, [r7, #12]
 80006fc:	60b9      	str	r1, [r7, #8]
 80006fe:	4613      	mov	r3, r2
 8000700:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000702:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000708:	4b29      	ldr	r3, [pc, #164]	; (80007b0 <WIZCHIP_WRITE_BUF+0xbc>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	f043 0304 	orr.w	r3, r3, #4
 8000714:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000716:	4b26      	ldr	r3, [pc, #152]	; (80007b0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800071a:	2b00      	cmp	r3, #0
 800071c:	d126      	bne.n	800076c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800071e:	4b24      	ldr	r3, [pc, #144]	; (80007b0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000720:	6a1b      	ldr	r3, [r3, #32]
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	0c12      	lsrs	r2, r2, #16
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	4610      	mov	r0, r2
 800072a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800072c:	4b20      	ldr	r3, [pc, #128]	; (80007b0 <WIZCHIP_WRITE_BUF+0xbc>)
 800072e:	6a1b      	ldr	r3, [r3, #32]
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	0a12      	lsrs	r2, r2, #8
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	4610      	mov	r0, r2
 8000738:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800073a:	4b1d      	ldr	r3, [pc, #116]	; (80007b0 <WIZCHIP_WRITE_BUF+0xbc>)
 800073c:	6a1b      	ldr	r3, [r3, #32]
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	b2d2      	uxtb	r2, r2
 8000742:	4610      	mov	r0, r2
 8000744:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000746:	2300      	movs	r3, #0
 8000748:	82fb      	strh	r3, [r7, #22]
 800074a:	e00a      	b.n	8000762 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800074c:	4b18      	ldr	r3, [pc, #96]	; (80007b0 <WIZCHIP_WRITE_BUF+0xbc>)
 800074e:	6a1b      	ldr	r3, [r3, #32]
 8000750:	8afa      	ldrh	r2, [r7, #22]
 8000752:	68b9      	ldr	r1, [r7, #8]
 8000754:	440a      	add	r2, r1
 8000756:	7812      	ldrb	r2, [r2, #0]
 8000758:	4610      	mov	r0, r2
 800075a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800075c:	8afb      	ldrh	r3, [r7, #22]
 800075e:	3301      	adds	r3, #1
 8000760:	82fb      	strh	r3, [r7, #22]
 8000762:	8afa      	ldrh	r2, [r7, #22]
 8000764:	88fb      	ldrh	r3, [r7, #6]
 8000766:	429a      	cmp	r2, r3
 8000768:	d3f0      	bcc.n	800074c <WIZCHIP_WRITE_BUF+0x58>
 800076a:	e017      	b.n	800079c <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	0c1b      	lsrs	r3, r3, #16
 8000770:	b2db      	uxtb	r3, r3
 8000772:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	b2db      	uxtb	r3, r3
 800077a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000786:	f107 0210 	add.w	r2, r7, #16
 800078a:	2103      	movs	r1, #3
 800078c:	4610      	mov	r0, r2
 800078e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000794:	88fa      	ldrh	r2, [r7, #6]
 8000796:	4611      	mov	r1, r2
 8000798:	68b8      	ldr	r0, [r7, #8]
 800079a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <WIZCHIP_WRITE_BUF+0xbc>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80007a2:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <WIZCHIP_WRITE_BUF+0xbc>)
 80007a4:	691b      	ldr	r3, [r3, #16]
 80007a6:	4798      	blx	r3
}
 80007a8:	bf00      	nop
 80007aa:	3718      	adds	r7, #24
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	2000001c 	.word	0x2000001c

080007b4 <SPIReadWrite>:
#include "wizchip_conf.h"
#include "stdio.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPIReadWrite(uint8_t data){
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	while ((hspi1.Instance->SR & SPI_FLAG_TXE)!=SPI_FLAG_TXE);
 80007be:	bf00      	nop
 80007c0:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <SPIReadWrite+0x48>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	689b      	ldr	r3, [r3, #8]
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d1f8      	bne.n	80007c0 <SPIReadWrite+0xc>
	*(__IO uint8_t*)&hspi1.Instance->DR=data;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <SPIReadWrite+0x48>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	330c      	adds	r3, #12
 80007d4:	79fa      	ldrb	r2, [r7, #7]
 80007d6:	701a      	strb	r2, [r3, #0]

	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 80007d8:	bf00      	nop
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <SPIReadWrite+0x48>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	689b      	ldr	r3, [r3, #8]
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	2b01      	cmp	r3, #1
 80007e6:	d1f8      	bne.n	80007da <SPIReadWrite+0x26>
	return(*(__IO uint8_t*)&hspi1.Instance->DR);
 80007e8:	4b04      	ldr	r3, [pc, #16]	; (80007fc <SPIReadWrite+0x48>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	330c      	adds	r3, #12
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	b2db      	uxtb	r3, r3
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	200000c8 	.word	0x200000c8

08000800 <wizchip_select>:

void wizchip_select(void){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2101      	movs	r1, #1
 8000808:	4802      	ldr	r0, [pc, #8]	; (8000814 <wizchip_select+0x14>)
 800080a:	f001 f971 	bl	8001af0 <HAL_GPIO_WritePin>
}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40010800 	.word	0x40010800

08000818 <wizchip_deselect>:

void wizchip_deselect(void){
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2101      	movs	r1, #1
 8000820:	4802      	ldr	r0, [pc, #8]	; (800082c <wizchip_deselect+0x14>)
 8000822:	f001 f965 	bl	8001af0 <HAL_GPIO_WritePin>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40010800 	.word	0x40010800

08000830 <wizchip_read>:

uint8_t wizchip_read(void){
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);//passing dummy data
 8000836:	2000      	movs	r0, #0
 8000838:	f7ff ffbc 	bl	80007b4 <SPIReadWrite>
 800083c:	4603      	mov	r3, r0
 800083e:	71fb      	strb	r3, [r7, #7]
	return rb;
 8000840:	79fb      	ldrb	r3, [r7, #7]
}
 8000842:	4618      	mov	r0, r3
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}

0800084a <wizchip_write>:

void wizchip_write(uint8_t wb){
 800084a:	b580      	push	{r7, lr}
 800084c:	b082      	sub	sp, #8
 800084e:	af00      	add	r7, sp, #0
 8000850:	4603      	mov	r3, r0
 8000852:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);//writing a byte into the SPI Interface
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ffac 	bl	80007b4 <SPIReadWrite>
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}

08000864 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len){
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
 800086c:	460b      	mov	r3, r1
 800086e:	807b      	strh	r3, [r7, #2]
	for(int i=0; i<len;i++){
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	e00a      	b.n	800088c <wizchip_readburst+0x28>
		pBuf=SPIReadWrite(0x00);
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff ff9c 	bl	80007b4 <SPIReadWrite>
 800087c:	4603      	mov	r3, r0
 800087e:	607b      	str	r3, [r7, #4]
		pBuf++;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
	for(int i=0; i<len;i++){
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	3301      	adds	r3, #1
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	887b      	ldrh	r3, [r7, #2]
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	429a      	cmp	r2, r3
 8000892:	dbf0      	blt.n	8000876 <wizchip_readburst+0x12>
	}
}
 8000894:	bf00      	nop
 8000896:	bf00      	nop
 8000898:	3710      	adds	r7, #16
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}

0800089e <wizchip_writeburst>:
void wizchip_writeburst(uint8_t* pBuf, uint16_t len){
 800089e:	b580      	push	{r7, lr}
 80008a0:	b084      	sub	sp, #16
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
 80008a6:	460b      	mov	r3, r1
 80008a8:	807b      	strh	r3, [r7, #2]
	for(int i=0; i<len;i++){
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	e00a      	b.n	80008c6 <wizchip_writeburst+0x28>
		SPIReadWrite(*pBuf);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff7d 	bl	80007b4 <SPIReadWrite>
		pBuf++;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	3301      	adds	r3, #1
 80008be:	607b      	str	r3, [r7, #4]
	for(int i=0; i<len;i++){
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	3301      	adds	r3, #1
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	887b      	ldrh	r3, [r7, #2]
 80008c8:	68fa      	ldr	r2, [r7, #12]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dbf0      	blt.n	80008b0 <wizchip_writeburst+0x12>
	}
}
 80008ce:	bf00      	nop
 80008d0:	bf00      	nop
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <W5500IOInit>:

void W5500IOInit(){
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <W5500IOInit+0x50>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <W5500IOInit+0x50>)
 80008f2:	f043 0304 	orr.w	r3, r3, #4
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b0b      	ldr	r3, [pc, #44]	; (8000928 <W5500IOInit+0x50>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0304 	and.w	r3, r3, #4
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]

	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000904:	2303      	movs	r3, #3
 8000906:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000908:	2301      	movs	r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	617b      	str	r3, [r7, #20]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0308 	add.w	r3, r7, #8
 8000918:	4619      	mov	r1, r3
 800091a:	4804      	ldr	r0, [pc, #16]	; (800092c <W5500IOInit+0x54>)
 800091c:	f000 ff64 	bl	80017e8 <HAL_GPIO_Init>
}
 8000920:	bf00      	nop
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	40021000 	.word	0x40021000
 800092c:	40010800 	.word	0x40010800

08000930 <W5500Init>:

void W5500Init(){
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b087      	sub	sp, #28
 8000934:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8]={{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <W5500Init+0x78>)
 8000938:	1d3c      	adds	r4, r7, #4
 800093a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800093c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500IOInit();
 8000940:	f7ff ffca 	bl	80008d8 <W5500IOInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);//Chip Select high by default
 8000944:	2201      	movs	r2, #1
 8000946:	2101      	movs	r1, #1
 8000948:	4818      	ldr	r0, [pc, #96]	; (80009ac <W5500Init+0x7c>)
 800094a:	f001 f8d1 	bl	8001af0 <HAL_GPIO_WritePin>

	tmp=0xff;
 800094e:	23ff      	movs	r3, #255	; 0xff
 8000950:	75fb      	strb	r3, [r7, #23]
	while(tmp--);
 8000952:	bf00      	nop
 8000954:	7dfb      	ldrb	r3, [r7, #23]
 8000956:	1e5a      	subs	r2, r3, #1
 8000958:	75fa      	strb	r2, [r7, #23]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d1fa      	bne.n	8000954 <W5500Init+0x24>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);//Select chip by putting chip select low
 800095e:	2200      	movs	r2, #0
 8000960:	2101      	movs	r1, #1
 8000962:	4812      	ldr	r0, [pc, #72]	; (80009ac <W5500Init+0x7c>)
 8000964:	f001 f8c4 	bl	8001af0 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8000968:	4911      	ldr	r1, [pc, #68]	; (80009b0 <W5500Init+0x80>)
 800096a:	4812      	ldr	r0, [pc, #72]	; (80009b4 <W5500Init+0x84>)
 800096c:	f000 f88a 	bl	8000a84 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8000970:	4911      	ldr	r1, [pc, #68]	; (80009b8 <W5500Init+0x88>)
 8000972:	4812      	ldr	r0, [pc, #72]	; (80009bc <W5500Init+0x8c>)
 8000974:	f000 f8aa 	bl	8000acc <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 8000978:	4911      	ldr	r1, [pc, #68]	; (80009c0 <W5500Init+0x90>)
 800097a:	4812      	ldr	r0, [pc, #72]	; (80009c4 <W5500Init+0x94>)
 800097c:	f000 f8d2 	bl	8000b24 <reg_wizchip_spiburst_cbfunc>

	if(ctlwizchip(CW_INIT_WIZCHIP, (void*)memsize)==-1){
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	4619      	mov	r1, r3
 8000984:	2001      	movs	r0, #1
 8000986:	f000 f8f9 	bl	8000b7c <ctlwizchip>
 800098a:	4603      	mov	r3, r0
 800098c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000990:	d103      	bne.n	800099a <W5500Init+0x6a>
		printf("wizchip Initialization failed\r\n");
 8000992:	480d      	ldr	r0, [pc, #52]	; (80009c8 <W5500Init+0x98>)
 8000994:	f001 fe3c 	bl	8002610 <puts>
		while(1);
 8000998:	e7fe      	b.n	8000998 <W5500Init+0x68>
	}
	printf("wizchip initialization success\r\n");
 800099a:	480c      	ldr	r0, [pc, #48]	; (80009cc <W5500Init+0x9c>)
 800099c:	f001 fe38 	bl	8002610 <puts>

}
 80009a0:	bf00      	nop
 80009a2:	371c      	adds	r7, #28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd90      	pop	{r4, r7, pc}
 80009a8:	08002d84 	.word	0x08002d84
 80009ac:	40010800 	.word	0x40010800
 80009b0:	08000819 	.word	0x08000819
 80009b4:	08000801 	.word	0x08000801
 80009b8:	0800084b 	.word	0x0800084b
 80009bc:	08000831 	.word	0x08000831
 80009c0:	0800089f 	.word	0x0800089f
 80009c4:	08000865 	.word	0x08000865
 80009c8:	08002d44 	.word	0x08002d44
 80009cc:	08002d64 	.word	0x08002d64

080009d0 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr

080009dc <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bc80      	pop	{r7}
 80009e6:	4770      	bx	lr

080009e8 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bc80      	pop	{r7}
 8000a16:	4770      	bx	lr

08000a18 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	460b      	mov	r3, r1
 8000a22:	70fb      	strb	r3, [r7, #3]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	78fa      	ldrb	r2, [r7, #3]
 8000a28:	701a      	strb	r2, [r3, #0]
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	2300      	movs	r3, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr

08000a42 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	4603      	mov	r3, r0
 8000a4a:	71fb      	strb	r3, [r7, #7]
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bc80      	pop	{r7}
 8000a54:	4770      	bx	lr

08000a56 <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8000a56:	b480      	push	{r7}
 8000a58:	b083      	sub	sp, #12
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	460b      	mov	r3, r1
 8000a60:	807b      	strh	r3, [r7, #2]
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	807b      	strh	r3, [r7, #2]
 8000a78:	bf00      	nop
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
	...

08000a84 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <reg_wizchip_cs_cbfunc+0x16>
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d106      	bne.n	8000aa8 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <reg_wizchip_cs_cbfunc+0x3c>)
 8000a9c:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <reg_wizchip_cs_cbfunc+0x40>)
 8000a9e:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <reg_wizchip_cs_cbfunc+0x3c>)
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <reg_wizchip_cs_cbfunc+0x44>)
 8000aa4:	619a      	str	r2, [r3, #24]
 8000aa6:	e006      	b.n	8000ab6 <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8000aa8:	4a05      	ldr	r2, [pc, #20]	; (8000ac0 <reg_wizchip_cs_cbfunc+0x3c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <reg_wizchip_cs_cbfunc+0x3c>)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	6193      	str	r3, [r2, #24]
   }
}
 8000ab4:	bf00      	nop
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	2000001c 	.word	0x2000001c
 8000ac4:	080009e9 	.word	0x080009e9
 8000ac8:	080009f5 	.word	0x080009f5

08000acc <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8000ad6:	bf00      	nop
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <reg_wizchip_spi_cbfunc+0x4c>)
 8000ada:	881b      	ldrh	r3, [r3, #0]
 8000adc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0f9      	beq.n	8000ad8 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d002      	beq.n	8000af0 <reg_wizchip_spi_cbfunc+0x24>
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d106      	bne.n	8000afe <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8000af0:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <reg_wizchip_spi_cbfunc+0x4c>)
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <reg_wizchip_spi_cbfunc+0x50>)
 8000af4:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <reg_wizchip_spi_cbfunc+0x4c>)
 8000af8:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <reg_wizchip_spi_cbfunc+0x54>)
 8000afa:	621a      	str	r2, [r3, #32]
 8000afc:	e006      	b.n	8000b0c <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8000afe:	4a06      	ldr	r2, [pc, #24]	; (8000b18 <reg_wizchip_spi_cbfunc+0x4c>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <reg_wizchip_spi_cbfunc+0x4c>)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	6213      	str	r3, [r2, #32]
   }
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	2000001c 	.word	0x2000001c
 8000b1c:	08000a35 	.word	0x08000a35
 8000b20:	08000a43 	.word	0x08000a43

08000b24 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8000b2e:	bf00      	nop
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f9      	beq.n	8000b30 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <reg_wizchip_spiburst_cbfunc+0x24>
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d106      	bne.n	8000b56 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8000b4a:	4a0a      	ldr	r2, [pc, #40]	; (8000b74 <reg_wizchip_spiburst_cbfunc+0x50>)
 8000b4c:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8000b50:	4a09      	ldr	r2, [pc, #36]	; (8000b78 <reg_wizchip_spiburst_cbfunc+0x54>)
 8000b52:	629a      	str	r2, [r3, #40]	; 0x28
 8000b54:	e006      	b.n	8000b64 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8000b56:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8000b5c:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8000b62:	bf00      	nop
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	2000001c 	.word	0x2000001c
 8000b74:	08000a57 	.word	0x08000a57
 8000b78:	08000a6d 	.word	0x08000a6d

08000b7c <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	6039      	str	r1, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	2300      	movs	r3, #0
 8000b92:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	2b0f      	cmp	r3, #15
 8000b98:	f200 80c7 	bhi.w	8000d2a <ctlwizchip+0x1ae>
 8000b9c:	a201      	add	r2, pc, #4	; (adr r2, 8000ba4 <ctlwizchip+0x28>)
 8000b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba2:	bf00      	nop
 8000ba4:	08000be5 	.word	0x08000be5
 8000ba8:	08000beb 	.word	0x08000beb
 8000bac:	08000c17 	.word	0x08000c17
 8000bb0:	08000c0b 	.word	0x08000c0b
 8000bb4:	08000c25 	.word	0x08000c25
 8000bb8:	08000c31 	.word	0x08000c31
 8000bbc:	08000c3f 	.word	0x08000c3f
 8000bc0:	08000c65 	.word	0x08000c65
 8000bc4:	08000c8b 	.word	0x08000c8b
 8000bc8:	08000ccf 	.word	0x08000ccf
 8000bcc:	08000cd5 	.word	0x08000cd5
 8000bd0:	08000cdd 	.word	0x08000cdd
 8000bd4:	08000d31 	.word	0x08000d31
 8000bd8:	08000ce5 	.word	0x08000ce5
 8000bdc:	08000cf3 	.word	0x08000cf3
 8000be0:	08000d0f 	.word	0x08000d0f
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8000be4:	f000 f8ea 	bl	8000dbc <wizchip_sw_reset>
         break;
 8000be8:	e0a3      	b.n	8000d32 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d004      	beq.n	8000bfa <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	3308      	adds	r3, #8
 8000bf8:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f927 	bl	8000e54 <wizchip_init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	e094      	b.n	8000d34 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f9ac 	bl	8000f6c <wizchip_clrinterrupt>
         break;
 8000c14:	e08d      	b.n	8000d32 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8000c16:	f000 f9dd 	bl	8000fd4 <wizchip_getinterrupt>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	801a      	strh	r2, [r3, #0]
         break;
 8000c22:	e086      	b.n	8000d32 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 f9f8 	bl	800101e <wizchip_setinterruptmask>
         break;         
 8000c2e:	e080      	b.n	8000d32 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8000c30:	f000 fa10 	bl	8001054 <wizchip_getinterruptmask>
 8000c34:	4603      	mov	r3, r0
 8000c36:	461a      	mov	r2, r3
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	801a      	strh	r2, [r3, #0]
         break;
 8000c3c:	e079      	b.n	8000d32 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	0a1b      	lsrs	r3, r3, #8
 8000c44:	b29b      	uxth	r3, r3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8000c4e:	f7ff fca3 	bl	8000598 <WIZCHIP_WRITE>
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000c5e:	f7ff fc9b 	bl	8000598 <WIZCHIP_WRITE>
         break;
 8000c62:	e066      	b.n	8000d32 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8000c64:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8000c68:	f7ff fc4a 	bl	8000500 <WIZCHIP_READ>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	021b      	lsls	r3, r3, #8
 8000c72:	b29c      	uxth	r4, r3
 8000c74:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000c78:	f7ff fc42 	bl	8000500 <WIZCHIP_READ>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	4423      	add	r3, r4
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	801a      	strh	r2, [r3, #0]
         break;
 8000c88:	e053      	b.n	8000d32 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8000c8a:	4b2c      	ldr	r3, [pc, #176]	; (8000d3c <ctlwizchip+0x1c0>)
 8000c8c:	789a      	ldrb	r2, [r3, #2]
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	3301      	adds	r3, #1
 8000c96:	4a29      	ldr	r2, [pc, #164]	; (8000d3c <ctlwizchip+0x1c0>)
 8000c98:	78d2      	ldrb	r2, [r2, #3]
 8000c9a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	3302      	adds	r3, #2
 8000ca0:	4a26      	ldr	r2, [pc, #152]	; (8000d3c <ctlwizchip+0x1c0>)
 8000ca2:	7912      	ldrb	r2, [r2, #4]
 8000ca4:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	3303      	adds	r3, #3
 8000caa:	4a24      	ldr	r2, [pc, #144]	; (8000d3c <ctlwizchip+0x1c0>)
 8000cac:	7952      	ldrb	r2, [r2, #5]
 8000cae:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	3304      	adds	r3, #4
 8000cb4:	4a21      	ldr	r2, [pc, #132]	; (8000d3c <ctlwizchip+0x1c0>)
 8000cb6:	7992      	ldrb	r2, [r2, #6]
 8000cb8:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	3305      	adds	r3, #5
 8000cbe:	4a1f      	ldr	r2, [pc, #124]	; (8000d3c <ctlwizchip+0x1c0>)
 8000cc0:	79d2      	ldrb	r2, [r2, #7]
 8000cc2:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	3306      	adds	r3, #6
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]
         break;
 8000ccc:	e031      	b.n	8000d32 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8000cce:	f000 fa13 	bl	80010f8 <wizphy_reset>
         break;
 8000cd2:	e02e      	b.n	8000d32 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8000cd4:	6838      	ldr	r0, [r7, #0]
 8000cd6:	f000 fa36 	bl	8001146 <wizphy_setphyconf>
         break;
 8000cda:	e02a      	b.n	8000d32 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8000cdc:	6838      	ldr	r0, [r7, #0]
 8000cde:	f000 fa75 	bl	80011cc <wizphy_getphyconf>
         break;
 8000ce2:	e026      	b.n	8000d32 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 fad9 	bl	80012a0 <wizphy_setphypmode>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	e020      	b.n	8000d34 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8000cf2:	f000 f9e8 	bl	80010c6 <wizphy_getphypmode>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8000cfa:	7dfb      	ldrb	r3, [r7, #23]
 8000cfc:	2bff      	cmp	r3, #255	; 0xff
 8000cfe:	d102      	bne.n	8000d06 <ctlwizchip+0x18a>
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	e016      	b.n	8000d34 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	7dfa      	ldrb	r2, [r7, #23]
 8000d0a:	701a      	strb	r2, [r3, #0]
         break;
 8000d0c:	e011      	b.n	8000d32 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8000d0e:	f000 f9c4 	bl	800109a <wizphy_getphylink>
 8000d12:	4603      	mov	r3, r0
 8000d14:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
 8000d18:	2bff      	cmp	r3, #255	; 0xff
 8000d1a:	d102      	bne.n	8000d22 <ctlwizchip+0x1a6>
 8000d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d20:	e008      	b.n	8000d34 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	7dfa      	ldrb	r2, [r7, #23]
 8000d26:	701a      	strb	r2, [r3, #0]
         break;
 8000d28:	e003      	b.n	8000d32 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	e001      	b.n	8000d34 <ctlwizchip+0x1b8>
         break;
 8000d30:	bf00      	nop
   }
   return 0;
 8000d32:	2300      	movs	r3, #0
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	371c      	adds	r7, #28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	2000001c 	.word	0x2000001c

08000d40 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d82c      	bhi.n	8000dac <ctlnetwork+0x6c>
 8000d52:	a201      	add	r2, pc, #4	; (adr r2, 8000d58 <ctlnetwork+0x18>)
 8000d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d58:	08000d71 	.word	0x08000d71
 8000d5c:	08000d79 	.word	0x08000d79
 8000d60:	08000d81 	.word	0x08000d81
 8000d64:	08000d8f 	.word	0x08000d8f
 8000d68:	08000d9d 	.word	0x08000d9d
 8000d6c:	08000da5 	.word	0x08000da5
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8000d70:	6838      	ldr	r0, [r7, #0]
 8000d72:	f000 fadf 	bl	8001334 <wizchip_setnetinfo>
         break;
 8000d76:	e01c      	b.n	8000db2 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8000d78:	6838      	ldr	r0, [r7, #0]
 8000d7a:	f000 fb1b 	bl	80013b4 <wizchip_getnetinfo>
         break;
 8000d7e:	e018      	b.n	8000db2 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f000 fb55 	bl	8001434 <wizchip_setnetmode>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	e012      	b.n	8000db4 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8000d8e:	f000 fb73 	bl	8001478 <wizchip_getnetmode>
 8000d92:	4603      	mov	r3, r0
 8000d94:	461a      	mov	r2, r3
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	701a      	strb	r2, [r3, #0]
         break;
 8000d9a:	e00a      	b.n	8000db2 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8000d9c:	6838      	ldr	r0, [r7, #0]
 8000d9e:	f000 fb73 	bl	8001488 <wizchip_settimeout>
         break;
 8000da2:	e006      	b.n	8000db2 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8000da4:	6838      	ldr	r0, [r7, #0]
 8000da6:	f000 fb90 	bl	80014ca <wizchip_gettimeout>
         break;
 8000daa:	e002      	b.n	8000db2 <ctlnetwork+0x72>
      default:
         return -1;
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
 8000db0:	e000      	b.n	8000db4 <ctlnetwork+0x74>
   }
   return 0;
 8000db2:	2300      	movs	r3, #0
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3708      	adds	r7, #8
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2206      	movs	r2, #6
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000dcc:	f7ff fc32 	bl	8000634 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	2204      	movs	r2, #4
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ddc:	f7ff fc2a 	bl	8000634 <WIZCHIP_READ_BUF>
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	2204      	movs	r2, #4
 8000de6:	4619      	mov	r1, r3
 8000de8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000dec:	f7ff fc22 	bl	8000634 <WIZCHIP_READ_BUF>
 8000df0:	f107 030c 	add.w	r3, r7, #12
 8000df4:	2204      	movs	r2, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000dfc:	f7ff fc1a 	bl	8000634 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	2000      	movs	r0, #0
 8000e04:	f7ff fbc8 	bl	8000598 <WIZCHIP_WRITE>
   getMR(); // for delay
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff fb79 	bl	8000500 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2206      	movs	r2, #6
 8000e12:	4619      	mov	r1, r3
 8000e14:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000e18:	f7ff fc6c 	bl	80006f4 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2204      	movs	r2, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e28:	f7ff fc64 	bl	80006f4 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	2204      	movs	r2, #4
 8000e32:	4619      	mov	r1, r3
 8000e34:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000e38:	f7ff fc5c 	bl	80006f4 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2204      	movs	r2, #4
 8000e42:	4619      	mov	r1, r3
 8000e44:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000e48:	f7ff fc54 	bl	80006f4 <WIZCHIP_WRITE_BUF>
}
 8000e4c:	bf00      	nop
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8000e62:	f7ff ffab 	bl	8000dbc <wizchip_sw_reset>
   if(txsize)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d03b      	beq.n	8000ee4 <wizchip_init+0x90>
   {
      tmp = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000e70:	2300      	movs	r3, #0
 8000e72:	73fb      	strb	r3, [r7, #15]
 8000e74:	e015      	b.n	8000ea2 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8000e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	7bbb      	ldrb	r3, [r7, #14]
 8000e82:	4413      	add	r3, r2
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8000e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000e8c:	2b10      	cmp	r3, #16
 8000e8e:	dd02      	ble.n	8000e96 <wizchip_init+0x42>
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	e066      	b.n	8000f64 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	73fb      	strb	r3, [r7, #15]
 8000ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea6:	2b07      	cmp	r3, #7
 8000ea8:	dde5      	ble.n	8000e76 <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73fb      	strb	r3, [r7, #15]
 8000eae:	e015      	b.n	8000edc <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8000eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f7ff fb64 	bl	8000598 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	dde5      	ble.n	8000eb0 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d03b      	beq.n	8000f62 <wizchip_init+0x10e>
   {
      tmp = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000eee:	2300      	movs	r3, #0
 8000ef0:	73fb      	strb	r3, [r7, #15]
 8000ef2:	e015      	b.n	8000f20 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8000ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	781a      	ldrb	r2, [r3, #0]
 8000efe:	7bbb      	ldrb	r3, [r7, #14]
 8000f00:	4413      	add	r3, r2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8000f06:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f0a:	2b10      	cmp	r3, #16
 8000f0c:	dd02      	ble.n	8000f14 <wizchip_init+0xc0>
 8000f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f12:	e027      	b.n	8000f64 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	73fb      	strb	r3, [r7, #15]
 8000f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f24:	2b07      	cmp	r3, #7
 8000f26:	dde5      	ble.n	8000ef4 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	73fb      	strb	r3, [r7, #15]
 8000f2c:	e015      	b.n	8000f5a <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8000f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	3301      	adds	r3, #1
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	4413      	add	r3, r2
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fb25 	bl	8000598 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000f4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	3301      	adds	r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	73fb      	strb	r3, [r7, #15]
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	2b07      	cmp	r3, #7
 8000f60:	dde5      	ble.n	8000f2e <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8000f62:	2300      	movs	r3, #0
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 8000f76:	88fb      	ldrh	r3, [r7, #6]
 8000f78:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	0a1b      	lsrs	r3, r3, #8
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	f023 030f 	bic.w	r3, r3, #15
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8000f90:	f7ff fb02 	bl	8000598 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8000f94:	2300      	movs	r3, #0
 8000f96:	73fb      	strb	r3, [r7, #15]
 8000f98:	e014      	b.n	8000fc4 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8000f9a:	7bba      	ldrb	r2, [r7, #14]
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	fa42 f303 	asr.w	r3, r2, r3
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d009      	beq.n	8000fbe <wizchip_clrinterrupt+0x52>
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	3301      	adds	r3, #1
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000fb6:	211f      	movs	r1, #31
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff faed 	bl	8000598 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	73fb      	strb	r3, [r7, #15]
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	2b07      	cmp	r3, #7
 8000fc8:	d9e7      	bls.n	8000f9a <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8000fca:	bf00      	nop
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 8000fe6:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8000fea:	f7ff fa89 	bl	8000500 <WIZCHIP_READ>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f023 030f 	bic.w	r3, r3, #15
 8000ff4:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 8000ff6:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8000ffa:	f7ff fa81 	bl	8000500 <WIZCHIP_READ>
 8000ffe:	4603      	mov	r3, r0
 8001000:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 8001006:	88bb      	ldrh	r3, [r7, #4]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b29a      	uxth	r2, r3
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	b29b      	uxth	r3, r3
 8001010:	4413      	add	r3, r2
 8001012:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001014:	88bb      	ldrh	r3, [r7, #4]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b084      	sub	sp, #16
 8001022:	af00      	add	r7, sp, #0
 8001024:	4603      	mov	r3, r0
 8001026:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	0a1b      	lsrs	r3, r3, #8
 8001030:	b29b      	uxth	r3, r3
 8001032:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	4619      	mov	r1, r3
 8001038:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800103c:	f7ff faac 	bl	8000598 <WIZCHIP_WRITE>
   setSIMR(simr);
 8001040:	7bbb      	ldrb	r3, [r7, #14]
 8001042:	4619      	mov	r1, r3
 8001044:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001048:	f7ff faa6 	bl	8000598 <WIZCHIP_WRITE>
#endif   
}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 800105a:	2300      	movs	r3, #0
 800105c:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 8001066:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 800106a:	f7ff fa49 	bl	8000500 <WIZCHIP_READ>
 800106e:	4603      	mov	r3, r0
 8001070:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8001072:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001076:	f7ff fa43 	bl	8000500 <WIZCHIP_READ>
 800107a:	4603      	mov	r3, r0
 800107c:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 800107e:	79bb      	ldrb	r3, [r7, #6]
 8001080:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8001082:	88bb      	ldrh	r3, [r7, #4]
 8001084:	021b      	lsls	r3, r3, #8
 8001086:	b29a      	uxth	r2, r3
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	b29b      	uxth	r3, r3
 800108c:	4413      	add	r3, r2
 800108e:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001090:	88bb      	ldrh	r3, [r7, #4]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 80010a0:	2300      	movs	r3, #0
 80010a2:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 80010a4:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80010a8:	f7ff fa2a 	bl	8000500 <WIZCHIP_READ>
 80010ac:	4603      	mov	r3, r0
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 80010b6:	2301      	movs	r3, #1
 80010b8:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b082      	sub	sp, #8
 80010ca:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80010d0:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80010d4:	f7ff fa14 	bl	8000500 <WIZCHIP_READ>
 80010d8:	4603      	mov	r3, r0
 80010da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80010de:	2b30      	cmp	r3, #48	; 0x30
 80010e0:	d102      	bne.n	80010e8 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80010e2:	2301      	movs	r3, #1
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	e001      	b.n	80010ec <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80010e8:	2300      	movs	r3, #0
 80010ea:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3708      	adds	r7, #8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80010fe:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001102:	f7ff f9fd 	bl	8000500 <WIZCHIP_READ>
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001110:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800111a:	f7ff fa3d 	bl	8000598 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 800111e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001122:	f7ff f9ed 	bl	8000500 <WIZCHIP_READ>
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001130:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	4619      	mov	r1, r3
 8001136:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800113a:	f7ff fa2d 	bl	8000598 <WIZCHIP_WRITE>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b084      	sub	sp, #16
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d104      	bne.n	8001164 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 800115a:	7bfb      	ldrb	r3, [r7, #15]
 800115c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001160:	73fb      	strb	r3, [r7, #15]
 8001162:	e003      	b.n	800116c <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
 8001166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800116a:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	785b      	ldrb	r3, [r3, #1]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d104      	bne.n	800117e <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	e019      	b.n	80011b2 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	78db      	ldrb	r3, [r3, #3]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d10d      	bne.n	80011a2 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	789b      	ldrb	r3, [r3, #2]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d104      	bne.n	8001198 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	f043 0318 	orr.w	r3, r3, #24
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	e00c      	b.n	80011b2 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e007      	b.n	80011b2 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	789b      	ldrb	r3, [r3, #2]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d103      	bne.n	80011b2 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	f043 0310 	orr.w	r3, r3, #16
 80011b0:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80011ba:	f7ff f9ed 	bl	8000598 <WIZCHIP_WRITE>
   wizphy_reset();
 80011be:	f7ff ff9b 	bl	80010f8 <wizphy_reset>
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80011d8:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80011dc:	f7ff f990 	bl	8000500 <WIZCHIP_READ>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80011e4:	7bfb      	ldrb	r3, [r7, #15]
 80011e6:	119b      	asrs	r3, r3, #6
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
 80011f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80011fa:	2b20      	cmp	r3, #32
 80011fc:	d001      	beq.n	8001202 <wizphy_getphyconf+0x36>
 80011fe:	2b38      	cmp	r3, #56	; 0x38
 8001200:	d103      	bne.n	800120a <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	705a      	strb	r2, [r3, #1]
         break;
 8001208:	e003      	b.n	8001212 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	705a      	strb	r2, [r3, #1]
         break;
 8001210:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001218:	3b10      	subs	r3, #16
 800121a:	2b10      	cmp	r3, #16
 800121c:	bf8c      	ite	hi
 800121e:	2201      	movhi	r2, #1
 8001220:	2200      	movls	r2, #0
 8001222:	b2d2      	uxtb	r2, r2
 8001224:	2a00      	cmp	r2, #0
 8001226:	d10f      	bne.n	8001248 <wizphy_getphyconf+0x7c>
 8001228:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <wizphy_getphyconf+0xcc>)
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	2b00      	cmp	r3, #0
 8001234:	bf14      	ite	ne
 8001236:	2301      	movne	r3, #1
 8001238:	2300      	moveq	r3, #0
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	d003      	beq.n	8001248 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	709a      	strb	r2, [r3, #2]
         break;
 8001246:	e003      	b.n	8001250 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	709a      	strb	r2, [r3, #2]
         break;
 800124e:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001250:	7bfb      	ldrb	r3, [r7, #15]
 8001252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001256:	3b08      	subs	r3, #8
 8001258:	2b18      	cmp	r3, #24
 800125a:	bf8c      	ite	hi
 800125c:	2201      	movhi	r2, #1
 800125e:	2200      	movls	r2, #0
 8001260:	b2d2      	uxtb	r2, r2
 8001262:	2a00      	cmp	r2, #0
 8001264:	d10f      	bne.n	8001286 <wizphy_getphyconf+0xba>
 8001266:	4a0d      	ldr	r2, [pc, #52]	; (800129c <wizphy_getphyconf+0xd0>)
 8001268:	fa22 f303 	lsr.w	r3, r2, r3
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	bf14      	ite	ne
 8001274:	2301      	movne	r3, #1
 8001276:	2300      	moveq	r3, #0
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	70da      	strb	r2, [r3, #3]
         break;
 8001284:	e003      	b.n	800128e <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	70da      	strb	r2, [r3, #3]
         break;
 800128c:	bf00      	nop
   }
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	00010101 	.word	0x00010101
 800129c:	01010001 	.word	0x01010001

080012a0 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80012ae:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80012b2:	f7ff f925 	bl	8000500 <WIZCHIP_READ>
 80012b6:	4603      	mov	r3, r0
 80012b8:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <wizphy_setphypmode+0x2a>
 80012c4:	f04f 33ff 	mov.w	r3, #4294967295
 80012c8:	e030      	b.n	800132c <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80012d0:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d104      	bne.n	80012e2 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80012d8:	7bfb      	ldrb	r3, [r7, #15]
 80012da:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e003      	b.n	80012ea <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 80012e8:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80012f2:	f7ff f951 	bl	8000598 <WIZCHIP_WRITE>
   wizphy_reset();
 80012f6:	f7ff feff 	bl	80010f8 <wizphy_reset>
   tmp = getPHYCFGR();
 80012fa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80012fe:	f7ff f8ff 	bl	8000500 <WIZCHIP_READ>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d106      	bne.n	800131a <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 800130c:	7bfb      	ldrb	r3, [r7, #15]
 800130e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001312:	2b00      	cmp	r3, #0
 8001314:	d008      	beq.n	8001328 <wizphy_setphypmode+0x88>
 8001316:	2300      	movs	r3, #0
 8001318:	e008      	b.n	800132c <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <wizphy_setphypmode+0x88>
 8001324:	2300      	movs	r3, #0
 8001326:	e001      	b.n	800132c <wizphy_setphypmode+0x8c>
   }
   return -1;
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
}
 800132c:	4618      	mov	r0, r3
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2206      	movs	r2, #6
 8001340:	4619      	mov	r1, r3
 8001342:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001346:	f7ff f9d5 	bl	80006f4 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	330e      	adds	r3, #14
 800134e:	2204      	movs	r2, #4
 8001350:	4619      	mov	r1, r3
 8001352:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001356:	f7ff f9cd 	bl	80006f4 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	330a      	adds	r3, #10
 800135e:	2204      	movs	r2, #4
 8001360:	4619      	mov	r1, r3
 8001362:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001366:	f7ff f9c5 	bl	80006f4 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3306      	adds	r3, #6
 800136e:	2204      	movs	r2, #4
 8001370:	4619      	mov	r1, r3
 8001372:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001376:	f7ff f9bd 	bl	80006f4 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	7c9a      	ldrb	r2, [r3, #18]
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <wizchip_setnetinfo+0x78>)
 8001380:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	7cda      	ldrb	r2, [r3, #19]
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <wizchip_setnetinfo+0x78>)
 8001388:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	7d1a      	ldrb	r2, [r3, #20]
 800138e:	4b07      	ldr	r3, [pc, #28]	; (80013ac <wizchip_setnetinfo+0x78>)
 8001390:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	7d5a      	ldrb	r2, [r3, #21]
 8001396:	4b05      	ldr	r3, [pc, #20]	; (80013ac <wizchip_setnetinfo+0x78>)
 8001398:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	7d9a      	ldrb	r2, [r3, #22]
 800139e:	4b04      	ldr	r3, [pc, #16]	; (80013b0 <wizchip_setnetinfo+0x7c>)
 80013a0:	701a      	strb	r2, [r3, #0]
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000124 	.word	0x20000124
 80013b0:	20000128 	.word	0x20000128

080013b4 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2206      	movs	r2, #6
 80013c0:	4619      	mov	r1, r3
 80013c2:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80013c6:	f7ff f935 	bl	8000634 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	330e      	adds	r3, #14
 80013ce:	2204      	movs	r2, #4
 80013d0:	4619      	mov	r1, r3
 80013d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013d6:	f7ff f92d 	bl	8000634 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	330a      	adds	r3, #10
 80013de:	2204      	movs	r2, #4
 80013e0:	4619      	mov	r1, r3
 80013e2:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80013e6:	f7ff f925 	bl	8000634 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3306      	adds	r3, #6
 80013ee:	2204      	movs	r2, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80013f6:	f7ff f91d 	bl	8000634 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <wizchip_getnetinfo+0x78>)
 80013fc:	781a      	ldrb	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <wizchip_getnetinfo+0x78>)
 8001404:	785a      	ldrb	r2, [r3, #1]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <wizchip_getnetinfo+0x78>)
 800140c:	789a      	ldrb	r2, [r3, #2]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <wizchip_getnetinfo+0x78>)
 8001414:	78da      	ldrb	r2, [r3, #3]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 800141a:	4b05      	ldr	r3, [pc, #20]	; (8001430 <wizchip_getnetinfo+0x7c>)
 800141c:	781a      	ldrb	r2, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	759a      	strb	r2, [r3, #22]
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000124 	.word	0x20000124
 8001430:	20000128 	.word	0x20000128

08001434 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001448:	2b00      	cmp	r3, #0
 800144a:	d002      	beq.n	8001452 <wizchip_setnetmode+0x1e>
 800144c:	f04f 33ff 	mov.w	r3, #4294967295
 8001450:	e00e      	b.n	8001470 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff f854 	bl	8000500 <WIZCHIP_READ>
 8001458:	4603      	mov	r3, r0
 800145a:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	4313      	orrs	r3, r2
 8001462:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	4619      	mov	r1, r3
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff f895 	bl	8000598 <WIZCHIP_WRITE>
   return 0;
 800146e:	2300      	movs	r3, #0
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff f83f 	bl	8000500 <WIZCHIP_READ>
 8001482:	4603      	mov	r3, r0
}
 8001484:	4618      	mov	r0, r3
 8001486:	bd80      	pop	{r7, pc}

08001488 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	4619      	mov	r1, r3
 8001496:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800149a:	f7ff f87d 	bl	8000598 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	885b      	ldrh	r3, [r3, #2]
 80014a2:	0a1b      	lsrs	r3, r3, #8
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	4619      	mov	r1, r3
 80014aa:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80014ae:	f7ff f873 	bl	8000598 <WIZCHIP_WRITE>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	885b      	ldrh	r3, [r3, #2]
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	4619      	mov	r1, r3
 80014ba:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80014be:	f7ff f86b 	bl	8000598 <WIZCHIP_WRITE>
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80014ca:	b590      	push	{r4, r7, lr}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80014d2:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 80014d6:	f7ff f813 	bl	8000500 <WIZCHIP_READ>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80014e2:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 80014e6:	f7ff f80b 	bl	8000500 <WIZCHIP_READ>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	b29c      	uxth	r4, r3
 80014f2:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 80014f6:	f7ff f803 	bl	8000500 <WIZCHIP_READ>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	4423      	add	r3, r4
 8001500:	b29a      	uxth	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	805a      	strh	r2, [r3, #2]
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	bd90      	pop	{r4, r7, pc}
	...

08001510 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001510:	f7fe fff0 	bl	80004f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001514:	480b      	ldr	r0, [pc, #44]	; (8001544 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001516:	490c      	ldr	r1, [pc, #48]	; (8001548 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001518:	4a0c      	ldr	r2, [pc, #48]	; (800154c <LoopFillZerobss+0x16>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800151c:	e002      	b.n	8001524 <LoopCopyDataInit>

0800151e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001522:	3304      	adds	r3, #4

08001524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001528:	d3f9      	bcc.n	800151e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152a:	4a09      	ldr	r2, [pc, #36]	; (8001550 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800152c:	4c09      	ldr	r4, [pc, #36]	; (8001554 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001530:	e001      	b.n	8001536 <LoopFillZerobss>

08001532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001534:	3204      	adds	r2, #4

08001536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001538:	d3fb      	bcc.n	8001532 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153a:	f001 f99d 	bl	8002878 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800153e:	f7fe fe05 	bl	800014c <main>
  bx lr
 8001542:	4770      	bx	lr
  ldr r0, =_sdata
 8001544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001548:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800154c:	08002dc0 	.word	0x08002dc0
  ldr r2, =_sbss
 8001550:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8001554:	2000027c 	.word	0x2000027c

08001558 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001558:	e7fe      	b.n	8001558 <ADC1_2_IRQHandler>
	...

0800155c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001560:	4b08      	ldr	r3, [pc, #32]	; (8001584 <HAL_Init+0x28>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a07      	ldr	r2, [pc, #28]	; (8001584 <HAL_Init+0x28>)
 8001566:	f043 0310 	orr.w	r3, r3, #16
 800156a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800156c:	2003      	movs	r0, #3
 800156e:	f000 f907 	bl	8001780 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001572:	200f      	movs	r0, #15
 8001574:	f000 f808 	bl	8001588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001578:	f7fe fe8a 	bl	8000290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40022000 	.word	0x40022000

08001588 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x54>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x58>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f911 	bl	80017ce <HAL_SYSTICK_Config>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00e      	b.n	80015d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d80a      	bhi.n	80015d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f000 f8e7 	bl	8001796 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c8:	4a06      	ldr	r2, [pc, #24]	; (80015e4 <HAL_InitTick+0x5c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
 80015d0:	e000      	b.n	80015d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	20000018 	.word	0x20000018
 80015e0:	2000004c 	.word	0x2000004c
 80015e4:	20000048 	.word	0x20000048

080015e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_IncTick+0x1c>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	461a      	mov	r2, r3
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x20>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4413      	add	r3, r2
 80015f8:	4a03      	ldr	r2, [pc, #12]	; (8001608 <HAL_IncTick+0x20>)
 80015fa:	6013      	str	r3, [r2, #0]
}
 80015fc:	bf00      	nop
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	2000004c 	.word	0x2000004c
 8001608:	2000012c 	.word	0x2000012c

0800160c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return uwTick;
 8001610:	4b02      	ldr	r3, [pc, #8]	; (800161c <HAL_GetTick+0x10>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	2000012c 	.word	0x2000012c

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	6039      	str	r1, [r7, #0]
 800168e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001690:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001694:	2b00      	cmp	r3, #0
 8001696:	db0a      	blt.n	80016ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2da      	uxtb	r2, r3
 800169c:	490c      	ldr	r1, [pc, #48]	; (80016d0 <__NVIC_SetPriority+0x4c>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	0112      	lsls	r2, r2, #4
 80016a4:	b2d2      	uxtb	r2, r2
 80016a6:	440b      	add	r3, r1
 80016a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016ac:	e00a      	b.n	80016c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4908      	ldr	r1, [pc, #32]	; (80016d4 <__NVIC_SetPriority+0x50>)
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	f003 030f 	and.w	r3, r3, #15
 80016ba:	3b04      	subs	r3, #4
 80016bc:	0112      	lsls	r2, r2, #4
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	440b      	add	r3, r1
 80016c2:	761a      	strb	r2, [r3, #24]
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bc80      	pop	{r7}
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	e000e100 	.word	0xe000e100
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	f1c3 0307 	rsb	r3, r3, #7
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	bf28      	it	cs
 80016f6:	2304      	movcs	r3, #4
 80016f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3304      	adds	r3, #4
 80016fe:	2b06      	cmp	r3, #6
 8001700:	d902      	bls.n	8001708 <NVIC_EncodePriority+0x30>
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	3b03      	subs	r3, #3
 8001706:	e000      	b.n	800170a <NVIC_EncodePriority+0x32>
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	401a      	ands	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001720:	f04f 31ff 	mov.w	r1, #4294967295
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa01 f303 	lsl.w	r3, r1, r3
 800172a:	43d9      	mvns	r1, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	4313      	orrs	r3, r2
         );
}
 8001732:	4618      	mov	r0, r3
 8001734:	3724      	adds	r7, #36	; 0x24
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	3b01      	subs	r3, #1
 8001748:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800174c:	d301      	bcc.n	8001752 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174e:	2301      	movs	r3, #1
 8001750:	e00f      	b.n	8001772 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001752:	4a0a      	ldr	r2, [pc, #40]	; (800177c <SysTick_Config+0x40>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3b01      	subs	r3, #1
 8001758:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800175a:	210f      	movs	r1, #15
 800175c:	f04f 30ff 	mov.w	r0, #4294967295
 8001760:	f7ff ff90 	bl	8001684 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001764:	4b05      	ldr	r3, [pc, #20]	; (800177c <SysTick_Config+0x40>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <SysTick_Config+0x40>)
 800176c:	2207      	movs	r2, #7
 800176e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	e000e010 	.word	0xe000e010

08001780 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ff49 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001796:	b580      	push	{r7, lr}
 8001798:	b086      	sub	sp, #24
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	60b9      	str	r1, [r7, #8]
 80017a0:	607a      	str	r2, [r7, #4]
 80017a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017a4:	2300      	movs	r3, #0
 80017a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a8:	f7ff ff5e 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	68b9      	ldr	r1, [r7, #8]
 80017b2:	6978      	ldr	r0, [r7, #20]
 80017b4:	f7ff ff90 	bl	80016d8 <NVIC_EncodePriority>
 80017b8:	4602      	mov	r2, r0
 80017ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017be:	4611      	mov	r1, r2
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff5f 	bl	8001684 <__NVIC_SetPriority>
}
 80017c6:	bf00      	nop
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f7ff ffb0 	bl	800173c <SysTick_Config>
 80017dc:	4603      	mov	r3, r0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
	...

080017e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b08b      	sub	sp, #44	; 0x2c
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017f6:	2300      	movs	r3, #0
 80017f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fa:	e169      	b.n	8001ad0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017fc:	2201      	movs	r2, #1
 80017fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	4013      	ands	r3, r2
 800180e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	429a      	cmp	r2, r3
 8001816:	f040 8158 	bne.w	8001aca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4a9a      	ldr	r2, [pc, #616]	; (8001a88 <HAL_GPIO_Init+0x2a0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d05e      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
 8001824:	4a98      	ldr	r2, [pc, #608]	; (8001a88 <HAL_GPIO_Init+0x2a0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d875      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 800182a:	4a98      	ldr	r2, [pc, #608]	; (8001a8c <HAL_GPIO_Init+0x2a4>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d058      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
 8001830:	4a96      	ldr	r2, [pc, #600]	; (8001a8c <HAL_GPIO_Init+0x2a4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d86f      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 8001836:	4a96      	ldr	r2, [pc, #600]	; (8001a90 <HAL_GPIO_Init+0x2a8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d052      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
 800183c:	4a94      	ldr	r2, [pc, #592]	; (8001a90 <HAL_GPIO_Init+0x2a8>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d869      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 8001842:	4a94      	ldr	r2, [pc, #592]	; (8001a94 <HAL_GPIO_Init+0x2ac>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d04c      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
 8001848:	4a92      	ldr	r2, [pc, #584]	; (8001a94 <HAL_GPIO_Init+0x2ac>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d863      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 800184e:	4a92      	ldr	r2, [pc, #584]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d046      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
 8001854:	4a90      	ldr	r2, [pc, #576]	; (8001a98 <HAL_GPIO_Init+0x2b0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d85d      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 800185a:	2b12      	cmp	r3, #18
 800185c:	d82a      	bhi.n	80018b4 <HAL_GPIO_Init+0xcc>
 800185e:	2b12      	cmp	r3, #18
 8001860:	d859      	bhi.n	8001916 <HAL_GPIO_Init+0x12e>
 8001862:	a201      	add	r2, pc, #4	; (adr r2, 8001868 <HAL_GPIO_Init+0x80>)
 8001864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001868:	080018e3 	.word	0x080018e3
 800186c:	080018bd 	.word	0x080018bd
 8001870:	080018cf 	.word	0x080018cf
 8001874:	08001911 	.word	0x08001911
 8001878:	08001917 	.word	0x08001917
 800187c:	08001917 	.word	0x08001917
 8001880:	08001917 	.word	0x08001917
 8001884:	08001917 	.word	0x08001917
 8001888:	08001917 	.word	0x08001917
 800188c:	08001917 	.word	0x08001917
 8001890:	08001917 	.word	0x08001917
 8001894:	08001917 	.word	0x08001917
 8001898:	08001917 	.word	0x08001917
 800189c:	08001917 	.word	0x08001917
 80018a0:	08001917 	.word	0x08001917
 80018a4:	08001917 	.word	0x08001917
 80018a8:	08001917 	.word	0x08001917
 80018ac:	080018c5 	.word	0x080018c5
 80018b0:	080018d9 	.word	0x080018d9
 80018b4:	4a79      	ldr	r2, [pc, #484]	; (8001a9c <HAL_GPIO_Init+0x2b4>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d013      	beq.n	80018e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ba:	e02c      	b.n	8001916 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	623b      	str	r3, [r7, #32]
          break;
 80018c2:	e029      	b.n	8001918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	3304      	adds	r3, #4
 80018ca:	623b      	str	r3, [r7, #32]
          break;
 80018cc:	e024      	b.n	8001918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	3308      	adds	r3, #8
 80018d4:	623b      	str	r3, [r7, #32]
          break;
 80018d6:	e01f      	b.n	8001918 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	330c      	adds	r3, #12
 80018de:	623b      	str	r3, [r7, #32]
          break;
 80018e0:	e01a      	b.n	8001918 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d102      	bne.n	80018f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018ea:	2304      	movs	r3, #4
 80018ec:	623b      	str	r3, [r7, #32]
          break;
 80018ee:	e013      	b.n	8001918 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d105      	bne.n	8001904 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018f8:	2308      	movs	r3, #8
 80018fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	69fa      	ldr	r2, [r7, #28]
 8001900:	611a      	str	r2, [r3, #16]
          break;
 8001902:	e009      	b.n	8001918 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001904:	2308      	movs	r3, #8
 8001906:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	615a      	str	r2, [r3, #20]
          break;
 800190e:	e003      	b.n	8001918 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
          break;
 8001914:	e000      	b.n	8001918 <HAL_GPIO_Init+0x130>
          break;
 8001916:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2bff      	cmp	r3, #255	; 0xff
 800191c:	d801      	bhi.n	8001922 <HAL_GPIO_Init+0x13a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	e001      	b.n	8001926 <HAL_GPIO_Init+0x13e>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3304      	adds	r3, #4
 8001926:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2bff      	cmp	r3, #255	; 0xff
 800192c:	d802      	bhi.n	8001934 <HAL_GPIO_Init+0x14c>
 800192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	e002      	b.n	800193a <HAL_GPIO_Init+0x152>
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	3b08      	subs	r3, #8
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	210f      	movs	r1, #15
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	401a      	ands	r2, r3
 800194c:	6a39      	ldr	r1, [r7, #32]
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	431a      	orrs	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 80b1 	beq.w	8001aca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001968:	4b4d      	ldr	r3, [pc, #308]	; (8001aa0 <HAL_GPIO_Init+0x2b8>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a4c      	ldr	r2, [pc, #304]	; (8001aa0 <HAL_GPIO_Init+0x2b8>)
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b4a      	ldr	r3, [pc, #296]	; (8001aa0 <HAL_GPIO_Init+0x2b8>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001980:	4a48      	ldr	r2, [pc, #288]	; (8001aa4 <HAL_GPIO_Init+0x2bc>)
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800198c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	68fa      	ldr	r2, [r7, #12]
 80019a0:	4013      	ands	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a40      	ldr	r2, [pc, #256]	; (8001aa8 <HAL_GPIO_Init+0x2c0>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d013      	beq.n	80019d4 <HAL_GPIO_Init+0x1ec>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4a3f      	ldr	r2, [pc, #252]	; (8001aac <HAL_GPIO_Init+0x2c4>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d00d      	beq.n	80019d0 <HAL_GPIO_Init+0x1e8>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a3e      	ldr	r2, [pc, #248]	; (8001ab0 <HAL_GPIO_Init+0x2c8>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d007      	beq.n	80019cc <HAL_GPIO_Init+0x1e4>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a3d      	ldr	r2, [pc, #244]	; (8001ab4 <HAL_GPIO_Init+0x2cc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d101      	bne.n	80019c8 <HAL_GPIO_Init+0x1e0>
 80019c4:	2303      	movs	r3, #3
 80019c6:	e006      	b.n	80019d6 <HAL_GPIO_Init+0x1ee>
 80019c8:	2304      	movs	r3, #4
 80019ca:	e004      	b.n	80019d6 <HAL_GPIO_Init+0x1ee>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e002      	b.n	80019d6 <HAL_GPIO_Init+0x1ee>
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <HAL_GPIO_Init+0x1ee>
 80019d4:	2300      	movs	r3, #0
 80019d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d8:	f002 0203 	and.w	r2, r2, #3
 80019dc:	0092      	lsls	r2, r2, #2
 80019de:	4093      	lsls	r3, r2
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019e6:	492f      	ldr	r1, [pc, #188]	; (8001aa4 <HAL_GPIO_Init+0x2bc>)
 80019e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ea:	089b      	lsrs	r3, r3, #2
 80019ec:	3302      	adds	r3, #2
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d006      	beq.n	8001a0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a00:	4b2d      	ldr	r3, [pc, #180]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	492c      	ldr	r1, [pc, #176]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	608b      	str	r3, [r1, #8]
 8001a0c:	e006      	b.n	8001a1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a10:	689a      	ldr	r2, [r3, #8]
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	4928      	ldr	r1, [pc, #160]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d006      	beq.n	8001a36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a28:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	4922      	ldr	r1, [pc, #136]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	60cb      	str	r3, [r1, #12]
 8001a34:	e006      	b.n	8001a44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a38:	68da      	ldr	r2, [r3, #12]
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	491e      	ldr	r1, [pc, #120]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a40:	4013      	ands	r3, r2
 8001a42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d006      	beq.n	8001a5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	4918      	ldr	r1, [pc, #96]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
 8001a5c:	e006      	b.n	8001a6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	43db      	mvns	r3, r3
 8001a66:	4914      	ldr	r1, [pc, #80]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a68:	4013      	ands	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d021      	beq.n	8001abc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	490e      	ldr	r1, [pc, #56]	; (8001ab8 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	600b      	str	r3, [r1, #0]
 8001a84:	e021      	b.n	8001aca <HAL_GPIO_Init+0x2e2>
 8001a86:	bf00      	nop
 8001a88:	10320000 	.word	0x10320000
 8001a8c:	10310000 	.word	0x10310000
 8001a90:	10220000 	.word	0x10220000
 8001a94:	10210000 	.word	0x10210000
 8001a98:	10120000 	.word	0x10120000
 8001a9c:	10110000 	.word	0x10110000
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	40010800 	.word	0x40010800
 8001aac:	40010c00 	.word	0x40010c00
 8001ab0:	40011000 	.word	0x40011000
 8001ab4:	40011400 	.word	0x40011400
 8001ab8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_GPIO_Init+0x304>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	4909      	ldr	r1, [pc, #36]	; (8001aec <HAL_GPIO_Init+0x304>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	3301      	adds	r3, #1
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f47f ae8e 	bne.w	80017fc <HAL_GPIO_Init+0x14>
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	372c      	adds	r7, #44	; 0x2c
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	40010400 	.word	0x40010400

08001af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
 8001afc:	4613      	mov	r3, r2
 8001afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b00:	787b      	ldrb	r3, [r7, #1]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b06:	887a      	ldrh	r2, [r7, #2]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b0c:	e003      	b.n	8001b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b0e:	887b      	ldrh	r3, [r7, #2]
 8001b10:	041a      	lsls	r2, r3, #16
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	611a      	str	r2, [r3, #16]
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr

08001b20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e272      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 8087 	beq.w	8001c4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b40:	4b92      	ldr	r3, [pc, #584]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f003 030c 	and.w	r3, r3, #12
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	d00c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b4c:	4b8f      	ldr	r3, [pc, #572]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 030c 	and.w	r3, r3, #12
 8001b54:	2b08      	cmp	r3, #8
 8001b56:	d112      	bne.n	8001b7e <HAL_RCC_OscConfig+0x5e>
 8001b58:	4b8c      	ldr	r3, [pc, #560]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b64:	d10b      	bne.n	8001b7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b66:	4b89      	ldr	r3, [pc, #548]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d06c      	beq.n	8001c4c <HAL_RCC_OscConfig+0x12c>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d168      	bne.n	8001c4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e24c      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b86:	d106      	bne.n	8001b96 <HAL_RCC_OscConfig+0x76>
 8001b88:	4b80      	ldr	r3, [pc, #512]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a7f      	ldr	r2, [pc, #508]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	e02e      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd4>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x98>
 8001b9e:	4b7b      	ldr	r3, [pc, #492]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a7a      	ldr	r2, [pc, #488]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b78      	ldr	r3, [pc, #480]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a77      	ldr	r2, [pc, #476]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e01d      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd4>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0xbc>
 8001bc2:	4b72      	ldr	r3, [pc, #456]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a71      	ldr	r2, [pc, #452]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a6e      	ldr	r2, [pc, #440]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0xd4>
 8001bdc:	4b6b      	ldr	r3, [pc, #428]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a6a      	ldr	r2, [pc, #424]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b68      	ldr	r3, [pc, #416]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a67      	ldr	r2, [pc, #412]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bf2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d013      	beq.n	8001c24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bfc:	f7ff fd06 	bl	800160c <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c04:	f7ff fd02 	bl	800160c <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b64      	cmp	r3, #100	; 0x64
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e200      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c16:	4b5d      	ldr	r3, [pc, #372]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0xe4>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c24:	f7ff fcf2 	bl	800160c <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c2a:	e008      	b.n	8001c3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c2c:	f7ff fcee 	bl	800160c <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	2b64      	cmp	r3, #100	; 0x64
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e1ec      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c3e:	4b53      	ldr	r3, [pc, #332]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1f0      	bne.n	8001c2c <HAL_RCC_OscConfig+0x10c>
 8001c4a:	e000      	b.n	8001c4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d063      	beq.n	8001d22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c5a:	4b4c      	ldr	r3, [pc, #304]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00b      	beq.n	8001c7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c66:	4b49      	ldr	r3, [pc, #292]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 030c 	and.w	r3, r3, #12
 8001c6e:	2b08      	cmp	r3, #8
 8001c70:	d11c      	bne.n	8001cac <HAL_RCC_OscConfig+0x18c>
 8001c72:	4b46      	ldr	r3, [pc, #280]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d116      	bne.n	8001cac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c7e:	4b43      	ldr	r3, [pc, #268]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d005      	beq.n	8001c96 <HAL_RCC_OscConfig+0x176>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d001      	beq.n	8001c96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e1c0      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c96:	4b3d      	ldr	r3, [pc, #244]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	4939      	ldr	r1, [pc, #228]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001caa:	e03a      	b.n	8001d22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d020      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb4:	4b36      	ldr	r3, [pc, #216]	; (8001d90 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cba:	f7ff fca7 	bl	800160c <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fca3 	bl	800160c <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e1a1      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d0f0      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	695b      	ldr	r3, [r3, #20]
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	4927      	ldr	r1, [pc, #156]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	e015      	b.n	8001d22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fc86 	bl	800160c <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d04:	f7ff fc82 	bl	800160c <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e180      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0308 	and.w	r3, r3, #8
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d03a      	beq.n	8001da4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d019      	beq.n	8001d6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001d38:	2201      	movs	r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d3c:	f7ff fc66 	bl	800160c <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff fc62 	bl	800160c <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e160      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_RCC_OscConfig+0x26c>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d62:	2001      	movs	r0, #1
 8001d64:	f000 fa9c 	bl	80022a0 <RCC_Delay>
 8001d68:	e01c      	b.n	8001da4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_RCC_OscConfig+0x274>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d70:	f7ff fc4c 	bl	800160c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d76:	e00f      	b.n	8001d98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff fc48 	bl	800160c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d908      	bls.n	8001d98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e146      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	42420000 	.word	0x42420000
 8001d94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d98:	4b92      	ldr	r3, [pc, #584]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e9      	bne.n	8001d78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80a6 	beq.w	8001efe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db2:	2300      	movs	r3, #0
 8001db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001db6:	4b8b      	ldr	r3, [pc, #556]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10d      	bne.n	8001dde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc2:	4b88      	ldr	r3, [pc, #544]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a87      	ldr	r2, [pc, #540]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	61d3      	str	r3, [r2, #28]
 8001dce:	4b85      	ldr	r3, [pc, #532]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dde:	4b82      	ldr	r3, [pc, #520]	; (8001fe8 <HAL_RCC_OscConfig+0x4c8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d118      	bne.n	8001e1c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dea:	4b7f      	ldr	r3, [pc, #508]	; (8001fe8 <HAL_RCC_OscConfig+0x4c8>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a7e      	ldr	r2, [pc, #504]	; (8001fe8 <HAL_RCC_OscConfig+0x4c8>)
 8001df0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001df6:	f7ff fc09 	bl	800160c <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfe:	f7ff fc05 	bl	800160c <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b64      	cmp	r3, #100	; 0x64
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e103      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e10:	4b75      	ldr	r3, [pc, #468]	; (8001fe8 <HAL_RCC_OscConfig+0x4c8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d0f0      	beq.n	8001dfe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x312>
 8001e24:	4b6f      	ldr	r3, [pc, #444]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	6a1b      	ldr	r3, [r3, #32]
 8001e28:	4a6e      	ldr	r2, [pc, #440]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6213      	str	r3, [r2, #32]
 8001e30:	e02d      	b.n	8001e8e <HAL_RCC_OscConfig+0x36e>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x334>
 8001e3a:	4b6a      	ldr	r3, [pc, #424]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4a69      	ldr	r2, [pc, #420]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	6213      	str	r3, [r2, #32]
 8001e46:	4b67      	ldr	r3, [pc, #412]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	6a1b      	ldr	r3, [r3, #32]
 8001e4a:	4a66      	ldr	r2, [pc, #408]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	f023 0304 	bic.w	r3, r3, #4
 8001e50:	6213      	str	r3, [r2, #32]
 8001e52:	e01c      	b.n	8001e8e <HAL_RCC_OscConfig+0x36e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	2b05      	cmp	r3, #5
 8001e5a:	d10c      	bne.n	8001e76 <HAL_RCC_OscConfig+0x356>
 8001e5c:	4b61      	ldr	r3, [pc, #388]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	4a60      	ldr	r2, [pc, #384]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	f043 0304 	orr.w	r3, r3, #4
 8001e66:	6213      	str	r3, [r2, #32]
 8001e68:	4b5e      	ldr	r3, [pc, #376]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	4a5d      	ldr	r2, [pc, #372]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6213      	str	r3, [r2, #32]
 8001e74:	e00b      	b.n	8001e8e <HAL_RCC_OscConfig+0x36e>
 8001e76:	4b5b      	ldr	r3, [pc, #364]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4a5a      	ldr	r2, [pc, #360]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	f023 0301 	bic.w	r3, r3, #1
 8001e80:	6213      	str	r3, [r2, #32]
 8001e82:	4b58      	ldr	r3, [pc, #352]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	4a57      	ldr	r2, [pc, #348]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	f023 0304 	bic.w	r3, r3, #4
 8001e8c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d015      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e96:	f7ff fbb9 	bl	800160c <HAL_GetTick>
 8001e9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9c:	e00a      	b.n	8001eb4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e9e:	f7ff fbb5 	bl	800160c <HAL_GetTick>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e0b1      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eb4:	4b4b      	ldr	r3, [pc, #300]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0ee      	beq.n	8001e9e <HAL_RCC_OscConfig+0x37e>
 8001ec0:	e014      	b.n	8001eec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec2:	f7ff fba3 	bl	800160c <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec8:	e00a      	b.n	8001ee0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eca:	f7ff fb9f 	bl	800160c <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e09b      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee0:	4b40      	ldr	r3, [pc, #256]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1ee      	bne.n	8001eca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001eec:	7dfb      	ldrb	r3, [r7, #23]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d105      	bne.n	8001efe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ef2:	4b3c      	ldr	r3, [pc, #240]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	69db      	ldr	r3, [r3, #28]
 8001ef6:	4a3b      	ldr	r2, [pc, #236]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001efc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	69db      	ldr	r3, [r3, #28]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 8087 	beq.w	8002016 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f08:	4b36      	ldr	r3, [pc, #216]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 030c 	and.w	r3, r3, #12
 8001f10:	2b08      	cmp	r3, #8
 8001f12:	d061      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d146      	bne.n	8001faa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1c:	4b33      	ldr	r3, [pc, #204]	; (8001fec <HAL_RCC_OscConfig+0x4cc>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f22:	f7ff fb73 	bl	800160c <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7ff fb6f 	bl	800160c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e06d      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f3c:	4b29      	ldr	r3, [pc, #164]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f0      	bne.n	8001f2a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f50:	d108      	bne.n	8001f64 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f52:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	4921      	ldr	r1, [pc, #132]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a19      	ldr	r1, [r3, #32]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f74:	430b      	orrs	r3, r1
 8001f76:	491b      	ldr	r1, [pc, #108]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b1b      	ldr	r3, [pc, #108]	; (8001fec <HAL_RCC_OscConfig+0x4cc>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f82:	f7ff fb43 	bl	800160c <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8a:	f7ff fb3f 	bl	800160c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e03d      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x46a>
 8001fa8:	e035      	b.n	8002016 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001faa:	4b10      	ldr	r3, [pc, #64]	; (8001fec <HAL_RCC_OscConfig+0x4cc>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fb2c 	bl	800160c <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb8:	f7ff fb28 	bl	800160c <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e026      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fca:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <HAL_RCC_OscConfig+0x4c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d1f0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x498>
 8001fd6:	e01e      	b.n	8002016 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d107      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e019      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCC_OscConfig+0x500>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	429a      	cmp	r2, r3
 8002002:	d106      	bne.n	8002012 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200e:	429a      	cmp	r2, r3
 8002010:	d001      	beq.n	8002016 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e000      	b.n	8002018 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000

08002024 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0d0      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002038:	4b6a      	ldr	r3, [pc, #424]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d910      	bls.n	8002068 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002046:	4b67      	ldr	r3, [pc, #412]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f023 0207 	bic.w	r2, r3, #7
 800204e:	4965      	ldr	r1, [pc, #404]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	4313      	orrs	r3, r2
 8002054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002056:	4b63      	ldr	r3, [pc, #396]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d001      	beq.n	8002068 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0b8      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d020      	beq.n	80020b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d005      	beq.n	800208c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002080:	4b59      	ldr	r3, [pc, #356]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	4a58      	ldr	r2, [pc, #352]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800208a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d005      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002098:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	4a52      	ldr	r2, [pc, #328]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800209e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020a4:	4b50      	ldr	r3, [pc, #320]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	494d      	ldr	r1, [pc, #308]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d040      	beq.n	8002144 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d107      	bne.n	80020da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d115      	bne.n	8002102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e07f      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d107      	bne.n	80020f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e2:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d109      	bne.n	8002102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e073      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f2:	4b3d      	ldr	r3, [pc, #244]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0302 	and.w	r3, r3, #2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d101      	bne.n	8002102 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e06b      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002102:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f023 0203 	bic.w	r2, r3, #3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4936      	ldr	r1, [pc, #216]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	4313      	orrs	r3, r2
 8002112:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002114:	f7ff fa7a 	bl	800160c <HAL_GetTick>
 8002118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211a:	e00a      	b.n	8002132 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800211c:	f7ff fa76 	bl	800160c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	f241 3288 	movw	r2, #5000	; 0x1388
 800212a:	4293      	cmp	r3, r2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e053      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002132:	4b2d      	ldr	r3, [pc, #180]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 020c 	and.w	r2, r3, #12
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	429a      	cmp	r2, r3
 8002142:	d1eb      	bne.n	800211c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002144:	4b27      	ldr	r3, [pc, #156]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0307 	and.w	r3, r3, #7
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d210      	bcs.n	8002174 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f023 0207 	bic.w	r2, r3, #7
 800215a:	4922      	ldr	r1, [pc, #136]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	4313      	orrs	r3, r2
 8002160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_RCC_ClockConfig+0x1c0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0307 	and.w	r3, r3, #7
 800216a:	683a      	ldr	r2, [r7, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d001      	beq.n	8002174 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e032      	b.n	80021da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0304 	and.w	r3, r3, #4
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4916      	ldr	r1, [pc, #88]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	4313      	orrs	r3, r2
 8002190:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0308 	and.w	r3, r3, #8
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800219e:	4b12      	ldr	r3, [pc, #72]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	691b      	ldr	r3, [r3, #16]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	490e      	ldr	r1, [pc, #56]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021b2:	f000 f821 	bl	80021f8 <HAL_RCC_GetSysClockFreq>
 80021b6:	4602      	mov	r2, r0
 80021b8:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <HAL_RCC_ClockConfig+0x1c4>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	091b      	lsrs	r3, r3, #4
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	490a      	ldr	r1, [pc, #40]	; (80021ec <HAL_RCC_ClockConfig+0x1c8>)
 80021c4:	5ccb      	ldrb	r3, [r1, r3]
 80021c6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ca:	4a09      	ldr	r2, [pc, #36]	; (80021f0 <HAL_RCC_ClockConfig+0x1cc>)
 80021cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021ce:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <HAL_RCC_ClockConfig+0x1d0>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff f9d8 	bl	8001588 <HAL_InitTick>

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40022000 	.word	0x40022000
 80021e8:	40021000 	.word	0x40021000
 80021ec:	08002d94 	.word	0x08002d94
 80021f0:	20000018 	.word	0x20000018
 80021f4:	20000048 	.word	0x20000048

080021f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b087      	sub	sp, #28
 80021fc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002212:	4b1e      	ldr	r3, [pc, #120]	; (800228c <HAL_RCC_GetSysClockFreq+0x94>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b04      	cmp	r3, #4
 8002220:	d002      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0x30>
 8002222:	2b08      	cmp	r3, #8
 8002224:	d003      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0x36>
 8002226:	e027      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002228:	4b19      	ldr	r3, [pc, #100]	; (8002290 <HAL_RCC_GetSysClockFreq+0x98>)
 800222a:	613b      	str	r3, [r7, #16]
      break;
 800222c:	e027      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	0c9b      	lsrs	r3, r3, #18
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	4a17      	ldr	r2, [pc, #92]	; (8002294 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002238:	5cd3      	ldrb	r3, [r2, r3]
 800223a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d010      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <HAL_RCC_GetSysClockFreq+0x94>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	0c5b      	lsrs	r3, r3, #17
 800224c:	f003 0301 	and.w	r3, r3, #1
 8002250:	4a11      	ldr	r2, [pc, #68]	; (8002298 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a0d      	ldr	r2, [pc, #52]	; (8002290 <HAL_RCC_GetSysClockFreq+0x98>)
 800225a:	fb03 f202 	mul.w	r2, r3, r2
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	fbb2 f3f3 	udiv	r3, r2, r3
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	e004      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a0c      	ldr	r2, [pc, #48]	; (800229c <HAL_RCC_GetSysClockFreq+0xa4>)
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	613b      	str	r3, [r7, #16]
      break;
 8002276:	e002      	b.n	800227e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetSysClockFreq+0x98>)
 800227a:	613b      	str	r3, [r7, #16]
      break;
 800227c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227e:	693b      	ldr	r3, [r7, #16]
}
 8002280:	4618      	mov	r0, r3
 8002282:	371c      	adds	r7, #28
 8002284:	46bd      	mov	sp, r7
 8002286:	bc80      	pop	{r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40021000 	.word	0x40021000
 8002290:	007a1200 	.word	0x007a1200
 8002294:	08002da4 	.word	0x08002da4
 8002298:	08002db4 	.word	0x08002db4
 800229c:	003d0900 	.word	0x003d0900

080022a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <RCC_Delay+0x34>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <RCC_Delay+0x38>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	0a5b      	lsrs	r3, r3, #9
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	fb02 f303 	mul.w	r3, r2, r3
 80022ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022bc:	bf00      	nop
  }
  while (Delay --);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	1e5a      	subs	r2, r3, #1
 80022c2:	60fa      	str	r2, [r7, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f9      	bne.n	80022bc <RCC_Delay+0x1c>
}
 80022c8:	bf00      	nop
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	20000018 	.word	0x20000018
 80022d8:	10624dd3 	.word	0x10624dd3

080022dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e076      	b.n	80023dc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d108      	bne.n	8002308 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80022fe:	d009      	beq.n	8002314 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	61da      	str	r2, [r3, #28]
 8002306:	e005      	b.n	8002314 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d106      	bne.n	8002334 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7fd ffd0 	bl	80002d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800234a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800235c:	431a      	orrs	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691b      	ldr	r3, [r3, #16]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	431a      	orrs	r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002398:	ea42 0103 	orr.w	r1, r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	430a      	orrs	r2, r1
 80023aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	0c1a      	lsrs	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f002 0204 	and.w	r2, r2, #4
 80023ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	69da      	ldr	r2, [r3, #28]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3708      	adds	r7, #8
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <std>:
 80023e4:	2300      	movs	r3, #0
 80023e6:	b510      	push	{r4, lr}
 80023e8:	4604      	mov	r4, r0
 80023ea:	e9c0 3300 	strd	r3, r3, [r0]
 80023ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023f2:	6083      	str	r3, [r0, #8]
 80023f4:	8181      	strh	r1, [r0, #12]
 80023f6:	6643      	str	r3, [r0, #100]	; 0x64
 80023f8:	81c2      	strh	r2, [r0, #14]
 80023fa:	6183      	str	r3, [r0, #24]
 80023fc:	4619      	mov	r1, r3
 80023fe:	2208      	movs	r2, #8
 8002400:	305c      	adds	r0, #92	; 0x5c
 8002402:	f000 f9e5 	bl	80027d0 <memset>
 8002406:	4b0d      	ldr	r3, [pc, #52]	; (800243c <std+0x58>)
 8002408:	6224      	str	r4, [r4, #32]
 800240a:	6263      	str	r3, [r4, #36]	; 0x24
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <std+0x5c>)
 800240e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <std+0x60>)
 8002412:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002414:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <std+0x64>)
 8002416:	6323      	str	r3, [r4, #48]	; 0x30
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <std+0x68>)
 800241a:	429c      	cmp	r4, r3
 800241c:	d006      	beq.n	800242c <std+0x48>
 800241e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002422:	4294      	cmp	r4, r2
 8002424:	d002      	beq.n	800242c <std+0x48>
 8002426:	33d0      	adds	r3, #208	; 0xd0
 8002428:	429c      	cmp	r4, r3
 800242a:	d105      	bne.n	8002438 <std+0x54>
 800242c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002434:	f000 ba44 	b.w	80028c0 <__retarget_lock_init_recursive>
 8002438:	bd10      	pop	{r4, pc}
 800243a:	bf00      	nop
 800243c:	08002621 	.word	0x08002621
 8002440:	08002643 	.word	0x08002643
 8002444:	0800267b 	.word	0x0800267b
 8002448:	0800269f 	.word	0x0800269f
 800244c:	20000130 	.word	0x20000130

08002450 <stdio_exit_handler>:
 8002450:	4a02      	ldr	r2, [pc, #8]	; (800245c <stdio_exit_handler+0xc>)
 8002452:	4903      	ldr	r1, [pc, #12]	; (8002460 <stdio_exit_handler+0x10>)
 8002454:	4803      	ldr	r0, [pc, #12]	; (8002464 <stdio_exit_handler+0x14>)
 8002456:	f000 b869 	b.w	800252c <_fwalk_sglue>
 800245a:	bf00      	nop
 800245c:	20000050 	.word	0x20000050
 8002460:	08002bb5 	.word	0x08002bb5
 8002464:	2000005c 	.word	0x2000005c

08002468 <cleanup_stdio>:
 8002468:	6841      	ldr	r1, [r0, #4]
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <cleanup_stdio+0x34>)
 800246c:	b510      	push	{r4, lr}
 800246e:	4299      	cmp	r1, r3
 8002470:	4604      	mov	r4, r0
 8002472:	d001      	beq.n	8002478 <cleanup_stdio+0x10>
 8002474:	f000 fb9e 	bl	8002bb4 <_fflush_r>
 8002478:	68a1      	ldr	r1, [r4, #8]
 800247a:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <cleanup_stdio+0x38>)
 800247c:	4299      	cmp	r1, r3
 800247e:	d002      	beq.n	8002486 <cleanup_stdio+0x1e>
 8002480:	4620      	mov	r0, r4
 8002482:	f000 fb97 	bl	8002bb4 <_fflush_r>
 8002486:	68e1      	ldr	r1, [r4, #12]
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <cleanup_stdio+0x3c>)
 800248a:	4299      	cmp	r1, r3
 800248c:	d004      	beq.n	8002498 <cleanup_stdio+0x30>
 800248e:	4620      	mov	r0, r4
 8002490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002494:	f000 bb8e 	b.w	8002bb4 <_fflush_r>
 8002498:	bd10      	pop	{r4, pc}
 800249a:	bf00      	nop
 800249c:	20000130 	.word	0x20000130
 80024a0:	20000198 	.word	0x20000198
 80024a4:	20000200 	.word	0x20000200

080024a8 <global_stdio_init.part.0>:
 80024a8:	b510      	push	{r4, lr}
 80024aa:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <global_stdio_init.part.0+0x30>)
 80024ac:	4c0b      	ldr	r4, [pc, #44]	; (80024dc <global_stdio_init.part.0+0x34>)
 80024ae:	4a0c      	ldr	r2, [pc, #48]	; (80024e0 <global_stdio_init.part.0+0x38>)
 80024b0:	4620      	mov	r0, r4
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	2104      	movs	r1, #4
 80024b6:	2200      	movs	r2, #0
 80024b8:	f7ff ff94 	bl	80023e4 <std>
 80024bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80024c0:	2201      	movs	r2, #1
 80024c2:	2109      	movs	r1, #9
 80024c4:	f7ff ff8e 	bl	80023e4 <std>
 80024c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80024cc:	2202      	movs	r2, #2
 80024ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024d2:	2112      	movs	r1, #18
 80024d4:	f7ff bf86 	b.w	80023e4 <std>
 80024d8:	20000268 	.word	0x20000268
 80024dc:	20000130 	.word	0x20000130
 80024e0:	08002451 	.word	0x08002451

080024e4 <__sfp_lock_acquire>:
 80024e4:	4801      	ldr	r0, [pc, #4]	; (80024ec <__sfp_lock_acquire+0x8>)
 80024e6:	f000 b9ec 	b.w	80028c2 <__retarget_lock_acquire_recursive>
 80024ea:	bf00      	nop
 80024ec:	20000271 	.word	0x20000271

080024f0 <__sfp_lock_release>:
 80024f0:	4801      	ldr	r0, [pc, #4]	; (80024f8 <__sfp_lock_release+0x8>)
 80024f2:	f000 b9e7 	b.w	80028c4 <__retarget_lock_release_recursive>
 80024f6:	bf00      	nop
 80024f8:	20000271 	.word	0x20000271

080024fc <__sinit>:
 80024fc:	b510      	push	{r4, lr}
 80024fe:	4604      	mov	r4, r0
 8002500:	f7ff fff0 	bl	80024e4 <__sfp_lock_acquire>
 8002504:	6a23      	ldr	r3, [r4, #32]
 8002506:	b11b      	cbz	r3, 8002510 <__sinit+0x14>
 8002508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800250c:	f7ff bff0 	b.w	80024f0 <__sfp_lock_release>
 8002510:	4b04      	ldr	r3, [pc, #16]	; (8002524 <__sinit+0x28>)
 8002512:	6223      	str	r3, [r4, #32]
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <__sinit+0x2c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1f5      	bne.n	8002508 <__sinit+0xc>
 800251c:	f7ff ffc4 	bl	80024a8 <global_stdio_init.part.0>
 8002520:	e7f2      	b.n	8002508 <__sinit+0xc>
 8002522:	bf00      	nop
 8002524:	08002469 	.word	0x08002469
 8002528:	20000268 	.word	0x20000268

0800252c <_fwalk_sglue>:
 800252c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002530:	4607      	mov	r7, r0
 8002532:	4688      	mov	r8, r1
 8002534:	4614      	mov	r4, r2
 8002536:	2600      	movs	r6, #0
 8002538:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800253c:	f1b9 0901 	subs.w	r9, r9, #1
 8002540:	d505      	bpl.n	800254e <_fwalk_sglue+0x22>
 8002542:	6824      	ldr	r4, [r4, #0]
 8002544:	2c00      	cmp	r4, #0
 8002546:	d1f7      	bne.n	8002538 <_fwalk_sglue+0xc>
 8002548:	4630      	mov	r0, r6
 800254a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800254e:	89ab      	ldrh	r3, [r5, #12]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d907      	bls.n	8002564 <_fwalk_sglue+0x38>
 8002554:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002558:	3301      	adds	r3, #1
 800255a:	d003      	beq.n	8002564 <_fwalk_sglue+0x38>
 800255c:	4629      	mov	r1, r5
 800255e:	4638      	mov	r0, r7
 8002560:	47c0      	blx	r8
 8002562:	4306      	orrs	r6, r0
 8002564:	3568      	adds	r5, #104	; 0x68
 8002566:	e7e9      	b.n	800253c <_fwalk_sglue+0x10>

08002568 <_puts_r>:
 8002568:	6a03      	ldr	r3, [r0, #32]
 800256a:	b570      	push	{r4, r5, r6, lr}
 800256c:	4605      	mov	r5, r0
 800256e:	460e      	mov	r6, r1
 8002570:	6884      	ldr	r4, [r0, #8]
 8002572:	b90b      	cbnz	r3, 8002578 <_puts_r+0x10>
 8002574:	f7ff ffc2 	bl	80024fc <__sinit>
 8002578:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800257a:	07db      	lsls	r3, r3, #31
 800257c:	d405      	bmi.n	800258a <_puts_r+0x22>
 800257e:	89a3      	ldrh	r3, [r4, #12]
 8002580:	0598      	lsls	r0, r3, #22
 8002582:	d402      	bmi.n	800258a <_puts_r+0x22>
 8002584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002586:	f000 f99c 	bl	80028c2 <__retarget_lock_acquire_recursive>
 800258a:	89a3      	ldrh	r3, [r4, #12]
 800258c:	0719      	lsls	r1, r3, #28
 800258e:	d513      	bpl.n	80025b8 <_puts_r+0x50>
 8002590:	6923      	ldr	r3, [r4, #16]
 8002592:	b18b      	cbz	r3, 80025b8 <_puts_r+0x50>
 8002594:	3e01      	subs	r6, #1
 8002596:	68a3      	ldr	r3, [r4, #8]
 8002598:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800259c:	3b01      	subs	r3, #1
 800259e:	60a3      	str	r3, [r4, #8]
 80025a0:	b9e9      	cbnz	r1, 80025de <_puts_r+0x76>
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	da2e      	bge.n	8002604 <_puts_r+0x9c>
 80025a6:	4622      	mov	r2, r4
 80025a8:	210a      	movs	r1, #10
 80025aa:	4628      	mov	r0, r5
 80025ac:	f000 f87b 	bl	80026a6 <__swbuf_r>
 80025b0:	3001      	adds	r0, #1
 80025b2:	d007      	beq.n	80025c4 <_puts_r+0x5c>
 80025b4:	250a      	movs	r5, #10
 80025b6:	e007      	b.n	80025c8 <_puts_r+0x60>
 80025b8:	4621      	mov	r1, r4
 80025ba:	4628      	mov	r0, r5
 80025bc:	f000 f8b0 	bl	8002720 <__swsetup_r>
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d0e7      	beq.n	8002594 <_puts_r+0x2c>
 80025c4:	f04f 35ff 	mov.w	r5, #4294967295
 80025c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80025ca:	07da      	lsls	r2, r3, #31
 80025cc:	d405      	bmi.n	80025da <_puts_r+0x72>
 80025ce:	89a3      	ldrh	r3, [r4, #12]
 80025d0:	059b      	lsls	r3, r3, #22
 80025d2:	d402      	bmi.n	80025da <_puts_r+0x72>
 80025d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80025d6:	f000 f975 	bl	80028c4 <__retarget_lock_release_recursive>
 80025da:	4628      	mov	r0, r5
 80025dc:	bd70      	pop	{r4, r5, r6, pc}
 80025de:	2b00      	cmp	r3, #0
 80025e0:	da04      	bge.n	80025ec <_puts_r+0x84>
 80025e2:	69a2      	ldr	r2, [r4, #24]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	dc06      	bgt.n	80025f6 <_puts_r+0x8e>
 80025e8:	290a      	cmp	r1, #10
 80025ea:	d004      	beq.n	80025f6 <_puts_r+0x8e>
 80025ec:	6823      	ldr	r3, [r4, #0]
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	6022      	str	r2, [r4, #0]
 80025f2:	7019      	strb	r1, [r3, #0]
 80025f4:	e7cf      	b.n	8002596 <_puts_r+0x2e>
 80025f6:	4622      	mov	r2, r4
 80025f8:	4628      	mov	r0, r5
 80025fa:	f000 f854 	bl	80026a6 <__swbuf_r>
 80025fe:	3001      	adds	r0, #1
 8002600:	d1c9      	bne.n	8002596 <_puts_r+0x2e>
 8002602:	e7df      	b.n	80025c4 <_puts_r+0x5c>
 8002604:	250a      	movs	r5, #10
 8002606:	6823      	ldr	r3, [r4, #0]
 8002608:	1c5a      	adds	r2, r3, #1
 800260a:	6022      	str	r2, [r4, #0]
 800260c:	701d      	strb	r5, [r3, #0]
 800260e:	e7db      	b.n	80025c8 <_puts_r+0x60>

08002610 <puts>:
 8002610:	4b02      	ldr	r3, [pc, #8]	; (800261c <puts+0xc>)
 8002612:	4601      	mov	r1, r0
 8002614:	6818      	ldr	r0, [r3, #0]
 8002616:	f7ff bfa7 	b.w	8002568 <_puts_r>
 800261a:	bf00      	nop
 800261c:	200000a8 	.word	0x200000a8

08002620 <__sread>:
 8002620:	b510      	push	{r4, lr}
 8002622:	460c      	mov	r4, r1
 8002624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002628:	f000 f8fc 	bl	8002824 <_read_r>
 800262c:	2800      	cmp	r0, #0
 800262e:	bfab      	itete	ge
 8002630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002632:	89a3      	ldrhlt	r3, [r4, #12]
 8002634:	181b      	addge	r3, r3, r0
 8002636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800263a:	bfac      	ite	ge
 800263c:	6563      	strge	r3, [r4, #84]	; 0x54
 800263e:	81a3      	strhlt	r3, [r4, #12]
 8002640:	bd10      	pop	{r4, pc}

08002642 <__swrite>:
 8002642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002646:	461f      	mov	r7, r3
 8002648:	898b      	ldrh	r3, [r1, #12]
 800264a:	4605      	mov	r5, r0
 800264c:	05db      	lsls	r3, r3, #23
 800264e:	460c      	mov	r4, r1
 8002650:	4616      	mov	r6, r2
 8002652:	d505      	bpl.n	8002660 <__swrite+0x1e>
 8002654:	2302      	movs	r3, #2
 8002656:	2200      	movs	r2, #0
 8002658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800265c:	f000 f8d0 	bl	8002800 <_lseek_r>
 8002660:	89a3      	ldrh	r3, [r4, #12]
 8002662:	4632      	mov	r2, r6
 8002664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002668:	81a3      	strh	r3, [r4, #12]
 800266a:	4628      	mov	r0, r5
 800266c:	463b      	mov	r3, r7
 800266e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002676:	f000 b8e7 	b.w	8002848 <_write_r>

0800267a <__sseek>:
 800267a:	b510      	push	{r4, lr}
 800267c:	460c      	mov	r4, r1
 800267e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002682:	f000 f8bd 	bl	8002800 <_lseek_r>
 8002686:	1c43      	adds	r3, r0, #1
 8002688:	89a3      	ldrh	r3, [r4, #12]
 800268a:	bf15      	itete	ne
 800268c:	6560      	strne	r0, [r4, #84]	; 0x54
 800268e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002696:	81a3      	strheq	r3, [r4, #12]
 8002698:	bf18      	it	ne
 800269a:	81a3      	strhne	r3, [r4, #12]
 800269c:	bd10      	pop	{r4, pc}

0800269e <__sclose>:
 800269e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026a2:	f000 b89d 	b.w	80027e0 <_close_r>

080026a6 <__swbuf_r>:
 80026a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a8:	460e      	mov	r6, r1
 80026aa:	4614      	mov	r4, r2
 80026ac:	4605      	mov	r5, r0
 80026ae:	b118      	cbz	r0, 80026b8 <__swbuf_r+0x12>
 80026b0:	6a03      	ldr	r3, [r0, #32]
 80026b2:	b90b      	cbnz	r3, 80026b8 <__swbuf_r+0x12>
 80026b4:	f7ff ff22 	bl	80024fc <__sinit>
 80026b8:	69a3      	ldr	r3, [r4, #24]
 80026ba:	60a3      	str	r3, [r4, #8]
 80026bc:	89a3      	ldrh	r3, [r4, #12]
 80026be:	071a      	lsls	r2, r3, #28
 80026c0:	d525      	bpl.n	800270e <__swbuf_r+0x68>
 80026c2:	6923      	ldr	r3, [r4, #16]
 80026c4:	b31b      	cbz	r3, 800270e <__swbuf_r+0x68>
 80026c6:	6823      	ldr	r3, [r4, #0]
 80026c8:	6922      	ldr	r2, [r4, #16]
 80026ca:	b2f6      	uxtb	r6, r6
 80026cc:	1a98      	subs	r0, r3, r2
 80026ce:	6963      	ldr	r3, [r4, #20]
 80026d0:	4637      	mov	r7, r6
 80026d2:	4283      	cmp	r3, r0
 80026d4:	dc04      	bgt.n	80026e0 <__swbuf_r+0x3a>
 80026d6:	4621      	mov	r1, r4
 80026d8:	4628      	mov	r0, r5
 80026da:	f000 fa6b 	bl	8002bb4 <_fflush_r>
 80026de:	b9e0      	cbnz	r0, 800271a <__swbuf_r+0x74>
 80026e0:	68a3      	ldr	r3, [r4, #8]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	60a3      	str	r3, [r4, #8]
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	1c5a      	adds	r2, r3, #1
 80026ea:	6022      	str	r2, [r4, #0]
 80026ec:	701e      	strb	r6, [r3, #0]
 80026ee:	6962      	ldr	r2, [r4, #20]
 80026f0:	1c43      	adds	r3, r0, #1
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d004      	beq.n	8002700 <__swbuf_r+0x5a>
 80026f6:	89a3      	ldrh	r3, [r4, #12]
 80026f8:	07db      	lsls	r3, r3, #31
 80026fa:	d506      	bpl.n	800270a <__swbuf_r+0x64>
 80026fc:	2e0a      	cmp	r6, #10
 80026fe:	d104      	bne.n	800270a <__swbuf_r+0x64>
 8002700:	4621      	mov	r1, r4
 8002702:	4628      	mov	r0, r5
 8002704:	f000 fa56 	bl	8002bb4 <_fflush_r>
 8002708:	b938      	cbnz	r0, 800271a <__swbuf_r+0x74>
 800270a:	4638      	mov	r0, r7
 800270c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800270e:	4621      	mov	r1, r4
 8002710:	4628      	mov	r0, r5
 8002712:	f000 f805 	bl	8002720 <__swsetup_r>
 8002716:	2800      	cmp	r0, #0
 8002718:	d0d5      	beq.n	80026c6 <__swbuf_r+0x20>
 800271a:	f04f 37ff 	mov.w	r7, #4294967295
 800271e:	e7f4      	b.n	800270a <__swbuf_r+0x64>

08002720 <__swsetup_r>:
 8002720:	b538      	push	{r3, r4, r5, lr}
 8002722:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <__swsetup_r+0xac>)
 8002724:	4605      	mov	r5, r0
 8002726:	6818      	ldr	r0, [r3, #0]
 8002728:	460c      	mov	r4, r1
 800272a:	b118      	cbz	r0, 8002734 <__swsetup_r+0x14>
 800272c:	6a03      	ldr	r3, [r0, #32]
 800272e:	b90b      	cbnz	r3, 8002734 <__swsetup_r+0x14>
 8002730:	f7ff fee4 	bl	80024fc <__sinit>
 8002734:	89a3      	ldrh	r3, [r4, #12]
 8002736:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800273a:	0718      	lsls	r0, r3, #28
 800273c:	d422      	bmi.n	8002784 <__swsetup_r+0x64>
 800273e:	06d9      	lsls	r1, r3, #27
 8002740:	d407      	bmi.n	8002752 <__swsetup_r+0x32>
 8002742:	2309      	movs	r3, #9
 8002744:	602b      	str	r3, [r5, #0]
 8002746:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800274a:	f04f 30ff 	mov.w	r0, #4294967295
 800274e:	81a3      	strh	r3, [r4, #12]
 8002750:	e034      	b.n	80027bc <__swsetup_r+0x9c>
 8002752:	0758      	lsls	r0, r3, #29
 8002754:	d512      	bpl.n	800277c <__swsetup_r+0x5c>
 8002756:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002758:	b141      	cbz	r1, 800276c <__swsetup_r+0x4c>
 800275a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800275e:	4299      	cmp	r1, r3
 8002760:	d002      	beq.n	8002768 <__swsetup_r+0x48>
 8002762:	4628      	mov	r0, r5
 8002764:	f000 f8b0 	bl	80028c8 <_free_r>
 8002768:	2300      	movs	r3, #0
 800276a:	6363      	str	r3, [r4, #52]	; 0x34
 800276c:	89a3      	ldrh	r3, [r4, #12]
 800276e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002772:	81a3      	strh	r3, [r4, #12]
 8002774:	2300      	movs	r3, #0
 8002776:	6063      	str	r3, [r4, #4]
 8002778:	6923      	ldr	r3, [r4, #16]
 800277a:	6023      	str	r3, [r4, #0]
 800277c:	89a3      	ldrh	r3, [r4, #12]
 800277e:	f043 0308 	orr.w	r3, r3, #8
 8002782:	81a3      	strh	r3, [r4, #12]
 8002784:	6923      	ldr	r3, [r4, #16]
 8002786:	b94b      	cbnz	r3, 800279c <__swsetup_r+0x7c>
 8002788:	89a3      	ldrh	r3, [r4, #12]
 800278a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800278e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002792:	d003      	beq.n	800279c <__swsetup_r+0x7c>
 8002794:	4621      	mov	r1, r4
 8002796:	4628      	mov	r0, r5
 8002798:	f000 fa59 	bl	8002c4e <__smakebuf_r>
 800279c:	89a0      	ldrh	r0, [r4, #12]
 800279e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80027a2:	f010 0301 	ands.w	r3, r0, #1
 80027a6:	d00a      	beq.n	80027be <__swsetup_r+0x9e>
 80027a8:	2300      	movs	r3, #0
 80027aa:	60a3      	str	r3, [r4, #8]
 80027ac:	6963      	ldr	r3, [r4, #20]
 80027ae:	425b      	negs	r3, r3
 80027b0:	61a3      	str	r3, [r4, #24]
 80027b2:	6923      	ldr	r3, [r4, #16]
 80027b4:	b943      	cbnz	r3, 80027c8 <__swsetup_r+0xa8>
 80027b6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80027ba:	d1c4      	bne.n	8002746 <__swsetup_r+0x26>
 80027bc:	bd38      	pop	{r3, r4, r5, pc}
 80027be:	0781      	lsls	r1, r0, #30
 80027c0:	bf58      	it	pl
 80027c2:	6963      	ldrpl	r3, [r4, #20]
 80027c4:	60a3      	str	r3, [r4, #8]
 80027c6:	e7f4      	b.n	80027b2 <__swsetup_r+0x92>
 80027c8:	2000      	movs	r0, #0
 80027ca:	e7f7      	b.n	80027bc <__swsetup_r+0x9c>
 80027cc:	200000a8 	.word	0x200000a8

080027d0 <memset>:
 80027d0:	4603      	mov	r3, r0
 80027d2:	4402      	add	r2, r0
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d100      	bne.n	80027da <memset+0xa>
 80027d8:	4770      	bx	lr
 80027da:	f803 1b01 	strb.w	r1, [r3], #1
 80027de:	e7f9      	b.n	80027d4 <memset+0x4>

080027e0 <_close_r>:
 80027e0:	b538      	push	{r3, r4, r5, lr}
 80027e2:	2300      	movs	r3, #0
 80027e4:	4d05      	ldr	r5, [pc, #20]	; (80027fc <_close_r+0x1c>)
 80027e6:	4604      	mov	r4, r0
 80027e8:	4608      	mov	r0, r1
 80027ea:	602b      	str	r3, [r5, #0]
 80027ec:	f7fd fe1c 	bl	8000428 <_close>
 80027f0:	1c43      	adds	r3, r0, #1
 80027f2:	d102      	bne.n	80027fa <_close_r+0x1a>
 80027f4:	682b      	ldr	r3, [r5, #0]
 80027f6:	b103      	cbz	r3, 80027fa <_close_r+0x1a>
 80027f8:	6023      	str	r3, [r4, #0]
 80027fa:	bd38      	pop	{r3, r4, r5, pc}
 80027fc:	2000026c 	.word	0x2000026c

08002800 <_lseek_r>:
 8002800:	b538      	push	{r3, r4, r5, lr}
 8002802:	4604      	mov	r4, r0
 8002804:	4608      	mov	r0, r1
 8002806:	4611      	mov	r1, r2
 8002808:	2200      	movs	r2, #0
 800280a:	4d05      	ldr	r5, [pc, #20]	; (8002820 <_lseek_r+0x20>)
 800280c:	602a      	str	r2, [r5, #0]
 800280e:	461a      	mov	r2, r3
 8002810:	f7fd fe2e 	bl	8000470 <_lseek>
 8002814:	1c43      	adds	r3, r0, #1
 8002816:	d102      	bne.n	800281e <_lseek_r+0x1e>
 8002818:	682b      	ldr	r3, [r5, #0]
 800281a:	b103      	cbz	r3, 800281e <_lseek_r+0x1e>
 800281c:	6023      	str	r3, [r4, #0]
 800281e:	bd38      	pop	{r3, r4, r5, pc}
 8002820:	2000026c 	.word	0x2000026c

08002824 <_read_r>:
 8002824:	b538      	push	{r3, r4, r5, lr}
 8002826:	4604      	mov	r4, r0
 8002828:	4608      	mov	r0, r1
 800282a:	4611      	mov	r1, r2
 800282c:	2200      	movs	r2, #0
 800282e:	4d05      	ldr	r5, [pc, #20]	; (8002844 <_read_r+0x20>)
 8002830:	602a      	str	r2, [r5, #0]
 8002832:	461a      	mov	r2, r3
 8002834:	f7fd fdbf 	bl	80003b6 <_read>
 8002838:	1c43      	adds	r3, r0, #1
 800283a:	d102      	bne.n	8002842 <_read_r+0x1e>
 800283c:	682b      	ldr	r3, [r5, #0]
 800283e:	b103      	cbz	r3, 8002842 <_read_r+0x1e>
 8002840:	6023      	str	r3, [r4, #0]
 8002842:	bd38      	pop	{r3, r4, r5, pc}
 8002844:	2000026c 	.word	0x2000026c

08002848 <_write_r>:
 8002848:	b538      	push	{r3, r4, r5, lr}
 800284a:	4604      	mov	r4, r0
 800284c:	4608      	mov	r0, r1
 800284e:	4611      	mov	r1, r2
 8002850:	2200      	movs	r2, #0
 8002852:	4d05      	ldr	r5, [pc, #20]	; (8002868 <_write_r+0x20>)
 8002854:	602a      	str	r2, [r5, #0]
 8002856:	461a      	mov	r2, r3
 8002858:	f7fd fdca 	bl	80003f0 <_write>
 800285c:	1c43      	adds	r3, r0, #1
 800285e:	d102      	bne.n	8002866 <_write_r+0x1e>
 8002860:	682b      	ldr	r3, [r5, #0]
 8002862:	b103      	cbz	r3, 8002866 <_write_r+0x1e>
 8002864:	6023      	str	r3, [r4, #0]
 8002866:	bd38      	pop	{r3, r4, r5, pc}
 8002868:	2000026c 	.word	0x2000026c

0800286c <__errno>:
 800286c:	4b01      	ldr	r3, [pc, #4]	; (8002874 <__errno+0x8>)
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	200000a8 	.word	0x200000a8

08002878 <__libc_init_array>:
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	2600      	movs	r6, #0
 800287c:	4d0c      	ldr	r5, [pc, #48]	; (80028b0 <__libc_init_array+0x38>)
 800287e:	4c0d      	ldr	r4, [pc, #52]	; (80028b4 <__libc_init_array+0x3c>)
 8002880:	1b64      	subs	r4, r4, r5
 8002882:	10a4      	asrs	r4, r4, #2
 8002884:	42a6      	cmp	r6, r4
 8002886:	d109      	bne.n	800289c <__libc_init_array+0x24>
 8002888:	f000 fa50 	bl	8002d2c <_init>
 800288c:	2600      	movs	r6, #0
 800288e:	4d0a      	ldr	r5, [pc, #40]	; (80028b8 <__libc_init_array+0x40>)
 8002890:	4c0a      	ldr	r4, [pc, #40]	; (80028bc <__libc_init_array+0x44>)
 8002892:	1b64      	subs	r4, r4, r5
 8002894:	10a4      	asrs	r4, r4, #2
 8002896:	42a6      	cmp	r6, r4
 8002898:	d105      	bne.n	80028a6 <__libc_init_array+0x2e>
 800289a:	bd70      	pop	{r4, r5, r6, pc}
 800289c:	f855 3b04 	ldr.w	r3, [r5], #4
 80028a0:	4798      	blx	r3
 80028a2:	3601      	adds	r6, #1
 80028a4:	e7ee      	b.n	8002884 <__libc_init_array+0xc>
 80028a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80028aa:	4798      	blx	r3
 80028ac:	3601      	adds	r6, #1
 80028ae:	e7f2      	b.n	8002896 <__libc_init_array+0x1e>
 80028b0:	08002db8 	.word	0x08002db8
 80028b4:	08002db8 	.word	0x08002db8
 80028b8:	08002db8 	.word	0x08002db8
 80028bc:	08002dbc 	.word	0x08002dbc

080028c0 <__retarget_lock_init_recursive>:
 80028c0:	4770      	bx	lr

080028c2 <__retarget_lock_acquire_recursive>:
 80028c2:	4770      	bx	lr

080028c4 <__retarget_lock_release_recursive>:
 80028c4:	4770      	bx	lr
	...

080028c8 <_free_r>:
 80028c8:	b538      	push	{r3, r4, r5, lr}
 80028ca:	4605      	mov	r5, r0
 80028cc:	2900      	cmp	r1, #0
 80028ce:	d040      	beq.n	8002952 <_free_r+0x8a>
 80028d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028d4:	1f0c      	subs	r4, r1, #4
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	bfb8      	it	lt
 80028da:	18e4      	addlt	r4, r4, r3
 80028dc:	f000 f8dc 	bl	8002a98 <__malloc_lock>
 80028e0:	4a1c      	ldr	r2, [pc, #112]	; (8002954 <_free_r+0x8c>)
 80028e2:	6813      	ldr	r3, [r2, #0]
 80028e4:	b933      	cbnz	r3, 80028f4 <_free_r+0x2c>
 80028e6:	6063      	str	r3, [r4, #4]
 80028e8:	6014      	str	r4, [r2, #0]
 80028ea:	4628      	mov	r0, r5
 80028ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80028f0:	f000 b8d8 	b.w	8002aa4 <__malloc_unlock>
 80028f4:	42a3      	cmp	r3, r4
 80028f6:	d908      	bls.n	800290a <_free_r+0x42>
 80028f8:	6820      	ldr	r0, [r4, #0]
 80028fa:	1821      	adds	r1, r4, r0
 80028fc:	428b      	cmp	r3, r1
 80028fe:	bf01      	itttt	eq
 8002900:	6819      	ldreq	r1, [r3, #0]
 8002902:	685b      	ldreq	r3, [r3, #4]
 8002904:	1809      	addeq	r1, r1, r0
 8002906:	6021      	streq	r1, [r4, #0]
 8002908:	e7ed      	b.n	80028e6 <_free_r+0x1e>
 800290a:	461a      	mov	r2, r3
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	b10b      	cbz	r3, 8002914 <_free_r+0x4c>
 8002910:	42a3      	cmp	r3, r4
 8002912:	d9fa      	bls.n	800290a <_free_r+0x42>
 8002914:	6811      	ldr	r1, [r2, #0]
 8002916:	1850      	adds	r0, r2, r1
 8002918:	42a0      	cmp	r0, r4
 800291a:	d10b      	bne.n	8002934 <_free_r+0x6c>
 800291c:	6820      	ldr	r0, [r4, #0]
 800291e:	4401      	add	r1, r0
 8002920:	1850      	adds	r0, r2, r1
 8002922:	4283      	cmp	r3, r0
 8002924:	6011      	str	r1, [r2, #0]
 8002926:	d1e0      	bne.n	80028ea <_free_r+0x22>
 8002928:	6818      	ldr	r0, [r3, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4408      	add	r0, r1
 800292e:	6010      	str	r0, [r2, #0]
 8002930:	6053      	str	r3, [r2, #4]
 8002932:	e7da      	b.n	80028ea <_free_r+0x22>
 8002934:	d902      	bls.n	800293c <_free_r+0x74>
 8002936:	230c      	movs	r3, #12
 8002938:	602b      	str	r3, [r5, #0]
 800293a:	e7d6      	b.n	80028ea <_free_r+0x22>
 800293c:	6820      	ldr	r0, [r4, #0]
 800293e:	1821      	adds	r1, r4, r0
 8002940:	428b      	cmp	r3, r1
 8002942:	bf01      	itttt	eq
 8002944:	6819      	ldreq	r1, [r3, #0]
 8002946:	685b      	ldreq	r3, [r3, #4]
 8002948:	1809      	addeq	r1, r1, r0
 800294a:	6021      	streq	r1, [r4, #0]
 800294c:	6063      	str	r3, [r4, #4]
 800294e:	6054      	str	r4, [r2, #4]
 8002950:	e7cb      	b.n	80028ea <_free_r+0x22>
 8002952:	bd38      	pop	{r3, r4, r5, pc}
 8002954:	20000274 	.word	0x20000274

08002958 <sbrk_aligned>:
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	4e0e      	ldr	r6, [pc, #56]	; (8002994 <sbrk_aligned+0x3c>)
 800295c:	460c      	mov	r4, r1
 800295e:	6831      	ldr	r1, [r6, #0]
 8002960:	4605      	mov	r5, r0
 8002962:	b911      	cbnz	r1, 800296a <sbrk_aligned+0x12>
 8002964:	f000 f9d2 	bl	8002d0c <_sbrk_r>
 8002968:	6030      	str	r0, [r6, #0]
 800296a:	4621      	mov	r1, r4
 800296c:	4628      	mov	r0, r5
 800296e:	f000 f9cd 	bl	8002d0c <_sbrk_r>
 8002972:	1c43      	adds	r3, r0, #1
 8002974:	d00a      	beq.n	800298c <sbrk_aligned+0x34>
 8002976:	1cc4      	adds	r4, r0, #3
 8002978:	f024 0403 	bic.w	r4, r4, #3
 800297c:	42a0      	cmp	r0, r4
 800297e:	d007      	beq.n	8002990 <sbrk_aligned+0x38>
 8002980:	1a21      	subs	r1, r4, r0
 8002982:	4628      	mov	r0, r5
 8002984:	f000 f9c2 	bl	8002d0c <_sbrk_r>
 8002988:	3001      	adds	r0, #1
 800298a:	d101      	bne.n	8002990 <sbrk_aligned+0x38>
 800298c:	f04f 34ff 	mov.w	r4, #4294967295
 8002990:	4620      	mov	r0, r4
 8002992:	bd70      	pop	{r4, r5, r6, pc}
 8002994:	20000278 	.word	0x20000278

08002998 <_malloc_r>:
 8002998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800299c:	1ccd      	adds	r5, r1, #3
 800299e:	f025 0503 	bic.w	r5, r5, #3
 80029a2:	3508      	adds	r5, #8
 80029a4:	2d0c      	cmp	r5, #12
 80029a6:	bf38      	it	cc
 80029a8:	250c      	movcc	r5, #12
 80029aa:	2d00      	cmp	r5, #0
 80029ac:	4607      	mov	r7, r0
 80029ae:	db01      	blt.n	80029b4 <_malloc_r+0x1c>
 80029b0:	42a9      	cmp	r1, r5
 80029b2:	d905      	bls.n	80029c0 <_malloc_r+0x28>
 80029b4:	230c      	movs	r3, #12
 80029b6:	2600      	movs	r6, #0
 80029b8:	603b      	str	r3, [r7, #0]
 80029ba:	4630      	mov	r0, r6
 80029bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80029c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8002a94 <_malloc_r+0xfc>
 80029c4:	f000 f868 	bl	8002a98 <__malloc_lock>
 80029c8:	f8d8 3000 	ldr.w	r3, [r8]
 80029cc:	461c      	mov	r4, r3
 80029ce:	bb5c      	cbnz	r4, 8002a28 <_malloc_r+0x90>
 80029d0:	4629      	mov	r1, r5
 80029d2:	4638      	mov	r0, r7
 80029d4:	f7ff ffc0 	bl	8002958 <sbrk_aligned>
 80029d8:	1c43      	adds	r3, r0, #1
 80029da:	4604      	mov	r4, r0
 80029dc:	d155      	bne.n	8002a8a <_malloc_r+0xf2>
 80029de:	f8d8 4000 	ldr.w	r4, [r8]
 80029e2:	4626      	mov	r6, r4
 80029e4:	2e00      	cmp	r6, #0
 80029e6:	d145      	bne.n	8002a74 <_malloc_r+0xdc>
 80029e8:	2c00      	cmp	r4, #0
 80029ea:	d048      	beq.n	8002a7e <_malloc_r+0xe6>
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	4631      	mov	r1, r6
 80029f0:	4638      	mov	r0, r7
 80029f2:	eb04 0903 	add.w	r9, r4, r3
 80029f6:	f000 f989 	bl	8002d0c <_sbrk_r>
 80029fa:	4581      	cmp	r9, r0
 80029fc:	d13f      	bne.n	8002a7e <_malloc_r+0xe6>
 80029fe:	6821      	ldr	r1, [r4, #0]
 8002a00:	4638      	mov	r0, r7
 8002a02:	1a6d      	subs	r5, r5, r1
 8002a04:	4629      	mov	r1, r5
 8002a06:	f7ff ffa7 	bl	8002958 <sbrk_aligned>
 8002a0a:	3001      	adds	r0, #1
 8002a0c:	d037      	beq.n	8002a7e <_malloc_r+0xe6>
 8002a0e:	6823      	ldr	r3, [r4, #0]
 8002a10:	442b      	add	r3, r5
 8002a12:	6023      	str	r3, [r4, #0]
 8002a14:	f8d8 3000 	ldr.w	r3, [r8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d038      	beq.n	8002a8e <_malloc_r+0xf6>
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	42a2      	cmp	r2, r4
 8002a20:	d12b      	bne.n	8002a7a <_malloc_r+0xe2>
 8002a22:	2200      	movs	r2, #0
 8002a24:	605a      	str	r2, [r3, #4]
 8002a26:	e00f      	b.n	8002a48 <_malloc_r+0xb0>
 8002a28:	6822      	ldr	r2, [r4, #0]
 8002a2a:	1b52      	subs	r2, r2, r5
 8002a2c:	d41f      	bmi.n	8002a6e <_malloc_r+0xd6>
 8002a2e:	2a0b      	cmp	r2, #11
 8002a30:	d917      	bls.n	8002a62 <_malloc_r+0xca>
 8002a32:	1961      	adds	r1, r4, r5
 8002a34:	42a3      	cmp	r3, r4
 8002a36:	6025      	str	r5, [r4, #0]
 8002a38:	bf18      	it	ne
 8002a3a:	6059      	strne	r1, [r3, #4]
 8002a3c:	6863      	ldr	r3, [r4, #4]
 8002a3e:	bf08      	it	eq
 8002a40:	f8c8 1000 	streq.w	r1, [r8]
 8002a44:	5162      	str	r2, [r4, r5]
 8002a46:	604b      	str	r3, [r1, #4]
 8002a48:	4638      	mov	r0, r7
 8002a4a:	f104 060b 	add.w	r6, r4, #11
 8002a4e:	f000 f829 	bl	8002aa4 <__malloc_unlock>
 8002a52:	f026 0607 	bic.w	r6, r6, #7
 8002a56:	1d23      	adds	r3, r4, #4
 8002a58:	1af2      	subs	r2, r6, r3
 8002a5a:	d0ae      	beq.n	80029ba <_malloc_r+0x22>
 8002a5c:	1b9b      	subs	r3, r3, r6
 8002a5e:	50a3      	str	r3, [r4, r2]
 8002a60:	e7ab      	b.n	80029ba <_malloc_r+0x22>
 8002a62:	42a3      	cmp	r3, r4
 8002a64:	6862      	ldr	r2, [r4, #4]
 8002a66:	d1dd      	bne.n	8002a24 <_malloc_r+0x8c>
 8002a68:	f8c8 2000 	str.w	r2, [r8]
 8002a6c:	e7ec      	b.n	8002a48 <_malloc_r+0xb0>
 8002a6e:	4623      	mov	r3, r4
 8002a70:	6864      	ldr	r4, [r4, #4]
 8002a72:	e7ac      	b.n	80029ce <_malloc_r+0x36>
 8002a74:	4634      	mov	r4, r6
 8002a76:	6876      	ldr	r6, [r6, #4]
 8002a78:	e7b4      	b.n	80029e4 <_malloc_r+0x4c>
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	e7cc      	b.n	8002a18 <_malloc_r+0x80>
 8002a7e:	230c      	movs	r3, #12
 8002a80:	4638      	mov	r0, r7
 8002a82:	603b      	str	r3, [r7, #0]
 8002a84:	f000 f80e 	bl	8002aa4 <__malloc_unlock>
 8002a88:	e797      	b.n	80029ba <_malloc_r+0x22>
 8002a8a:	6025      	str	r5, [r4, #0]
 8002a8c:	e7dc      	b.n	8002a48 <_malloc_r+0xb0>
 8002a8e:	605b      	str	r3, [r3, #4]
 8002a90:	deff      	udf	#255	; 0xff
 8002a92:	bf00      	nop
 8002a94:	20000274 	.word	0x20000274

08002a98 <__malloc_lock>:
 8002a98:	4801      	ldr	r0, [pc, #4]	; (8002aa0 <__malloc_lock+0x8>)
 8002a9a:	f7ff bf12 	b.w	80028c2 <__retarget_lock_acquire_recursive>
 8002a9e:	bf00      	nop
 8002aa0:	20000270 	.word	0x20000270

08002aa4 <__malloc_unlock>:
 8002aa4:	4801      	ldr	r0, [pc, #4]	; (8002aac <__malloc_unlock+0x8>)
 8002aa6:	f7ff bf0d 	b.w	80028c4 <__retarget_lock_release_recursive>
 8002aaa:	bf00      	nop
 8002aac:	20000270 	.word	0x20000270

08002ab0 <__sflush_r>:
 8002ab0:	898a      	ldrh	r2, [r1, #12]
 8002ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ab4:	4605      	mov	r5, r0
 8002ab6:	0710      	lsls	r0, r2, #28
 8002ab8:	460c      	mov	r4, r1
 8002aba:	d457      	bmi.n	8002b6c <__sflush_r+0xbc>
 8002abc:	684b      	ldr	r3, [r1, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	dc04      	bgt.n	8002acc <__sflush_r+0x1c>
 8002ac2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	dc01      	bgt.n	8002acc <__sflush_r+0x1c>
 8002ac8:	2000      	movs	r0, #0
 8002aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002ace:	2e00      	cmp	r6, #0
 8002ad0:	d0fa      	beq.n	8002ac8 <__sflush_r+0x18>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002ad8:	682f      	ldr	r7, [r5, #0]
 8002ada:	6a21      	ldr	r1, [r4, #32]
 8002adc:	602b      	str	r3, [r5, #0]
 8002ade:	d032      	beq.n	8002b46 <__sflush_r+0x96>
 8002ae0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ae2:	89a3      	ldrh	r3, [r4, #12]
 8002ae4:	075a      	lsls	r2, r3, #29
 8002ae6:	d505      	bpl.n	8002af4 <__sflush_r+0x44>
 8002ae8:	6863      	ldr	r3, [r4, #4]
 8002aea:	1ac0      	subs	r0, r0, r3
 8002aec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002aee:	b10b      	cbz	r3, 8002af4 <__sflush_r+0x44>
 8002af0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002af2:	1ac0      	subs	r0, r0, r3
 8002af4:	2300      	movs	r3, #0
 8002af6:	4602      	mov	r2, r0
 8002af8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002afa:	4628      	mov	r0, r5
 8002afc:	6a21      	ldr	r1, [r4, #32]
 8002afe:	47b0      	blx	r6
 8002b00:	1c43      	adds	r3, r0, #1
 8002b02:	89a3      	ldrh	r3, [r4, #12]
 8002b04:	d106      	bne.n	8002b14 <__sflush_r+0x64>
 8002b06:	6829      	ldr	r1, [r5, #0]
 8002b08:	291d      	cmp	r1, #29
 8002b0a:	d82b      	bhi.n	8002b64 <__sflush_r+0xb4>
 8002b0c:	4a28      	ldr	r2, [pc, #160]	; (8002bb0 <__sflush_r+0x100>)
 8002b0e:	410a      	asrs	r2, r1
 8002b10:	07d6      	lsls	r6, r2, #31
 8002b12:	d427      	bmi.n	8002b64 <__sflush_r+0xb4>
 8002b14:	2200      	movs	r2, #0
 8002b16:	6062      	str	r2, [r4, #4]
 8002b18:	6922      	ldr	r2, [r4, #16]
 8002b1a:	04d9      	lsls	r1, r3, #19
 8002b1c:	6022      	str	r2, [r4, #0]
 8002b1e:	d504      	bpl.n	8002b2a <__sflush_r+0x7a>
 8002b20:	1c42      	adds	r2, r0, #1
 8002b22:	d101      	bne.n	8002b28 <__sflush_r+0x78>
 8002b24:	682b      	ldr	r3, [r5, #0]
 8002b26:	b903      	cbnz	r3, 8002b2a <__sflush_r+0x7a>
 8002b28:	6560      	str	r0, [r4, #84]	; 0x54
 8002b2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b2c:	602f      	str	r7, [r5, #0]
 8002b2e:	2900      	cmp	r1, #0
 8002b30:	d0ca      	beq.n	8002ac8 <__sflush_r+0x18>
 8002b32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b36:	4299      	cmp	r1, r3
 8002b38:	d002      	beq.n	8002b40 <__sflush_r+0x90>
 8002b3a:	4628      	mov	r0, r5
 8002b3c:	f7ff fec4 	bl	80028c8 <_free_r>
 8002b40:	2000      	movs	r0, #0
 8002b42:	6360      	str	r0, [r4, #52]	; 0x34
 8002b44:	e7c1      	b.n	8002aca <__sflush_r+0x1a>
 8002b46:	2301      	movs	r3, #1
 8002b48:	4628      	mov	r0, r5
 8002b4a:	47b0      	blx	r6
 8002b4c:	1c41      	adds	r1, r0, #1
 8002b4e:	d1c8      	bne.n	8002ae2 <__sflush_r+0x32>
 8002b50:	682b      	ldr	r3, [r5, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0c5      	beq.n	8002ae2 <__sflush_r+0x32>
 8002b56:	2b1d      	cmp	r3, #29
 8002b58:	d001      	beq.n	8002b5e <__sflush_r+0xae>
 8002b5a:	2b16      	cmp	r3, #22
 8002b5c:	d101      	bne.n	8002b62 <__sflush_r+0xb2>
 8002b5e:	602f      	str	r7, [r5, #0]
 8002b60:	e7b2      	b.n	8002ac8 <__sflush_r+0x18>
 8002b62:	89a3      	ldrh	r3, [r4, #12]
 8002b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b68:	81a3      	strh	r3, [r4, #12]
 8002b6a:	e7ae      	b.n	8002aca <__sflush_r+0x1a>
 8002b6c:	690f      	ldr	r7, [r1, #16]
 8002b6e:	2f00      	cmp	r7, #0
 8002b70:	d0aa      	beq.n	8002ac8 <__sflush_r+0x18>
 8002b72:	0793      	lsls	r3, r2, #30
 8002b74:	bf18      	it	ne
 8002b76:	2300      	movne	r3, #0
 8002b78:	680e      	ldr	r6, [r1, #0]
 8002b7a:	bf08      	it	eq
 8002b7c:	694b      	ldreq	r3, [r1, #20]
 8002b7e:	1bf6      	subs	r6, r6, r7
 8002b80:	600f      	str	r7, [r1, #0]
 8002b82:	608b      	str	r3, [r1, #8]
 8002b84:	2e00      	cmp	r6, #0
 8002b86:	dd9f      	ble.n	8002ac8 <__sflush_r+0x18>
 8002b88:	4633      	mov	r3, r6
 8002b8a:	463a      	mov	r2, r7
 8002b8c:	4628      	mov	r0, r5
 8002b8e:	6a21      	ldr	r1, [r4, #32]
 8002b90:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002b94:	47e0      	blx	ip
 8002b96:	2800      	cmp	r0, #0
 8002b98:	dc06      	bgt.n	8002ba8 <__sflush_r+0xf8>
 8002b9a:	89a3      	ldrh	r3, [r4, #12]
 8002b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba4:	81a3      	strh	r3, [r4, #12]
 8002ba6:	e790      	b.n	8002aca <__sflush_r+0x1a>
 8002ba8:	4407      	add	r7, r0
 8002baa:	1a36      	subs	r6, r6, r0
 8002bac:	e7ea      	b.n	8002b84 <__sflush_r+0xd4>
 8002bae:	bf00      	nop
 8002bb0:	dfbffffe 	.word	0xdfbffffe

08002bb4 <_fflush_r>:
 8002bb4:	b538      	push	{r3, r4, r5, lr}
 8002bb6:	690b      	ldr	r3, [r1, #16]
 8002bb8:	4605      	mov	r5, r0
 8002bba:	460c      	mov	r4, r1
 8002bbc:	b913      	cbnz	r3, 8002bc4 <_fflush_r+0x10>
 8002bbe:	2500      	movs	r5, #0
 8002bc0:	4628      	mov	r0, r5
 8002bc2:	bd38      	pop	{r3, r4, r5, pc}
 8002bc4:	b118      	cbz	r0, 8002bce <_fflush_r+0x1a>
 8002bc6:	6a03      	ldr	r3, [r0, #32]
 8002bc8:	b90b      	cbnz	r3, 8002bce <_fflush_r+0x1a>
 8002bca:	f7ff fc97 	bl	80024fc <__sinit>
 8002bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f3      	beq.n	8002bbe <_fflush_r+0xa>
 8002bd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002bd8:	07d0      	lsls	r0, r2, #31
 8002bda:	d404      	bmi.n	8002be6 <_fflush_r+0x32>
 8002bdc:	0599      	lsls	r1, r3, #22
 8002bde:	d402      	bmi.n	8002be6 <_fflush_r+0x32>
 8002be0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002be2:	f7ff fe6e 	bl	80028c2 <__retarget_lock_acquire_recursive>
 8002be6:	4628      	mov	r0, r5
 8002be8:	4621      	mov	r1, r4
 8002bea:	f7ff ff61 	bl	8002ab0 <__sflush_r>
 8002bee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002bf0:	4605      	mov	r5, r0
 8002bf2:	07da      	lsls	r2, r3, #31
 8002bf4:	d4e4      	bmi.n	8002bc0 <_fflush_r+0xc>
 8002bf6:	89a3      	ldrh	r3, [r4, #12]
 8002bf8:	059b      	lsls	r3, r3, #22
 8002bfa:	d4e1      	bmi.n	8002bc0 <_fflush_r+0xc>
 8002bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002bfe:	f7ff fe61 	bl	80028c4 <__retarget_lock_release_recursive>
 8002c02:	e7dd      	b.n	8002bc0 <_fflush_r+0xc>

08002c04 <__swhatbuf_r>:
 8002c04:	b570      	push	{r4, r5, r6, lr}
 8002c06:	460c      	mov	r4, r1
 8002c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c0c:	4615      	mov	r5, r2
 8002c0e:	2900      	cmp	r1, #0
 8002c10:	461e      	mov	r6, r3
 8002c12:	b096      	sub	sp, #88	; 0x58
 8002c14:	da0c      	bge.n	8002c30 <__swhatbuf_r+0x2c>
 8002c16:	89a3      	ldrh	r3, [r4, #12]
 8002c18:	2100      	movs	r1, #0
 8002c1a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002c1e:	bf0c      	ite	eq
 8002c20:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002c24:	2340      	movne	r3, #64	; 0x40
 8002c26:	2000      	movs	r0, #0
 8002c28:	6031      	str	r1, [r6, #0]
 8002c2a:	602b      	str	r3, [r5, #0]
 8002c2c:	b016      	add	sp, #88	; 0x58
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
 8002c30:	466a      	mov	r2, sp
 8002c32:	f000 f849 	bl	8002cc8 <_fstat_r>
 8002c36:	2800      	cmp	r0, #0
 8002c38:	dbed      	blt.n	8002c16 <__swhatbuf_r+0x12>
 8002c3a:	9901      	ldr	r1, [sp, #4]
 8002c3c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002c40:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002c44:	4259      	negs	r1, r3
 8002c46:	4159      	adcs	r1, r3
 8002c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c4c:	e7eb      	b.n	8002c26 <__swhatbuf_r+0x22>

08002c4e <__smakebuf_r>:
 8002c4e:	898b      	ldrh	r3, [r1, #12]
 8002c50:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002c52:	079d      	lsls	r5, r3, #30
 8002c54:	4606      	mov	r6, r0
 8002c56:	460c      	mov	r4, r1
 8002c58:	d507      	bpl.n	8002c6a <__smakebuf_r+0x1c>
 8002c5a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c5e:	6023      	str	r3, [r4, #0]
 8002c60:	6123      	str	r3, [r4, #16]
 8002c62:	2301      	movs	r3, #1
 8002c64:	6163      	str	r3, [r4, #20]
 8002c66:	b002      	add	sp, #8
 8002c68:	bd70      	pop	{r4, r5, r6, pc}
 8002c6a:	466a      	mov	r2, sp
 8002c6c:	ab01      	add	r3, sp, #4
 8002c6e:	f7ff ffc9 	bl	8002c04 <__swhatbuf_r>
 8002c72:	9900      	ldr	r1, [sp, #0]
 8002c74:	4605      	mov	r5, r0
 8002c76:	4630      	mov	r0, r6
 8002c78:	f7ff fe8e 	bl	8002998 <_malloc_r>
 8002c7c:	b948      	cbnz	r0, 8002c92 <__smakebuf_r+0x44>
 8002c7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c82:	059a      	lsls	r2, r3, #22
 8002c84:	d4ef      	bmi.n	8002c66 <__smakebuf_r+0x18>
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	f043 0302 	orr.w	r3, r3, #2
 8002c8e:	81a3      	strh	r3, [r4, #12]
 8002c90:	e7e3      	b.n	8002c5a <__smakebuf_r+0xc>
 8002c92:	89a3      	ldrh	r3, [r4, #12]
 8002c94:	6020      	str	r0, [r4, #0]
 8002c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c9a:	81a3      	strh	r3, [r4, #12]
 8002c9c:	9b00      	ldr	r3, [sp, #0]
 8002c9e:	6120      	str	r0, [r4, #16]
 8002ca0:	6163      	str	r3, [r4, #20]
 8002ca2:	9b01      	ldr	r3, [sp, #4]
 8002ca4:	b15b      	cbz	r3, 8002cbe <__smakebuf_r+0x70>
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002cac:	f000 f81e 	bl	8002cec <_isatty_r>
 8002cb0:	b128      	cbz	r0, 8002cbe <__smakebuf_r+0x70>
 8002cb2:	89a3      	ldrh	r3, [r4, #12]
 8002cb4:	f023 0303 	bic.w	r3, r3, #3
 8002cb8:	f043 0301 	orr.w	r3, r3, #1
 8002cbc:	81a3      	strh	r3, [r4, #12]
 8002cbe:	89a3      	ldrh	r3, [r4, #12]
 8002cc0:	431d      	orrs	r5, r3
 8002cc2:	81a5      	strh	r5, [r4, #12]
 8002cc4:	e7cf      	b.n	8002c66 <__smakebuf_r+0x18>
	...

08002cc8 <_fstat_r>:
 8002cc8:	b538      	push	{r3, r4, r5, lr}
 8002cca:	2300      	movs	r3, #0
 8002ccc:	4d06      	ldr	r5, [pc, #24]	; (8002ce8 <_fstat_r+0x20>)
 8002cce:	4604      	mov	r4, r0
 8002cd0:	4608      	mov	r0, r1
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	602b      	str	r3, [r5, #0]
 8002cd6:	f7fd fbb2 	bl	800043e <_fstat>
 8002cda:	1c43      	adds	r3, r0, #1
 8002cdc:	d102      	bne.n	8002ce4 <_fstat_r+0x1c>
 8002cde:	682b      	ldr	r3, [r5, #0]
 8002ce0:	b103      	cbz	r3, 8002ce4 <_fstat_r+0x1c>
 8002ce2:	6023      	str	r3, [r4, #0]
 8002ce4:	bd38      	pop	{r3, r4, r5, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2000026c 	.word	0x2000026c

08002cec <_isatty_r>:
 8002cec:	b538      	push	{r3, r4, r5, lr}
 8002cee:	2300      	movs	r3, #0
 8002cf0:	4d05      	ldr	r5, [pc, #20]	; (8002d08 <_isatty_r+0x1c>)
 8002cf2:	4604      	mov	r4, r0
 8002cf4:	4608      	mov	r0, r1
 8002cf6:	602b      	str	r3, [r5, #0]
 8002cf8:	f7fd fbb0 	bl	800045c <_isatty>
 8002cfc:	1c43      	adds	r3, r0, #1
 8002cfe:	d102      	bne.n	8002d06 <_isatty_r+0x1a>
 8002d00:	682b      	ldr	r3, [r5, #0]
 8002d02:	b103      	cbz	r3, 8002d06 <_isatty_r+0x1a>
 8002d04:	6023      	str	r3, [r4, #0]
 8002d06:	bd38      	pop	{r3, r4, r5, pc}
 8002d08:	2000026c 	.word	0x2000026c

08002d0c <_sbrk_r>:
 8002d0c:	b538      	push	{r3, r4, r5, lr}
 8002d0e:	2300      	movs	r3, #0
 8002d10:	4d05      	ldr	r5, [pc, #20]	; (8002d28 <_sbrk_r+0x1c>)
 8002d12:	4604      	mov	r4, r0
 8002d14:	4608      	mov	r0, r1
 8002d16:	602b      	str	r3, [r5, #0]
 8002d18:	f7fd fbb6 	bl	8000488 <_sbrk>
 8002d1c:	1c43      	adds	r3, r0, #1
 8002d1e:	d102      	bne.n	8002d26 <_sbrk_r+0x1a>
 8002d20:	682b      	ldr	r3, [r5, #0]
 8002d22:	b103      	cbz	r3, 8002d26 <_sbrk_r+0x1a>
 8002d24:	6023      	str	r3, [r4, #0]
 8002d26:	bd38      	pop	{r3, r4, r5, pc}
 8002d28:	2000026c 	.word	0x2000026c

08002d2c <_init>:
 8002d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2e:	bf00      	nop
 8002d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d32:	bc08      	pop	{r3}
 8002d34:	469e      	mov	lr, r3
 8002d36:	4770      	bx	lr

08002d38 <_fini>:
 8002d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3a:	bf00      	nop
 8002d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3e:	bc08      	pop	{r3}
 8002d40:	469e      	mov	lr, r3
 8002d42:	4770      	bx	lr
