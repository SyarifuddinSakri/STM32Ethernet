
Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003720  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800382c  0800382c  0001382c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038a0  080038a0  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  080038a0  080038a0  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038a0  080038a0  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038a0  080038a0  000138a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038a4  080038a4  000138a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080038a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  200000ac  08003954  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08003954  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006daa  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bf9  00000000  00000000  00026ec2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000868  00000000  00000000  00028ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000637  00000000  00000000  00029328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000181bd  00000000  00000000  0002995f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009136  00000000  00000000  00041b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008681b  00000000  00000000  0004ac52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000268c  00000000  00000000  000d1470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d3afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000ac 	.word	0x200000ac
 8000128:	00000000 	.word	0x00000000
 800012c:	08003814 	.word	0x08003814

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b0 	.word	0x200000b0
 8000148:	08003814 	.word	0x08003814

0800014c <main>:
netmode_type gNetMode = {
		NM_FORCEARP | NM_WAKEONLAN | NM_PPPOE | 128
};

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  HAL_Init();
 8000150:	f001 fa4e 	bl	80015f0 <HAL_Init>

  SystemClock_Config();
 8000154:	f000 f814 	bl	8000180 <SystemClock_Config>

  MX_GPIO_Init();
 8000158:	f000 f88e 	bl	8000278 <MX_GPIO_Init>
  MX_SPI1_Init();
 800015c:	f000 f856 	bl	800020c <MX_SPI1_Init>
  W5500Init();
 8000160:	f000 fc2c 	bl	80009bc <W5500Init>

  ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO2);
 8000164:	4904      	ldr	r1, [pc, #16]	; (8000178 <main+0x2c>)
 8000166:	2000      	movs	r0, #0
 8000168:	f000 fe34 	bl	8000dd4 <ctlnetwork>
  ctlnetwork(CN_SET_NETMODE, (void*) &gNetMode);
 800016c:	4903      	ldr	r1, [pc, #12]	; (800017c <main+0x30>)
 800016e:	2002      	movs	r0, #2
 8000170:	f000 fe30 	bl	8000dd4 <ctlnetwork>


  while (1)
 8000174:	e7fe      	b.n	8000174 <main+0x28>
 8000176:	bf00      	nop
 8000178:	20000000 	.word	0x20000000
 800017c:	20000017 	.word	0x20000017

08000180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b090      	sub	sp, #64	; 0x40
 8000184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000186:	f107 0318 	add.w	r3, r7, #24
 800018a:	2228      	movs	r2, #40	; 0x28
 800018c:	2100      	movs	r1, #0
 800018e:	4618      	mov	r0, r3
 8000190:	f003 f892 	bl	80032b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000194:	1d3b      	adds	r3, r7, #4
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	605a      	str	r2, [r3, #4]
 800019c:	609a      	str	r2, [r3, #8]
 800019e:	60da      	str	r2, [r3, #12]
 80001a0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001a2:	2301      	movs	r3, #1
 80001a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001aa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ac:	2300      	movs	r3, #0
 80001ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b0:	2301      	movs	r3, #1
 80001b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001b4:	2302      	movs	r3, #2
 80001b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 80001be:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80001c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c4:	f107 0318 	add.w	r3, r7, #24
 80001c8:	4618      	mov	r0, r3
 80001ca:	f001 fcf3 	bl	8001bb4 <HAL_RCC_OscConfig>
 80001ce:	4603      	mov	r3, r0
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d001      	beq.n	80001d8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001d4:	f000 f8d4 	bl	8000380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001d8:	230f      	movs	r3, #15
 80001da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001dc:	2302      	movs	r3, #2
 80001de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001e4:	2300      	movs	r3, #0
 80001e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2100      	movs	r1, #0
 80001f0:	4618      	mov	r0, r3
 80001f2:	f001 ff61 	bl	80020b8 <HAL_RCC_ClockConfig>
 80001f6:	4603      	mov	r3, r0
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d001      	beq.n	8000200 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80001fc:	f000 f8c0 	bl	8000380 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000200:	f002 f844 	bl	800228c <HAL_RCC_EnableCSS>
}
 8000204:	bf00      	nop
 8000206:	3740      	adds	r7, #64	; 0x40
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}

0800020c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000210:	4b17      	ldr	r3, [pc, #92]	; (8000270 <MX_SPI1_Init+0x64>)
 8000212:	4a18      	ldr	r2, [pc, #96]	; (8000274 <MX_SPI1_Init+0x68>)
 8000214:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000216:	4b16      	ldr	r3, [pc, #88]	; (8000270 <MX_SPI1_Init+0x64>)
 8000218:	f44f 7282 	mov.w	r2, #260	; 0x104
 800021c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800021e:	4b14      	ldr	r3, [pc, #80]	; (8000270 <MX_SPI1_Init+0x64>)
 8000220:	2200      	movs	r2, #0
 8000222:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000224:	4b12      	ldr	r3, [pc, #72]	; (8000270 <MX_SPI1_Init+0x64>)
 8000226:	2200      	movs	r2, #0
 8000228:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800022a:	4b11      	ldr	r3, [pc, #68]	; (8000270 <MX_SPI1_Init+0x64>)
 800022c:	2202      	movs	r2, #2
 800022e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000230:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <MX_SPI1_Init+0x64>)
 8000232:	2201      	movs	r2, #1
 8000234:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000236:	4b0e      	ldr	r3, [pc, #56]	; (8000270 <MX_SPI1_Init+0x64>)
 8000238:	f44f 7200 	mov.w	r2, #512	; 0x200
 800023c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800023e:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <MX_SPI1_Init+0x64>)
 8000240:	2220      	movs	r2, #32
 8000242:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000244:	4b0a      	ldr	r3, [pc, #40]	; (8000270 <MX_SPI1_Init+0x64>)
 8000246:	2200      	movs	r2, #0
 8000248:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800024a:	4b09      	ldr	r3, [pc, #36]	; (8000270 <MX_SPI1_Init+0x64>)
 800024c:	2200      	movs	r2, #0
 800024e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000250:	4b07      	ldr	r3, [pc, #28]	; (8000270 <MX_SPI1_Init+0x64>)
 8000252:	2200      	movs	r2, #0
 8000254:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000256:	4b06      	ldr	r3, [pc, #24]	; (8000270 <MX_SPI1_Init+0x64>)
 8000258:	220a      	movs	r2, #10
 800025a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <MX_SPI1_Init+0x64>)
 800025e:	f002 f8ad 	bl	80023bc <HAL_SPI_Init>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000268:	f000 f88a 	bl	8000380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	200000c8 	.word	0x200000c8
 8000274:	40013000 	.word	0x40013000

08000278 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b088      	sub	sp, #32
 800027c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027e:	f107 0310 	add.w	r3, r7, #16
 8000282:	2200      	movs	r2, #0
 8000284:	601a      	str	r2, [r3, #0]
 8000286:	605a      	str	r2, [r3, #4]
 8000288:	609a      	str	r2, [r3, #8]
 800028a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800028c:	4b38      	ldr	r3, [pc, #224]	; (8000370 <MX_GPIO_Init+0xf8>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	4a37      	ldr	r2, [pc, #220]	; (8000370 <MX_GPIO_Init+0xf8>)
 8000292:	f043 0310 	orr.w	r3, r3, #16
 8000296:	6193      	str	r3, [r2, #24]
 8000298:	4b35      	ldr	r3, [pc, #212]	; (8000370 <MX_GPIO_Init+0xf8>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	f003 0310 	and.w	r3, r3, #16
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002a4:	4b32      	ldr	r3, [pc, #200]	; (8000370 <MX_GPIO_Init+0xf8>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a31      	ldr	r2, [pc, #196]	; (8000370 <MX_GPIO_Init+0xf8>)
 80002aa:	f043 0320 	orr.w	r3, r3, #32
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b2f      	ldr	r3, [pc, #188]	; (8000370 <MX_GPIO_Init+0xf8>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0320 	and.w	r3, r3, #32
 80002b8:	60bb      	str	r3, [r7, #8]
 80002ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002bc:	4b2c      	ldr	r3, [pc, #176]	; (8000370 <MX_GPIO_Init+0xf8>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a2b      	ldr	r2, [pc, #172]	; (8000370 <MX_GPIO_Init+0xf8>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b29      	ldr	r3, [pc, #164]	; (8000370 <MX_GPIO_Init+0xf8>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0304 	and.w	r3, r3, #4
 80002d0:	607b      	str	r3, [r7, #4]
 80002d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002d4:	4b26      	ldr	r3, [pc, #152]	; (8000370 <MX_GPIO_Init+0xf8>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a25      	ldr	r2, [pc, #148]	; (8000370 <MX_GPIO_Init+0xf8>)
 80002da:	f043 0308 	orr.w	r3, r3, #8
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b23      	ldr	r3, [pc, #140]	; (8000370 <MX_GPIO_Init+0xf8>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0308 	and.w	r3, r3, #8
 80002e8:	603b      	str	r3, [r7, #0]
 80002ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80002ec:	2200      	movs	r2, #0
 80002ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002f2:	4820      	ldr	r0, [pc, #128]	; (8000374 <MX_GPIO_Init+0xfc>)
 80002f4:	f001 fc46 	bl	8001b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	2103      	movs	r1, #3
 80002fc:	481e      	ldr	r0, [pc, #120]	; (8000378 <MX_GPIO_Init+0x100>)
 80002fe:	f001 fc41 	bl	8001b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000308:	481c      	ldr	r0, [pc, #112]	; (800037c <MX_GPIO_Init+0x104>)
 800030a:	f001 fc3b 	bl	8001b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800030e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	2301      	movs	r3, #1
 8000316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000318:	2300      	movs	r3, #0
 800031a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031c:	2302      	movs	r3, #2
 800031e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000320:	f107 0310 	add.w	r3, r7, #16
 8000324:	4619      	mov	r1, r3
 8000326:	4813      	ldr	r0, [pc, #76]	; (8000374 <MX_GPIO_Init+0xfc>)
 8000328:	f001 faa8 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800032c:	2303      	movs	r3, #3
 800032e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000330:	2301      	movs	r3, #1
 8000332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000338:	2302      	movs	r3, #2
 800033a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033c:	f107 0310 	add.w	r3, r7, #16
 8000340:	4619      	mov	r1, r3
 8000342:	480d      	ldr	r0, [pc, #52]	; (8000378 <MX_GPIO_Init+0x100>)
 8000344:	f001 fa9a 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800034c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800034e:	2301      	movs	r3, #1
 8000350:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000352:	2300      	movs	r3, #0
 8000354:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000356:	2302      	movs	r3, #2
 8000358:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800035a:	f107 0310 	add.w	r3, r7, #16
 800035e:	4619      	mov	r1, r3
 8000360:	4806      	ldr	r0, [pc, #24]	; (800037c <MX_GPIO_Init+0x104>)
 8000362:	f001 fa8b 	bl	800187c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000366:	bf00      	nop
 8000368:	3720      	adds	r7, #32
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40021000 	.word	0x40021000
 8000374:	40011000 	.word	0x40011000
 8000378:	40010800 	.word	0x40010800
 800037c:	40010c00 	.word	0x40010c00

08000380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000384:	b672      	cpsid	i
}
 8000386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000388:	e7fe      	b.n	8000388 <Error_Handler+0x8>
	...

0800038c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b085      	sub	sp, #20
 8000390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000392:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <HAL_MspInit+0x5c>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <HAL_MspInit+0x5c>)
 8000398:	f043 0301 	orr.w	r3, r3, #1
 800039c:	6193      	str	r3, [r2, #24]
 800039e:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <HAL_MspInit+0x5c>)
 80003a0:	699b      	ldr	r3, [r3, #24]
 80003a2:	f003 0301 	and.w	r3, r3, #1
 80003a6:	60bb      	str	r3, [r7, #8]
 80003a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003aa:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <HAL_MspInit+0x5c>)
 80003ac:	69db      	ldr	r3, [r3, #28]
 80003ae:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b4:	61d3      	str	r3, [r2, #28]
 80003b6:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <HAL_MspInit+0x5c>)
 80003b8:	69db      	ldr	r3, [r3, #28]
 80003ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003c2:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <HAL_MspInit+0x60>)
 80003c4:	685b      	ldr	r3, [r3, #4]
 80003c6:	60fb      	str	r3, [r7, #12]
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80003ce:	60fb      	str	r3, [r7, #12]
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	4a04      	ldr	r2, [pc, #16]	; (80003ec <HAL_MspInit+0x60>)
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40010000 	.word	0x40010000

080003f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003f8:	f107 0310 	add.w	r3, r7, #16
 80003fc:	2200      	movs	r2, #0
 80003fe:	601a      	str	r2, [r3, #0]
 8000400:	605a      	str	r2, [r3, #4]
 8000402:	609a      	str	r2, [r3, #8]
 8000404:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a1b      	ldr	r2, [pc, #108]	; (8000478 <HAL_SPI_MspInit+0x88>)
 800040c:	4293      	cmp	r3, r2
 800040e:	d12f      	bne.n	8000470 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000410:	4b1a      	ldr	r3, [pc, #104]	; (800047c <HAL_SPI_MspInit+0x8c>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	4a19      	ldr	r2, [pc, #100]	; (800047c <HAL_SPI_MspInit+0x8c>)
 8000416:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800041a:	6193      	str	r3, [r2, #24]
 800041c:	4b17      	ldr	r3, [pc, #92]	; (800047c <HAL_SPI_MspInit+0x8c>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000424:	60fb      	str	r3, [r7, #12]
 8000426:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000428:	4b14      	ldr	r3, [pc, #80]	; (800047c <HAL_SPI_MspInit+0x8c>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	4a13      	ldr	r2, [pc, #76]	; (800047c <HAL_SPI_MspInit+0x8c>)
 800042e:	f043 0304 	orr.w	r3, r3, #4
 8000432:	6193      	str	r3, [r2, #24]
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <HAL_SPI_MspInit+0x8c>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	f003 0304 	and.w	r3, r3, #4
 800043c:	60bb      	str	r3, [r7, #8]
 800043e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000440:	23a0      	movs	r3, #160	; 0xa0
 8000442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000444:	2302      	movs	r3, #2
 8000446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000448:	2303      	movs	r3, #3
 800044a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	4619      	mov	r1, r3
 8000452:	480b      	ldr	r0, [pc, #44]	; (8000480 <HAL_SPI_MspInit+0x90>)
 8000454:	f001 fa12 	bl	800187c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000458:	2340      	movs	r3, #64	; 0x40
 800045a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800045c:	2300      	movs	r3, #0
 800045e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000464:	f107 0310 	add.w	r3, r7, #16
 8000468:	4619      	mov	r1, r3
 800046a:	4805      	ldr	r0, [pc, #20]	; (8000480 <HAL_SPI_MspInit+0x90>)
 800046c:	f001 fa06 	bl	800187c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000470:	bf00      	nop
 8000472:	3720      	adds	r7, #32
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40013000 	.word	0x40013000
 800047c:	40021000 	.word	0x40021000
 8000480:	40010800 	.word	0x40010800

08000484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000488:	f001 ff60 	bl	800234c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800048c:	e7fe      	b.n	800048c <NMI_Handler+0x8>

0800048e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <HardFault_Handler+0x4>

08000494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <MemManage_Handler+0x4>

0800049a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049e:	e7fe      	b.n	800049e <BusFault_Handler+0x4>

080004a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <UsageFault_Handler+0x4>

080004a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bc80      	pop	{r7}
 80004b0:	4770      	bx	lr

080004b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b2:	b480      	push	{r7}
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr

080004be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bc80      	pop	{r7}
 80004c8:	4770      	bx	lr

080004ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004ca:	b580      	push	{r7, lr}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004ce:	f001 f8d5 	bl	800167c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}

080004d6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004d6:	b580      	push	{r7, lr}
 80004d8:	b086      	sub	sp, #24
 80004da:	af00      	add	r7, sp, #0
 80004dc:	60f8      	str	r0, [r7, #12]
 80004de:	60b9      	str	r1, [r7, #8]
 80004e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004e2:	2300      	movs	r3, #0
 80004e4:	617b      	str	r3, [r7, #20]
 80004e6:	e00a      	b.n	80004fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004e8:	f3af 8000 	nop.w
 80004ec:	4601      	mov	r1, r0
 80004ee:	68bb      	ldr	r3, [r7, #8]
 80004f0:	1c5a      	adds	r2, r3, #1
 80004f2:	60ba      	str	r2, [r7, #8]
 80004f4:	b2ca      	uxtb	r2, r1
 80004f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f8:	697b      	ldr	r3, [r7, #20]
 80004fa:	3301      	adds	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
 80004fe:	697a      	ldr	r2, [r7, #20]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	429a      	cmp	r2, r3
 8000504:	dbf0      	blt.n	80004e8 <_read+0x12>
  }

  return len;
 8000506:	687b      	ldr	r3, [r7, #4]
}
 8000508:	4618      	mov	r0, r3
 800050a:	3718      	adds	r7, #24
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	e009      	b.n	8000536 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	1c5a      	adds	r2, r3, #1
 8000526:	60ba      	str	r2, [r7, #8]
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	4618      	mov	r0, r3
 800052c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	3301      	adds	r3, #1
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	697a      	ldr	r2, [r7, #20]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	429a      	cmp	r2, r3
 800053c:	dbf1      	blt.n	8000522 <_write+0x12>
  }
  return len;
 800053e:	687b      	ldr	r3, [r7, #4]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3718      	adds	r7, #24
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}

08000548 <_close>:

int _close(int file)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000554:	4618      	mov	r0, r3
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800056e:	605a      	str	r2, [r3, #4]
  return 0;
 8000570:	2300      	movs	r3, #0
}
 8000572:	4618      	mov	r0, r3
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr

0800057c <_isatty>:

int _isatty(int file)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000584:	2301      	movs	r3, #1
}
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	60f8      	str	r0, [r7, #12]
 8000598:	60b9      	str	r1, [r7, #8]
 800059a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800059c:	2300      	movs	r3, #0
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3714      	adds	r7, #20
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bc80      	pop	{r7}
 80005a6:	4770      	bx	lr

080005a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005b0:	4a14      	ldr	r2, [pc, #80]	; (8000604 <_sbrk+0x5c>)
 80005b2:	4b15      	ldr	r3, [pc, #84]	; (8000608 <_sbrk+0x60>)
 80005b4:	1ad3      	subs	r3, r2, r3
 80005b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005bc:	4b13      	ldr	r3, [pc, #76]	; (800060c <_sbrk+0x64>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d102      	bne.n	80005ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005c4:	4b11      	ldr	r3, [pc, #68]	; (800060c <_sbrk+0x64>)
 80005c6:	4a12      	ldr	r2, [pc, #72]	; (8000610 <_sbrk+0x68>)
 80005c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ca:	4b10      	ldr	r3, [pc, #64]	; (800060c <_sbrk+0x64>)
 80005cc:	681a      	ldr	r2, [r3, #0]
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4413      	add	r3, r2
 80005d2:	693a      	ldr	r2, [r7, #16]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d207      	bcs.n	80005e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005d8:	f002 febc 	bl	8003354 <__errno>
 80005dc:	4603      	mov	r3, r0
 80005de:	220c      	movs	r2, #12
 80005e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005e2:	f04f 33ff 	mov.w	r3, #4294967295
 80005e6:	e009      	b.n	80005fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005e8:	4b08      	ldr	r3, [pc, #32]	; (800060c <_sbrk+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ee:	4b07      	ldr	r3, [pc, #28]	; (800060c <_sbrk+0x64>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <_sbrk+0x64>)
 80005f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005fa:	68fb      	ldr	r3, [r7, #12]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20005000 	.word	0x20005000
 8000608:	00000400 	.word	0x00000400
 800060c:	20000120 	.word	0x20000120
 8000610:	20000280 	.word	0x20000280

08000614 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	bc80      	pop	{r7}
 800061e:	4770      	bx	lr

08000620 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <WIZCHIP_READ+0x94>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <WIZCHIP_READ+0x94>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <WIZCHIP_READ+0x94>)
 8000636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000638:	2b00      	cmp	r3, #0
 800063a:	d003      	beq.n	8000644 <WIZCHIP_READ+0x24>
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <WIZCHIP_READ+0x94>)
 800063e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000640:	2b00      	cmp	r3, #0
 8000642:	d114      	bne.n	800066e <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <WIZCHIP_READ+0x94>)
 8000646:	6a1b      	ldr	r3, [r3, #32]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	0c12      	lsrs	r2, r2, #16
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	4610      	mov	r0, r2
 8000650:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <WIZCHIP_READ+0x94>)
 8000654:	6a1b      	ldr	r3, [r3, #32]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	0a12      	lsrs	r2, r2, #8
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	4610      	mov	r0, r2
 800065e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <WIZCHIP_READ+0x94>)
 8000662:	6a1b      	ldr	r3, [r3, #32]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	4610      	mov	r0, r2
 800066a:	4798      	blx	r3
 800066c:	e011      	b.n	8000692 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	0c1b      	lsrs	r3, r3, #16
 8000672:	b2db      	uxtb	r3, r3
 8000674:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	0a1b      	lsrs	r3, r3, #8
 800067a:	b2db      	uxtb	r3, r3
 800067c:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <WIZCHIP_READ+0x94>)
 8000686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000688:	f107 020c 	add.w	r2, r7, #12
 800068c:	2103      	movs	r1, #3
 800068e:	4610      	mov	r0, r2
 8000690:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <WIZCHIP_READ+0x94>)
 8000694:	69db      	ldr	r3, [r3, #28]
 8000696:	4798      	blx	r3
 8000698:	4603      	mov	r3, r0
 800069a:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 800069c:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <WIZCHIP_READ+0x94>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80006a2:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <WIZCHIP_READ+0x94>)
 80006a4:	691b      	ldr	r3, [r3, #16]
 80006a6:	4798      	blx	r3
   return ret;
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3710      	adds	r7, #16
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	2000001c 	.word	0x2000001c

080006b8 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <WIZCHIP_WRITE+0x98>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	4798      	blx	r3
   WIZCHIP.CS._select();
 80006ca:	4b21      	ldr	r3, [pc, #132]	; (8000750 <WIZCHIP_WRITE+0x98>)
 80006cc:	695b      	ldr	r3, [r3, #20]
 80006ce:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80006d8:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <WIZCHIP_WRITE+0x98>)
 80006da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d119      	bne.n	8000714 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <WIZCHIP_WRITE+0x98>)
 80006e2:	6a1b      	ldr	r3, [r3, #32]
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	0c12      	lsrs	r2, r2, #16
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	4610      	mov	r0, r2
 80006ec:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80006ee:	4b18      	ldr	r3, [pc, #96]	; (8000750 <WIZCHIP_WRITE+0x98>)
 80006f0:	6a1b      	ldr	r3, [r3, #32]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	0a12      	lsrs	r2, r2, #8
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	4610      	mov	r0, r2
 80006fa:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <WIZCHIP_WRITE+0x98>)
 80006fe:	6a1b      	ldr	r3, [r3, #32]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	b2d2      	uxtb	r2, r2
 8000704:	4610      	mov	r0, r2
 8000706:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <WIZCHIP_WRITE+0x98>)
 800070a:	6a1b      	ldr	r3, [r3, #32]
 800070c:	78fa      	ldrb	r2, [r7, #3]
 800070e:	4610      	mov	r0, r2
 8000710:	4798      	blx	r3
 8000712:	e013      	b.n	800073c <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	0c1b      	lsrs	r3, r3, #16
 8000718:	b2db      	uxtb	r3, r3
 800071a:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	0a1b      	lsrs	r3, r3, #8
 8000720:	b2db      	uxtb	r3, r3
 8000722:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800072a:	78fb      	ldrb	r3, [r7, #3]
 800072c:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <WIZCHIP_WRITE+0x98>)
 8000730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000732:	f107 020c 	add.w	r2, r7, #12
 8000736:	2104      	movs	r1, #4
 8000738:	4610      	mov	r0, r2
 800073a:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <WIZCHIP_WRITE+0x98>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000742:	4b03      	ldr	r3, [pc, #12]	; (8000750 <WIZCHIP_WRITE+0x98>)
 8000744:	691b      	ldr	r3, [r3, #16]
 8000746:	4798      	blx	r3
}
 8000748:	bf00      	nop
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000001c 	.word	0x2000001c

08000754 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b087      	sub	sp, #28
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	4613      	mov	r3, r2
 8000760:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000762:	4b2b      	ldr	r3, [pc, #172]	; (8000810 <WIZCHIP_READ_BUF+0xbc>)
 8000764:	68db      	ldr	r3, [r3, #12]
 8000766:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000768:	4b29      	ldr	r3, [pc, #164]	; (8000810 <WIZCHIP_READ_BUF+0xbc>)
 800076a:	695b      	ldr	r3, [r3, #20]
 800076c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800076e:	4b28      	ldr	r3, [pc, #160]	; (8000810 <WIZCHIP_READ_BUF+0xbc>)
 8000770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000772:	2b00      	cmp	r3, #0
 8000774:	d003      	beq.n	800077e <WIZCHIP_READ_BUF+0x2a>
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <WIZCHIP_READ_BUF+0xbc>)
 8000778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800077a:	2b00      	cmp	r3, #0
 800077c:	d126      	bne.n	80007cc <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800077e:	4b24      	ldr	r3, [pc, #144]	; (8000810 <WIZCHIP_READ_BUF+0xbc>)
 8000780:	6a1b      	ldr	r3, [r3, #32]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	0c12      	lsrs	r2, r2, #16
 8000786:	b2d2      	uxtb	r2, r2
 8000788:	4610      	mov	r0, r2
 800078a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800078c:	4b20      	ldr	r3, [pc, #128]	; (8000810 <WIZCHIP_READ_BUF+0xbc>)
 800078e:	6a1b      	ldr	r3, [r3, #32]
 8000790:	68fa      	ldr	r2, [r7, #12]
 8000792:	0a12      	lsrs	r2, r2, #8
 8000794:	b2d2      	uxtb	r2, r2
 8000796:	4610      	mov	r0, r2
 8000798:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800079a:	4b1d      	ldr	r3, [pc, #116]	; (8000810 <WIZCHIP_READ_BUF+0xbc>)
 800079c:	6a1b      	ldr	r3, [r3, #32]
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	4610      	mov	r0, r2
 80007a4:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	82fb      	strh	r3, [r7, #22]
 80007aa:	e00a      	b.n	80007c2 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 80007ac:	4b18      	ldr	r3, [pc, #96]	; (8000810 <WIZCHIP_READ_BUF+0xbc>)
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	8afa      	ldrh	r2, [r7, #22]
 80007b2:	68b9      	ldr	r1, [r7, #8]
 80007b4:	188c      	adds	r4, r1, r2
 80007b6:	4798      	blx	r3
 80007b8:	4603      	mov	r3, r0
 80007ba:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 80007bc:	8afb      	ldrh	r3, [r7, #22]
 80007be:	3301      	adds	r3, #1
 80007c0:	82fb      	strh	r3, [r7, #22]
 80007c2:	8afa      	ldrh	r2, [r7, #22]
 80007c4:	88fb      	ldrh	r3, [r7, #6]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d3f0      	bcc.n	80007ac <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80007ca:	e017      	b.n	80007fc <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	0c1b      	lsrs	r3, r3, #16
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	0a1b      	lsrs	r3, r3, #8
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80007e2:	4b0b      	ldr	r3, [pc, #44]	; (8000810 <WIZCHIP_READ_BUF+0xbc>)
 80007e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007e6:	f107 0210 	add.w	r2, r7, #16
 80007ea:	2103      	movs	r1, #3
 80007ec:	4610      	mov	r0, r2
 80007ee:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 80007f0:	4b07      	ldr	r3, [pc, #28]	; (8000810 <WIZCHIP_READ_BUF+0xbc>)
 80007f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f4:	88fa      	ldrh	r2, [r7, #6]
 80007f6:	4611      	mov	r1, r2
 80007f8:	68b8      	ldr	r0, [r7, #8]
 80007fa:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <WIZCHIP_READ_BUF+0xbc>)
 80007fe:	699b      	ldr	r3, [r3, #24]
 8000800:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000802:	4b03      	ldr	r3, [pc, #12]	; (8000810 <WIZCHIP_READ_BUF+0xbc>)
 8000804:	691b      	ldr	r3, [r3, #16]
 8000806:	4798      	blx	r3
}
 8000808:	bf00      	nop
 800080a:	371c      	adds	r7, #28
 800080c:	46bd      	mov	sp, r7
 800080e:	bd90      	pop	{r4, r7, pc}
 8000810:	2000001c 	.word	0x2000001c

08000814 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	4613      	mov	r3, r2
 8000820:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000822:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000828:	4b29      	ldr	r3, [pc, #164]	; (80008d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000836:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800083a:	2b00      	cmp	r3, #0
 800083c:	d126      	bne.n	800088c <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 800083e:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <WIZCHIP_WRITE_BUF+0xbc>)
 8000840:	6a1b      	ldr	r3, [r3, #32]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	0c12      	lsrs	r2, r2, #16
 8000846:	b2d2      	uxtb	r2, r2
 8000848:	4610      	mov	r0, r2
 800084a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 800084c:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800084e:	6a1b      	ldr	r3, [r3, #32]
 8000850:	68fa      	ldr	r2, [r7, #12]
 8000852:	0a12      	lsrs	r2, r2, #8
 8000854:	b2d2      	uxtb	r2, r2
 8000856:	4610      	mov	r0, r2
 8000858:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800085c:	6a1b      	ldr	r3, [r3, #32]
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	b2d2      	uxtb	r2, r2
 8000862:	4610      	mov	r0, r2
 8000864:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8000866:	2300      	movs	r3, #0
 8000868:	82fb      	strh	r3, [r7, #22]
 800086a:	e00a      	b.n	8000882 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <WIZCHIP_WRITE_BUF+0xbc>)
 800086e:	6a1b      	ldr	r3, [r3, #32]
 8000870:	8afa      	ldrh	r2, [r7, #22]
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	440a      	add	r2, r1
 8000876:	7812      	ldrb	r2, [r2, #0]
 8000878:	4610      	mov	r0, r2
 800087a:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800087c:	8afb      	ldrh	r3, [r7, #22]
 800087e:	3301      	adds	r3, #1
 8000880:	82fb      	strh	r3, [r7, #22]
 8000882:	8afa      	ldrh	r2, [r7, #22]
 8000884:	88fb      	ldrh	r3, [r7, #6]
 8000886:	429a      	cmp	r2, r3
 8000888:	d3f0      	bcc.n	800086c <WIZCHIP_WRITE_BUF+0x58>
 800088a:	e017      	b.n	80008bc <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	0c1b      	lsrs	r3, r3, #16
 8000890:	b2db      	uxtb	r3, r3
 8000892:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	0a1b      	lsrs	r3, r3, #8
 8000898:	b2db      	uxtb	r3, r3
 800089a:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <WIZCHIP_WRITE_BUF+0xbc>)
 80008a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a6:	f107 0210 	add.w	r2, r7, #16
 80008aa:	2103      	movs	r1, #3
 80008ac:	4610      	mov	r0, r2
 80008ae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <WIZCHIP_WRITE_BUF+0xbc>)
 80008b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008b4:	88fa      	ldrh	r2, [r7, #6]
 80008b6:	4611      	mov	r1, r2
 80008b8:	68b8      	ldr	r0, [r7, #8]
 80008ba:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <WIZCHIP_WRITE_BUF+0xbc>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80008c2:	4b03      	ldr	r3, [pc, #12]	; (80008d0 <WIZCHIP_WRITE_BUF+0xbc>)
 80008c4:	691b      	ldr	r3, [r3, #16]
 80008c6:	4798      	blx	r3
}
 80008c8:	bf00      	nop
 80008ca:	3718      	adds	r7, #24
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	2000001c 	.word	0x2000001c

080008d4 <wizchip_select>:
#include "wizchip_conf.h"
#include "stdio.h"

extern SPI_HandleTypeDef hspi1;

void wizchip_select(void){
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2102      	movs	r1, #2
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <wizchip_select+0x14>)
 80008de:	f001 f951 	bl	8001b84 <HAL_GPIO_WritePin>
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40010800 	.word	0x40010800

080008ec <wizchip_deselect>:

void wizchip_deselect(void){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2102      	movs	r1, #2
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <wizchip_deselect+0x14>)
 80008f6:	f001 f945 	bl	8001b84 <HAL_GPIO_WritePin>
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40010800 	.word	0x40010800

08000904 <wizchip_read>:
// Single byte read function
uint8_t wizchip_read(void) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
    uint8_t rbuf;
    HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 800090a:	1df9      	adds	r1, r7, #7
 800090c:	f04f 33ff 	mov.w	r3, #4294967295
 8000910:	2201      	movs	r2, #1
 8000912:	4804      	ldr	r0, [pc, #16]	; (8000924 <wizchip_read+0x20>)
 8000914:	f001 ff19 	bl	800274a <HAL_SPI_Receive>
    return rbuf;
 8000918:	79fb      	ldrb	r3, [r7, #7]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200000c8 	.word	0x200000c8

08000928 <wizchip_write>:

// Single byte write function
void wizchip_write(uint8_t b) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 8000932:	1df9      	adds	r1, r7, #7
 8000934:	f04f 33ff 	mov.w	r3, #4294967295
 8000938:	2201      	movs	r2, #1
 800093a:	4803      	ldr	r0, [pc, #12]	; (8000948 <wizchip_write+0x20>)
 800093c:	f001 fdc2 	bl	80024c4 <HAL_SPI_Transmit>
}
 8000940:	bf00      	nop
 8000942:	3708      	adds	r7, #8
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000c8 	.word	0x200000c8

0800094c <wizchip_read_burst>:

// Read burst function
void wizchip_read_burst(uint8_t* pBuf, uint16_t len) {
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < len; i++) {
 8000958:	2300      	movs	r3, #0
 800095a:	81fb      	strh	r3, [r7, #14]
 800095c:	e009      	b.n	8000972 <wizchip_read_burst+0x26>
        pBuf[i] = wizchip_read();
 800095e:	89fb      	ldrh	r3, [r7, #14]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	18d4      	adds	r4, r2, r3
 8000964:	f7ff ffce 	bl	8000904 <wizchip_read>
 8000968:	4603      	mov	r3, r0
 800096a:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < len; i++) {
 800096c:	89fb      	ldrh	r3, [r7, #14]
 800096e:	3301      	adds	r3, #1
 8000970:	81fb      	strh	r3, [r7, #14]
 8000972:	89fa      	ldrh	r2, [r7, #14]
 8000974:	887b      	ldrh	r3, [r7, #2]
 8000976:	429a      	cmp	r2, r3
 8000978:	d3f1      	bcc.n	800095e <wizchip_read_burst+0x12>
    }
}
 800097a:	bf00      	nop
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bd90      	pop	{r4, r7, pc}

08000984 <wizchip_write_burst>:

// Write burst function
void wizchip_write_burst(uint8_t* pBuf, uint16_t len) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < len; i++) {
 8000990:	2300      	movs	r3, #0
 8000992:	81fb      	strh	r3, [r7, #14]
 8000994:	e009      	b.n	80009aa <wizchip_write_burst+0x26>
        wizchip_write(pBuf[i]);
 8000996:	89fb      	ldrh	r3, [r7, #14]
 8000998:	687a      	ldr	r2, [r7, #4]
 800099a:	4413      	add	r3, r2
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4618      	mov	r0, r3
 80009a0:	f7ff ffc2 	bl	8000928 <wizchip_write>
    for (uint16_t i = 0; i < len; i++) {
 80009a4:	89fb      	ldrh	r3, [r7, #14]
 80009a6:	3301      	adds	r3, #1
 80009a8:	81fb      	strh	r3, [r7, #14]
 80009aa:	89fa      	ldrh	r2, [r7, #14]
 80009ac:	887b      	ldrh	r3, [r7, #2]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d3f1      	bcc.n	8000996 <wizchip_write_burst+0x12>
    }
}
 80009b2:	bf00      	nop
 80009b4:	bf00      	nop
 80009b6:	3710      	adds	r7, #16
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}

080009bc <W5500Init>:

void W5500Init(){
 80009bc:	b590      	push	{r4, r7, lr}
 80009be:	b087      	sub	sp, #28
 80009c0:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8]={{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 80009c2:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <W5500Init+0x80>)
 80009c4:	1d3c      	adds	r4, r7, #4
 80009c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80009c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//Chip Select high by default
 80009cc:	2201      	movs	r2, #1
 80009ce:	2102      	movs	r1, #2
 80009d0:	481b      	ldr	r0, [pc, #108]	; (8000a40 <W5500Init+0x84>)
 80009d2:	f001 f8d7 	bl	8001b84 <HAL_GPIO_WritePin>

	//send pulse on reset pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2101      	movs	r1, #1
 80009da:	4819      	ldr	r0, [pc, #100]	; (8000a40 <W5500Init+0x84>)
 80009dc:	f001 f8d2 	bl	8001b84 <HAL_GPIO_WritePin>
	tmp=0xff;
 80009e0:	23ff      	movs	r3, #255	; 0xff
 80009e2:	75fb      	strb	r3, [r7, #23]
	while(tmp--);//small delay
 80009e4:	bf00      	nop
 80009e6:	7dfb      	ldrb	r3, [r7, #23]
 80009e8:	1e5a      	subs	r2, r3, #1
 80009ea:	75fa      	strb	r2, [r7, #23]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1fa      	bne.n	80009e6 <W5500Init+0x2a>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2101      	movs	r1, #1
 80009f4:	4812      	ldr	r0, [pc, #72]	; (8000a40 <W5500Init+0x84>)
 80009f6:	f001 f8c5 	bl	8001b84 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 80009fa:	4912      	ldr	r1, [pc, #72]	; (8000a44 <W5500Init+0x88>)
 80009fc:	4812      	ldr	r0, [pc, #72]	; (8000a48 <W5500Init+0x8c>)
 80009fe:	f000 f88b 	bl	8000b18 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8000a02:	4912      	ldr	r1, [pc, #72]	; (8000a4c <W5500Init+0x90>)
 8000a04:	4812      	ldr	r0, [pc, #72]	; (8000a50 <W5500Init+0x94>)
 8000a06:	f000 f8ab 	bl	8000b60 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_read_burst, wizchip_write_burst);
 8000a0a:	4912      	ldr	r1, [pc, #72]	; (8000a54 <W5500Init+0x98>)
 8000a0c:	4812      	ldr	r0, [pc, #72]	; (8000a58 <W5500Init+0x9c>)
 8000a0e:	f000 f8d3 	bl	8000bb8 <reg_wizchip_spiburst_cbfunc>

	if(ctlwizchip(CW_INIT_WIZCHIP, (void*)memsize)==-1){
 8000a12:	1d3b      	adds	r3, r7, #4
 8000a14:	4619      	mov	r1, r3
 8000a16:	2001      	movs	r0, #1
 8000a18:	f000 f8fa 	bl	8000c10 <ctlwizchip>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a22:	d103      	bne.n	8000a2c <W5500Init+0x70>
		printf("wizchip Initialization failed\r\n");
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <W5500Init+0xa0>)
 8000a26:	f002 fb67 	bl	80030f8 <puts>
		while(1);
 8000a2a:	e7fe      	b.n	8000a2a <W5500Init+0x6e>
	}
	printf("wizchip initialization success\r\n");
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <W5500Init+0xa4>)
 8000a2e:	f002 fb63 	bl	80030f8 <puts>

}
 8000a32:	bf00      	nop
 8000a34:	371c      	adds	r7, #28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd90      	pop	{r4, r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	0800386c 	.word	0x0800386c
 8000a40:	40010800 	.word	0x40010800
 8000a44:	080008ed 	.word	0x080008ed
 8000a48:	080008d5 	.word	0x080008d5
 8000a4c:	08000929 	.word	0x08000929
 8000a50:	08000905 	.word	0x08000905
 8000a54:	08000985 	.word	0x08000985
 8000a58:	0800094d 	.word	0x0800094d
 8000a5c:	0800382c 	.word	0x0800382c
 8000a60:	0800384c 	.word	0x0800384c

08000a64 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr

08000a70 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	bf00      	nop
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr

08000a94 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bc80      	pop	{r7}
 8000aaa:	4770      	bx	lr

08000aac <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	70fb      	strb	r3, [r7, #3]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	78fa      	ldrb	r2, [r7, #3]
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	2300      	movs	r3, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr

08000ad6 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8000ad6:	b480      	push	{r7}
 8000ad8:	b083      	sub	sp, #12
 8000ada:	af00      	add	r7, sp, #0
 8000adc:	4603      	mov	r3, r0
 8000ade:	71fb      	strb	r3, [r7, #7]
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bc80      	pop	{r7}
 8000ae8:	4770      	bx	lr

08000aea <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8000aea:	b480      	push	{r7}
 8000aec:	b083      	sub	sp, #12
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
 8000af2:	460b      	mov	r3, r1
 8000af4:	807b      	strh	r3, [r7, #2]
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr

08000b00 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	807b      	strh	r3, [r7, #2]
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
	...

08000b18 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d002      	beq.n	8000b2e <reg_wizchip_cs_cbfunc+0x16>
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d106      	bne.n	8000b3c <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <reg_wizchip_cs_cbfunc+0x3c>)
 8000b30:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <reg_wizchip_cs_cbfunc+0x40>)
 8000b32:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8000b34:	4b07      	ldr	r3, [pc, #28]	; (8000b54 <reg_wizchip_cs_cbfunc+0x3c>)
 8000b36:	4a09      	ldr	r2, [pc, #36]	; (8000b5c <reg_wizchip_cs_cbfunc+0x44>)
 8000b38:	619a      	str	r2, [r3, #24]
 8000b3a:	e006      	b.n	8000b4a <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8000b3c:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <reg_wizchip_cs_cbfunc+0x3c>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8000b42:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <reg_wizchip_cs_cbfunc+0x3c>)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	6193      	str	r3, [r2, #24]
   }
}
 8000b48:	bf00      	nop
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	2000001c 	.word	0x2000001c
 8000b58:	08000a7d 	.word	0x08000a7d
 8000b5c:	08000a89 	.word	0x08000a89

08000b60 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8000b6a:	bf00      	nop
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <reg_wizchip_spi_cbfunc+0x4c>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d0f9      	beq.n	8000b6c <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d002      	beq.n	8000b84 <reg_wizchip_spi_cbfunc+0x24>
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d106      	bne.n	8000b92 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <reg_wizchip_spi_cbfunc+0x4c>)
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <reg_wizchip_spi_cbfunc+0x50>)
 8000b88:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <reg_wizchip_spi_cbfunc+0x4c>)
 8000b8c:	4a09      	ldr	r2, [pc, #36]	; (8000bb4 <reg_wizchip_spi_cbfunc+0x54>)
 8000b8e:	621a      	str	r2, [r3, #32]
 8000b90:	e006      	b.n	8000ba0 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8000b92:	4a06      	ldr	r2, [pc, #24]	; (8000bac <reg_wizchip_spi_cbfunc+0x4c>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8000b98:	4a04      	ldr	r2, [pc, #16]	; (8000bac <reg_wizchip_spi_cbfunc+0x4c>)
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	6213      	str	r3, [r2, #32]
   }
}
 8000b9e:	bf00      	nop
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	2000001c 	.word	0x2000001c
 8000bb0:	08000ac9 	.word	0x08000ac9
 8000bb4:	08000ad7 	.word	0x08000ad7

08000bb8 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8000bc2:	bf00      	nop
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0f9      	beq.n	8000bc4 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d002      	beq.n	8000bdc <reg_wizchip_spiburst_cbfunc+0x24>
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d106      	bne.n	8000bea <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <reg_wizchip_spiburst_cbfunc+0x50>)
 8000be0:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8000be4:	4a09      	ldr	r2, [pc, #36]	; (8000c0c <reg_wizchip_spiburst_cbfunc+0x54>)
 8000be6:	629a      	str	r2, [r3, #40]	; 0x28
 8000be8:	e006      	b.n	8000bf8 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8000bea:	4a06      	ldr	r2, [pc, #24]	; (8000c04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8000bf0:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <reg_wizchip_spiburst_cbfunc+0x4c>)
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bc80      	pop	{r7}
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	2000001c 	.word	0x2000001c
 8000c08:	08000aeb 	.word	0x08000aeb
 8000c0c:	08000b01 	.word	0x08000b01

08000c10 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b087      	sub	sp, #28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	2300      	movs	r3, #0
 8000c26:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	2b0f      	cmp	r3, #15
 8000c2c:	f200 80c7 	bhi.w	8000dbe <ctlwizchip+0x1ae>
 8000c30:	a201      	add	r2, pc, #4	; (adr r2, 8000c38 <ctlwizchip+0x28>)
 8000c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c36:	bf00      	nop
 8000c38:	08000c79 	.word	0x08000c79
 8000c3c:	08000c7f 	.word	0x08000c7f
 8000c40:	08000cab 	.word	0x08000cab
 8000c44:	08000c9f 	.word	0x08000c9f
 8000c48:	08000cb9 	.word	0x08000cb9
 8000c4c:	08000cc5 	.word	0x08000cc5
 8000c50:	08000cd3 	.word	0x08000cd3
 8000c54:	08000cf9 	.word	0x08000cf9
 8000c58:	08000d1f 	.word	0x08000d1f
 8000c5c:	08000d63 	.word	0x08000d63
 8000c60:	08000d69 	.word	0x08000d69
 8000c64:	08000d71 	.word	0x08000d71
 8000c68:	08000dc5 	.word	0x08000dc5
 8000c6c:	08000d79 	.word	0x08000d79
 8000c70:	08000d87 	.word	0x08000d87
 8000c74:	08000da3 	.word	0x08000da3
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8000c78:	f000 f8ea 	bl	8000e50 <wizchip_sw_reset>
         break;
 8000c7c:	e0a3      	b.n	8000dc6 <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d004      	beq.n	8000c8e <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	3308      	adds	r3, #8
 8000c8c:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	693a      	ldr	r2, [r7, #16]
 8000c92:	4611      	mov	r1, r2
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f927 	bl	8000ee8 <wizchip_init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	e094      	b.n	8000dc8 <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	881b      	ldrh	r3, [r3, #0]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f9ac 	bl	8001000 <wizchip_clrinterrupt>
         break;
 8000ca8:	e08d      	b.n	8000dc6 <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8000caa:	f000 f9dd 	bl	8001068 <wizchip_getinterrupt>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	801a      	strh	r2, [r3, #0]
         break;
 8000cb6:	e086      	b.n	8000dc6 <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	881b      	ldrh	r3, [r3, #0]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f000 f9f8 	bl	80010b2 <wizchip_setinterruptmask>
         break;         
 8000cc2:	e080      	b.n	8000dc6 <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 8000cc4:	f000 fa10 	bl	80010e8 <wizchip_getinterruptmask>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	461a      	mov	r2, r3
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	801a      	strh	r2, [r3, #0]
         break;
 8000cd0:	e079      	b.n	8000dc6 <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	881b      	ldrh	r3, [r3, #0]
 8000cd6:	0a1b      	lsrs	r3, r3, #8
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8000ce2:	f7ff fce9 	bl	80006b8 <WIZCHIP_WRITE>
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4619      	mov	r1, r3
 8000cee:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000cf2:	f7ff fce1 	bl	80006b8 <WIZCHIP_WRITE>
         break;
 8000cf6:	e066      	b.n	8000dc6 <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8000cf8:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8000cfc:	f7ff fc90 	bl	8000620 <WIZCHIP_READ>
 8000d00:	4603      	mov	r3, r0
 8000d02:	b29b      	uxth	r3, r3
 8000d04:	021b      	lsls	r3, r3, #8
 8000d06:	b29c      	uxth	r4, r3
 8000d08:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000d0c:	f7ff fc88 	bl	8000620 <WIZCHIP_READ>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4423      	add	r3, r4
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	801a      	strh	r2, [r3, #0]
         break;
 8000d1c:	e053      	b.n	8000dc6 <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8000d1e:	4b2c      	ldr	r3, [pc, #176]	; (8000dd0 <ctlwizchip+0x1c0>)
 8000d20:	789a      	ldrb	r2, [r3, #2]
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	4a29      	ldr	r2, [pc, #164]	; (8000dd0 <ctlwizchip+0x1c0>)
 8000d2c:	78d2      	ldrb	r2, [r2, #3]
 8000d2e:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	3302      	adds	r3, #2
 8000d34:	4a26      	ldr	r2, [pc, #152]	; (8000dd0 <ctlwizchip+0x1c0>)
 8000d36:	7912      	ldrb	r2, [r2, #4]
 8000d38:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	3303      	adds	r3, #3
 8000d3e:	4a24      	ldr	r2, [pc, #144]	; (8000dd0 <ctlwizchip+0x1c0>)
 8000d40:	7952      	ldrb	r2, [r2, #5]
 8000d42:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	3304      	adds	r3, #4
 8000d48:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <ctlwizchip+0x1c0>)
 8000d4a:	7992      	ldrb	r2, [r2, #6]
 8000d4c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	3305      	adds	r3, #5
 8000d52:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <ctlwizchip+0x1c0>)
 8000d54:	79d2      	ldrb	r2, [r2, #7]
 8000d56:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	3306      	adds	r3, #6
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
         break;
 8000d60:	e031      	b.n	8000dc6 <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8000d62:	f000 fa13 	bl	800118c <wizphy_reset>
         break;
 8000d66:	e02e      	b.n	8000dc6 <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 8000d68:	6838      	ldr	r0, [r7, #0]
 8000d6a:	f000 fa36 	bl	80011da <wizphy_setphyconf>
         break;
 8000d6e:	e02a      	b.n	8000dc6 <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8000d70:	6838      	ldr	r0, [r7, #0]
 8000d72:	f000 fa75 	bl	8001260 <wizphy_getphyconf>
         break;
 8000d76:	e026      	b.n	8000dc6 <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f000 fad9 	bl	8001334 <wizphy_setphypmode>
 8000d82:	4603      	mov	r3, r0
 8000d84:	e020      	b.n	8000dc8 <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 8000d86:	f000 f9e8 	bl	800115a <wizphy_getphypmode>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8000d8e:	7dfb      	ldrb	r3, [r7, #23]
 8000d90:	2bff      	cmp	r3, #255	; 0xff
 8000d92:	d102      	bne.n	8000d9a <ctlwizchip+0x18a>
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
 8000d98:	e016      	b.n	8000dc8 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	7dfa      	ldrb	r2, [r7, #23]
 8000d9e:	701a      	strb	r2, [r3, #0]
         break;
 8000da0:	e011      	b.n	8000dc6 <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 8000da2:	f000 f9c4 	bl	800112e <wizphy_getphylink>
 8000da6:	4603      	mov	r3, r0
 8000da8:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8000daa:	7dfb      	ldrb	r3, [r7, #23]
 8000dac:	2bff      	cmp	r3, #255	; 0xff
 8000dae:	d102      	bne.n	8000db6 <ctlwizchip+0x1a6>
 8000db0:	f04f 33ff 	mov.w	r3, #4294967295
 8000db4:	e008      	b.n	8000dc8 <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	7dfa      	ldrb	r2, [r7, #23]
 8000dba:	701a      	strb	r2, [r3, #0]
         break;
 8000dbc:	e003      	b.n	8000dc6 <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e001      	b.n	8000dc8 <ctlwizchip+0x1b8>
         break;
 8000dc4:	bf00      	nop
   }
   return 0;
 8000dc6:	2300      	movs	r3, #0
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	371c      	adds	r7, #28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	2000001c 	.word	0x2000001c

08000dd4 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2b05      	cmp	r3, #5
 8000de4:	d82c      	bhi.n	8000e40 <ctlnetwork+0x6c>
 8000de6:	a201      	add	r2, pc, #4	; (adr r2, 8000dec <ctlnetwork+0x18>)
 8000de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dec:	08000e05 	.word	0x08000e05
 8000df0:	08000e0d 	.word	0x08000e0d
 8000df4:	08000e15 	.word	0x08000e15
 8000df8:	08000e23 	.word	0x08000e23
 8000dfc:	08000e31 	.word	0x08000e31
 8000e00:	08000e39 	.word	0x08000e39
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8000e04:	6838      	ldr	r0, [r7, #0]
 8000e06:	f000 fadf 	bl	80013c8 <wizchip_setnetinfo>
         break;
 8000e0a:	e01c      	b.n	8000e46 <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8000e0c:	6838      	ldr	r0, [r7, #0]
 8000e0e:	f000 fb1b 	bl	8001448 <wizchip_getnetinfo>
         break;
 8000e12:	e018      	b.n	8000e46 <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 fb55 	bl	80014c8 <wizchip_setnetmode>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	e012      	b.n	8000e48 <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8000e22:	f000 fb73 	bl	800150c <wizchip_getnetmode>
 8000e26:	4603      	mov	r3, r0
 8000e28:	461a      	mov	r2, r3
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	701a      	strb	r2, [r3, #0]
         break;
 8000e2e:	e00a      	b.n	8000e46 <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8000e30:	6838      	ldr	r0, [r7, #0]
 8000e32:	f000 fb73 	bl	800151c <wizchip_settimeout>
         break;
 8000e36:	e006      	b.n	8000e46 <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 8000e38:	6838      	ldr	r0, [r7, #0]
 8000e3a:	f000 fb90 	bl	800155e <wizchip_gettimeout>
         break;
 8000e3e:	e002      	b.n	8000e46 <ctlnetwork+0x72>
      default:
         return -1;
 8000e40:	f04f 33ff 	mov.w	r3, #4294967295
 8000e44:	e000      	b.n	8000e48 <ctlnetwork+0x74>
   }
   return 0;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2206      	movs	r2, #6
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000e60:	f7ff fc78 	bl	8000754 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2204      	movs	r2, #4
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e70:	f7ff fc70 	bl	8000754 <WIZCHIP_READ_BUF>
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	2204      	movs	r2, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000e80:	f7ff fc68 	bl	8000754 <WIZCHIP_READ_BUF>
 8000e84:	f107 030c 	add.w	r3, r7, #12
 8000e88:	2204      	movs	r2, #4
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000e90:	f7ff fc60 	bl	8000754 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8000e94:	2180      	movs	r1, #128	; 0x80
 8000e96:	2000      	movs	r0, #0
 8000e98:	f7ff fc0e 	bl	80006b8 <WIZCHIP_WRITE>
   getMR(); // for delay
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	f7ff fbbf 	bl	8000620 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2206      	movs	r2, #6
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8000eac:	f7ff fcb2 	bl	8000814 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2204      	movs	r2, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ebc:	f7ff fcaa 	bl	8000814 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000ecc:	f7ff fca2 	bl	8000814 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	2204      	movs	r2, #4
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000edc:	f7ff fc9a 	bl	8000814 <WIZCHIP_WRITE_BUF>
}
 8000ee0:	bf00      	nop
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 8000ef6:	f7ff ffab 	bl	8000e50 <wizchip_sw_reset>
   if(txsize)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d03b      	beq.n	8000f78 <wizchip_init+0x90>
   {
      tmp = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000f04:	2300      	movs	r3, #0
 8000f06:	73fb      	strb	r3, [r7, #15]
 8000f08:	e015      	b.n	8000f36 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8000f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4413      	add	r3, r2
 8000f12:	781a      	ldrb	r2, [r3, #0]
 8000f14:	7bbb      	ldrb	r3, [r7, #14]
 8000f16:	4413      	add	r3, r2
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8000f1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f20:	2b10      	cmp	r3, #16
 8000f22:	dd02      	ble.n	8000f2a <wizchip_init+0x42>
 8000f24:	f04f 33ff 	mov.w	r3, #4294967295
 8000f28:	e066      	b.n	8000ff8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	3301      	adds	r3, #1
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	73fb      	strb	r3, [r7, #15]
 8000f36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f3a:	2b07      	cmp	r3, #7
 8000f3c:	dde5      	ble.n	8000f0a <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000f3e:	2300      	movs	r3, #0
 8000f40:	73fb      	strb	r3, [r7, #15]
 8000f42:	e015      	b.n	8000f70 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8000f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	00db      	lsls	r3, r3, #3
 8000f4e:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000f52:	4618      	mov	r0, r3
 8000f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fbaa 	bl	80006b8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	73fb      	strb	r3, [r7, #15]
 8000f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f74:	2b07      	cmp	r3, #7
 8000f76:	dde5      	ble.n	8000f44 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d03b      	beq.n	8000ff6 <wizchip_init+0x10e>
   {
      tmp = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
 8000f86:	e015      	b.n	8000fb4 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 8000f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8c:	683a      	ldr	r2, [r7, #0]
 8000f8e:	4413      	add	r3, r2
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	4413      	add	r3, r2
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8000f9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000f9e:	2b10      	cmp	r3, #16
 8000fa0:	dd02      	ble.n	8000fa8 <wizchip_init+0xc0>
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	e027      	b.n	8000ff8 <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000fa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	73fb      	strb	r3, [r7, #15]
 8000fb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb8:	2b07      	cmp	r3, #7
 8000fba:	dde5      	ble.n	8000f88 <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	73fb      	strb	r3, [r7, #15]
 8000fc0:	e015      	b.n	8000fee <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	3301      	adds	r3, #1
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd6:	683a      	ldr	r2, [r7, #0]
 8000fd8:	4413      	add	r3, r2
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f7ff fb6b 	bl	80006b8 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8000fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	3301      	adds	r3, #1
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff2:	2b07      	cmp	r3, #7
 8000ff4:	dde5      	ble.n	8000fc2 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 800100e:	88fb      	ldrh	r3, [r7, #6]
 8001010:	0a1b      	lsrs	r3, r3, #8
 8001012:	b29b      	uxth	r3, r3
 8001014:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	f023 030f 	bic.w	r3, r3, #15
 800101c:	b2db      	uxtb	r3, r3
 800101e:	4619      	mov	r1, r3
 8001020:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001024:	f7ff fb48 	bl	80006b8 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 8001028:	2300      	movs	r3, #0
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	e014      	b.n	8001058 <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 800102e:	7bba      	ldrb	r2, [r7, #14]
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	fa42 f303 	asr.w	r3, r2, r3
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	2b00      	cmp	r3, #0
 800103c:	d009      	beq.n	8001052 <wizchip_clrinterrupt+0x52>
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	3301      	adds	r3, #1
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800104a:	211f      	movs	r1, #31
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fb33 	bl	80006b8 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	3301      	adds	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	2b07      	cmp	r3, #7
 800105c:	d9e7      	bls.n	800102e <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 800106e:	2300      	movs	r3, #0
 8001070:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800107a:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 800107e:	f7ff facf 	bl	8000620 <WIZCHIP_READ>
 8001082:	4603      	mov	r3, r0
 8001084:	f023 030f 	bic.w	r3, r3, #15
 8001088:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800108a:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 800108e:	f7ff fac7 	bl	8000620 <WIZCHIP_READ>
 8001092:	4603      	mov	r3, r0
 8001094:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800109a:	88bb      	ldrh	r3, [r7, #4]
 800109c:	021b      	lsls	r3, r3, #8
 800109e:	b29a      	uxth	r2, r3
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4413      	add	r3, r2
 80010a6:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80010a8:	88bb      	ldrh	r3, [r7, #4]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	4603      	mov	r3, r0
 80010ba:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80010c0:	88fb      	ldrh	r3, [r7, #6]
 80010c2:	0a1b      	lsrs	r3, r3, #8
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80010c8:	7bfb      	ldrb	r3, [r7, #15]
 80010ca:	4619      	mov	r1, r3
 80010cc:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80010d0:	f7ff faf2 	bl	80006b8 <WIZCHIP_WRITE>
   setSIMR(simr);
 80010d4:	7bbb      	ldrb	r3, [r7, #14]
 80010d6:	4619      	mov	r1, r3
 80010d8:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80010dc:	f7ff faec 	bl	80006b8 <WIZCHIP_WRITE>
#endif   
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80010f2:	2300      	movs	r3, #0
 80010f4:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80010f6:	2300      	movs	r3, #0
 80010f8:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80010fa:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80010fe:	f7ff fa8f 	bl	8000620 <WIZCHIP_READ>
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8001106:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 800110a:	f7ff fa89 	bl	8000620 <WIZCHIP_READ>
 800110e:	4603      	mov	r3, r0
 8001110:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8001112:	79bb      	ldrb	r3, [r7, #6]
 8001114:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8001116:	88bb      	ldrh	r3, [r7, #4]
 8001118:	021b      	lsls	r3, r3, #8
 800111a:	b29a      	uxth	r2, r3
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	b29b      	uxth	r3, r3
 8001120:	4413      	add	r3, r2
 8001122:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001124:	88bb      	ldrh	r3, [r7, #4]
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8001134:	2300      	movs	r3, #0
 8001136:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8001138:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800113c:	f7ff fa70 	bl	8000620 <WIZCHIP_READ>
 8001140:	4603      	mov	r3, r0
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800114a:	2301      	movs	r3, #1
 800114c:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8001164:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001168:	f7ff fa5a 	bl	8000620 <WIZCHIP_READ>
 800116c:	4603      	mov	r3, r0
 800116e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001172:	2b30      	cmp	r3, #48	; 0x30
 8001174:	d102      	bne.n	800117c <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8001176:	2301      	movs	r3, #1
 8001178:	71fb      	strb	r3, [r7, #7]
 800117a:	e001      	b.n	8001180 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 800117c:	2300      	movs	r3, #0
 800117e:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8001192:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001196:	f7ff fa43 	bl	8000620 <WIZCHIP_READ>
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011a4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	4619      	mov	r1, r3
 80011aa:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80011ae:	f7ff fa83 	bl	80006b8 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 80011b2:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80011b6:	f7ff fa33 	bl	8000620 <WIZCHIP_READ>
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011c4:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	4619      	mov	r1, r3
 80011ca:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 80011ce:	f7ff fa73 	bl	80006b8 <WIZCHIP_WRITE>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80011e2:	2300      	movs	r3, #0
 80011e4:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d104      	bne.n	80011f8 <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 80011ee:	7bfb      	ldrb	r3, [r7, #15]
 80011f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	e003      	b.n	8001200 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011fe:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	785b      	ldrb	r3, [r3, #1]
 8001204:	2b01      	cmp	r3, #1
 8001206:	d104      	bne.n	8001212 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800120e:	73fb      	strb	r3, [r7, #15]
 8001210:	e019      	b.n	8001246 <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	78db      	ldrb	r3, [r3, #3]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10d      	bne.n	8001236 <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	789b      	ldrb	r3, [r3, #2]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d104      	bne.n	800122c <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	f043 0318 	orr.w	r3, r3, #24
 8001228:	73fb      	strb	r3, [r7, #15]
 800122a:	e00c      	b.n	8001246 <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	f043 0308 	orr.w	r3, r3, #8
 8001232:	73fb      	strb	r3, [r7, #15]
 8001234:	e007      	b.n	8001246 <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	789b      	ldrb	r3, [r3, #2]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d103      	bne.n	8001246 <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	f043 0310 	orr.w	r3, r3, #16
 8001244:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	4619      	mov	r1, r3
 800124a:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 800124e:	f7ff fa33 	bl	80006b8 <WIZCHIP_WRITE>
   wizphy_reset();
 8001252:	f7ff ff9b 	bl	800118c <wizphy_reset>
}
 8001256:	bf00      	nop
 8001258:	3710      	adds	r7, #16
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 800126c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001270:	f7ff f9d6 	bl	8000620 <WIZCHIP_READ>
 8001274:	4603      	mov	r3, r0
 8001276:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	119b      	asrs	r3, r3, #6
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	b2da      	uxtb	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800128e:	2b20      	cmp	r3, #32
 8001290:	d001      	beq.n	8001296 <wizphy_getphyconf+0x36>
 8001292:	2b38      	cmp	r3, #56	; 0x38
 8001294:	d103      	bne.n	800129e <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2201      	movs	r2, #1
 800129a:	705a      	strb	r2, [r3, #1]
         break;
 800129c:	e003      	b.n	80012a6 <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	705a      	strb	r2, [r3, #1]
         break;
 80012a4:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80012a6:	7bfb      	ldrb	r3, [r7, #15]
 80012a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012ac:	3b10      	subs	r3, #16
 80012ae:	2b10      	cmp	r3, #16
 80012b0:	bf8c      	ite	hi
 80012b2:	2201      	movhi	r2, #1
 80012b4:	2200      	movls	r2, #0
 80012b6:	b2d2      	uxtb	r2, r2
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d10f      	bne.n	80012dc <wizphy_getphyconf+0x7c>
 80012bc:	4a1b      	ldr	r2, [pc, #108]	; (800132c <wizphy_getphyconf+0xcc>)
 80012be:	fa22 f303 	lsr.w	r3, r2, r3
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	bf14      	ite	ne
 80012ca:	2301      	movne	r3, #1
 80012cc:	2300      	moveq	r3, #0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	709a      	strb	r2, [r3, #2]
         break;
 80012da:	e003      	b.n	80012e4 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	709a      	strb	r2, [r3, #2]
         break;
 80012e2:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80012ea:	3b08      	subs	r3, #8
 80012ec:	2b18      	cmp	r3, #24
 80012ee:	bf8c      	ite	hi
 80012f0:	2201      	movhi	r2, #1
 80012f2:	2200      	movls	r2, #0
 80012f4:	b2d2      	uxtb	r2, r2
 80012f6:	2a00      	cmp	r2, #0
 80012f8:	d10f      	bne.n	800131a <wizphy_getphyconf+0xba>
 80012fa:	4a0d      	ldr	r2, [pc, #52]	; (8001330 <wizphy_getphyconf+0xd0>)
 80012fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf14      	ite	ne
 8001308:	2301      	movne	r3, #1
 800130a:	2300      	moveq	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	70da      	strb	r2, [r3, #3]
         break;
 8001318:	e003      	b.n	8001322 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2200      	movs	r2, #0
 800131e:	70da      	strb	r2, [r3, #3]
         break;
 8001320:	bf00      	nop
   }
}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	00010101 	.word	0x00010101
 8001330:	01010001 	.word	0x01010001

08001334 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 800133e:	2300      	movs	r3, #0
 8001340:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8001342:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001346:	f7ff f96b 	bl	8000620 <WIZCHIP_READ>
 800134a:	4603      	mov	r3, r0
 800134c:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
 8001350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001354:	2b00      	cmp	r3, #0
 8001356:	d102      	bne.n	800135e <wizphy_setphypmode+0x2a>
 8001358:	f04f 33ff 	mov.w	r3, #4294967295
 800135c:	e030      	b.n	80013c0 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001364:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d104      	bne.n	8001376 <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 800136c:	7bfb      	ldrb	r3, [r7, #15]
 800136e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001372:	73fb      	strb	r3, [r7, #15]
 8001374:	e003      	b.n	800137e <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 800137c:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	4619      	mov	r1, r3
 8001382:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001386:	f7ff f997 	bl	80006b8 <WIZCHIP_WRITE>
   wizphy_reset();
 800138a:	f7ff feff 	bl	800118c <wizphy_reset>
   tmp = getPHYCFGR();
 800138e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001392:	f7ff f945 	bl	8000620 <WIZCHIP_READ>
 8001396:	4603      	mov	r3, r0
 8001398:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d106      	bne.n	80013ae <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
 80013a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d008      	beq.n	80013bc <wizphy_setphypmode+0x88>
 80013aa:	2300      	movs	r3, #0
 80013ac:	e008      	b.n	80013c0 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 80013ae:	7bfb      	ldrb	r3, [r7, #15]
 80013b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <wizphy_setphypmode+0x88>
 80013b8:	2300      	movs	r3, #0
 80013ba:	e001      	b.n	80013c0 <wizphy_setphypmode+0x8c>
   }
   return -1;
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2206      	movs	r2, #6
 80013d4:	4619      	mov	r1, r3
 80013d6:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80013da:	f7ff fa1b 	bl	8000814 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	330e      	adds	r3, #14
 80013e2:	2204      	movs	r2, #4
 80013e4:	4619      	mov	r1, r3
 80013e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80013ea:	f7ff fa13 	bl	8000814 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	330a      	adds	r3, #10
 80013f2:	2204      	movs	r2, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80013fa:	f7ff fa0b 	bl	8000814 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3306      	adds	r3, #6
 8001402:	2204      	movs	r2, #4
 8001404:	4619      	mov	r1, r3
 8001406:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800140a:	f7ff fa03 	bl	8000814 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7c9a      	ldrb	r2, [r3, #18]
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <wizchip_setnetinfo+0x78>)
 8001414:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7cda      	ldrb	r2, [r3, #19]
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <wizchip_setnetinfo+0x78>)
 800141c:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	7d1a      	ldrb	r2, [r3, #20]
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <wizchip_setnetinfo+0x78>)
 8001424:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	7d5a      	ldrb	r2, [r3, #21]
 800142a:	4b05      	ldr	r3, [pc, #20]	; (8001440 <wizchip_setnetinfo+0x78>)
 800142c:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	7d9a      	ldrb	r2, [r3, #22]
 8001432:	4b04      	ldr	r3, [pc, #16]	; (8001444 <wizchip_setnetinfo+0x7c>)
 8001434:	701a      	strb	r2, [r3, #0]
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000124 	.word	0x20000124
 8001444:	20000128 	.word	0x20000128

08001448 <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2206      	movs	r2, #6
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 6010 	mov.w	r0, #2304	; 0x900
 800145a:	f7ff f97b 	bl	8000754 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	330e      	adds	r3, #14
 8001462:	2204      	movs	r2, #4
 8001464:	4619      	mov	r1, r3
 8001466:	f44f 7080 	mov.w	r0, #256	; 0x100
 800146a:	f7ff f973 	bl	8000754 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	330a      	adds	r3, #10
 8001472:	2204      	movs	r2, #4
 8001474:	4619      	mov	r1, r3
 8001476:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 800147a:	f7ff f96b 	bl	8000754 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3306      	adds	r3, #6
 8001482:	2204      	movs	r2, #4
 8001484:	4619      	mov	r1, r3
 8001486:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 800148a:	f7ff f963 	bl	8000754 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <wizchip_getnetinfo+0x78>)
 8001490:	781a      	ldrb	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <wizchip_getnetinfo+0x78>)
 8001498:	785a      	ldrb	r2, [r3, #1]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <wizchip_getnetinfo+0x78>)
 80014a0:	789a      	ldrb	r2, [r3, #2]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <wizchip_getnetinfo+0x78>)
 80014a8:	78da      	ldrb	r2, [r3, #3]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <wizchip_getnetinfo+0x7c>)
 80014b0:	781a      	ldrb	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	759a      	strb	r2, [r3, #22]
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000124 	.word	0x20000124
 80014c4:	20000128 	.word	0x20000128

080014c8 <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <wizchip_setnetmode+0x1e>
 80014e0:	f04f 33ff 	mov.w	r3, #4294967295
 80014e4:	e00e      	b.n	8001504 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 80014e6:	2000      	movs	r0, #0
 80014e8:	f7ff f89a 	bl	8000620 <WIZCHIP_READ>
 80014ec:	4603      	mov	r3, r0
 80014ee:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	4619      	mov	r1, r3
 80014fc:	2000      	movs	r0, #0
 80014fe:	f7ff f8db 	bl	80006b8 <WIZCHIP_WRITE>
   return 0;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8001510:	2000      	movs	r0, #0
 8001512:	f7ff f885 	bl	8000620 <WIZCHIP_READ>
 8001516:	4603      	mov	r3, r0
}
 8001518:	4618      	mov	r0, r3
 800151a:	bd80      	pop	{r7, pc}

0800151c <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800152e:	f7ff f8c3 	bl	80006b8 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	885b      	ldrh	r3, [r3, #2]
 8001536:	0a1b      	lsrs	r3, r3, #8
 8001538:	b29b      	uxth	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	4619      	mov	r1, r3
 800153e:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001542:	f7ff f8b9 	bl	80006b8 <WIZCHIP_WRITE>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	885b      	ldrh	r3, [r3, #2]
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4619      	mov	r1, r3
 800154e:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001552:	f7ff f8b1 	bl	80006b8 <WIZCHIP_WRITE>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 800155e:	b590      	push	{r4, r7, lr}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8001566:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 800156a:	f7ff f859 	bl	8000620 <WIZCHIP_READ>
 800156e:	4603      	mov	r3, r0
 8001570:	461a      	mov	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8001576:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 800157a:	f7ff f851 	bl	8000620 <WIZCHIP_READ>
 800157e:	4603      	mov	r3, r0
 8001580:	b29b      	uxth	r3, r3
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	b29c      	uxth	r4, r3
 8001586:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 800158a:	f7ff f849 	bl	8000620 <WIZCHIP_READ>
 800158e:	4603      	mov	r3, r0
 8001590:	b29b      	uxth	r3, r3
 8001592:	4423      	add	r3, r4
 8001594:	b29a      	uxth	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	805a      	strh	r2, [r3, #2]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}
	...

080015a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015a4:	f7ff f836 	bl	8000614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a8:	480b      	ldr	r0, [pc, #44]	; (80015d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80015aa:	490c      	ldr	r1, [pc, #48]	; (80015dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80015ac:	4a0c      	ldr	r2, [pc, #48]	; (80015e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80015ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015b0:	e002      	b.n	80015b8 <LoopCopyDataInit>

080015b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b6:	3304      	adds	r3, #4

080015b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015bc:	d3f9      	bcc.n	80015b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015c0:	4c09      	ldr	r4, [pc, #36]	; (80015e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c4:	e001      	b.n	80015ca <LoopFillZerobss>

080015c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c8:	3204      	adds	r2, #4

080015ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015cc:	d3fb      	bcc.n	80015c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015ce:	f001 fec7 	bl	8003360 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015d2:	f7fe fdbb 	bl	800014c <main>
  bx lr
 80015d6:	4770      	bx	lr
  ldr r0, =_sdata
 80015d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015dc:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 80015e0:	080038a8 	.word	0x080038a8
  ldr r2, =_sbss
 80015e4:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 80015e8:	2000027c 	.word	0x2000027c

080015ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC1_2_IRQHandler>
	...

080015f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <HAL_Init+0x28>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a07      	ldr	r2, [pc, #28]	; (8001618 <HAL_Init+0x28>)
 80015fa:	f043 0310 	orr.w	r3, r3, #16
 80015fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001600:	2003      	movs	r0, #3
 8001602:	f000 f907 	bl	8001814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001606:	200f      	movs	r0, #15
 8001608:	f000 f808 	bl	800161c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800160c:	f7fe febe 	bl	800038c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40022000 	.word	0x40022000

0800161c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001624:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_InitTick+0x54>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_InitTick+0x58>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	4619      	mov	r1, r3
 800162e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001632:	fbb3 f3f1 	udiv	r3, r3, r1
 8001636:	fbb2 f3f3 	udiv	r3, r2, r3
 800163a:	4618      	mov	r0, r3
 800163c:	f000 f911 	bl	8001862 <HAL_SYSTICK_Config>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e00e      	b.n	8001668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b0f      	cmp	r3, #15
 800164e:	d80a      	bhi.n	8001666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001650:	2200      	movs	r2, #0
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	f04f 30ff 	mov.w	r0, #4294967295
 8001658:	f000 f8e7 	bl	800182a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800165c:	4a06      	ldr	r2, [pc, #24]	; (8001678 <HAL_InitTick+0x5c>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001662:	2300      	movs	r3, #0
 8001664:	e000      	b.n	8001668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000018 	.word	0x20000018
 8001674:	2000004c 	.word	0x2000004c
 8001678:	20000048 	.word	0x20000048

0800167c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001680:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_IncTick+0x1c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_IncTick+0x20>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4413      	add	r3, r2
 800168c:	4a03      	ldr	r2, [pc, #12]	; (800169c <HAL_IncTick+0x20>)
 800168e:	6013      	str	r3, [r2, #0]
}
 8001690:	bf00      	nop
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	2000004c 	.word	0x2000004c
 800169c:	2000012c 	.word	0x2000012c

080016a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return uwTick;
 80016a4:	4b02      	ldr	r3, [pc, #8]	; (80016b0 <HAL_GetTick+0x10>)
 80016a6:	681b      	ldr	r3, [r3, #0]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr
 80016b0:	2000012c 	.word	0x2000012c

080016b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b085      	sub	sp, #20
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c4:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e6:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <__NVIC_SetPriorityGrouping+0x44>)
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	60d3      	str	r3, [r2, #12]
}
 80016ec:	bf00      	nop
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bc80      	pop	{r7}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	2b00      	cmp	r3, #0
 800172a:	db0a      	blt.n	8001742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	b2da      	uxtb	r2, r3
 8001730:	490c      	ldr	r1, [pc, #48]	; (8001764 <__NVIC_SetPriority+0x4c>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	0112      	lsls	r2, r2, #4
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	440b      	add	r3, r1
 800173c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001740:	e00a      	b.n	8001758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <__NVIC_SetPriority+0x50>)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	3b04      	subs	r3, #4
 8001750:	0112      	lsls	r2, r2, #4
 8001752:	b2d2      	uxtb	r2, r2
 8001754:	440b      	add	r3, r1
 8001756:	761a      	strb	r2, [r3, #24]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f1c3 0307 	rsb	r3, r3, #7
 8001786:	2b04      	cmp	r3, #4
 8001788:	bf28      	it	cs
 800178a:	2304      	movcs	r3, #4
 800178c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	3304      	adds	r3, #4
 8001792:	2b06      	cmp	r3, #6
 8001794:	d902      	bls.n	800179c <NVIC_EncodePriority+0x30>
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	3b03      	subs	r3, #3
 800179a:	e000      	b.n	800179e <NVIC_EncodePriority+0x32>
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a0:	f04f 32ff 	mov.w	r2, #4294967295
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43da      	mvns	r2, r3
 80017ac:	68bb      	ldr	r3, [r7, #8]
 80017ae:	401a      	ands	r2, r3
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	43d9      	mvns	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c4:	4313      	orrs	r3, r2
         );
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3724      	adds	r7, #36	; 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	3b01      	subs	r3, #1
 80017dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017e0:	d301      	bcc.n	80017e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00f      	b.n	8001806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <SysTick_Config+0x40>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017ee:	210f      	movs	r1, #15
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f7ff ff90 	bl	8001718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017f8:	4b05      	ldr	r3, [pc, #20]	; (8001810 <SysTick_Config+0x40>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017fe:	4b04      	ldr	r3, [pc, #16]	; (8001810 <SysTick_Config+0x40>)
 8001800:	2207      	movs	r2, #7
 8001802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	e000e010 	.word	0xe000e010

08001814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f7ff ff49 	bl	80016b4 <__NVIC_SetPriorityGrouping>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	4603      	mov	r3, r0
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
 8001836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800183c:	f7ff ff5e 	bl	80016fc <__NVIC_GetPriorityGrouping>
 8001840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	6978      	ldr	r0, [r7, #20]
 8001848:	f7ff ff90 	bl	800176c <NVIC_EncodePriority>
 800184c:	4602      	mov	r2, r0
 800184e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001852:	4611      	mov	r1, r2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff5f 	bl	8001718 <__NVIC_SetPriority>
}
 800185a:	bf00      	nop
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b082      	sub	sp, #8
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff ffb0 	bl	80017d0 <SysTick_Config>
 8001870:	4603      	mov	r3, r0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b08b      	sub	sp, #44	; 0x2c
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188e:	e169      	b.n	8001b64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001890:	2201      	movs	r2, #1
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	f040 8158 	bne.w	8001b5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	4a9a      	ldr	r2, [pc, #616]	; (8001b1c <HAL_GPIO_Init+0x2a0>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d05e      	beq.n	8001976 <HAL_GPIO_Init+0xfa>
 80018b8:	4a98      	ldr	r2, [pc, #608]	; (8001b1c <HAL_GPIO_Init+0x2a0>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d875      	bhi.n	80019aa <HAL_GPIO_Init+0x12e>
 80018be:	4a98      	ldr	r2, [pc, #608]	; (8001b20 <HAL_GPIO_Init+0x2a4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d058      	beq.n	8001976 <HAL_GPIO_Init+0xfa>
 80018c4:	4a96      	ldr	r2, [pc, #600]	; (8001b20 <HAL_GPIO_Init+0x2a4>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d86f      	bhi.n	80019aa <HAL_GPIO_Init+0x12e>
 80018ca:	4a96      	ldr	r2, [pc, #600]	; (8001b24 <HAL_GPIO_Init+0x2a8>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d052      	beq.n	8001976 <HAL_GPIO_Init+0xfa>
 80018d0:	4a94      	ldr	r2, [pc, #592]	; (8001b24 <HAL_GPIO_Init+0x2a8>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d869      	bhi.n	80019aa <HAL_GPIO_Init+0x12e>
 80018d6:	4a94      	ldr	r2, [pc, #592]	; (8001b28 <HAL_GPIO_Init+0x2ac>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d04c      	beq.n	8001976 <HAL_GPIO_Init+0xfa>
 80018dc:	4a92      	ldr	r2, [pc, #584]	; (8001b28 <HAL_GPIO_Init+0x2ac>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d863      	bhi.n	80019aa <HAL_GPIO_Init+0x12e>
 80018e2:	4a92      	ldr	r2, [pc, #584]	; (8001b2c <HAL_GPIO_Init+0x2b0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d046      	beq.n	8001976 <HAL_GPIO_Init+0xfa>
 80018e8:	4a90      	ldr	r2, [pc, #576]	; (8001b2c <HAL_GPIO_Init+0x2b0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d85d      	bhi.n	80019aa <HAL_GPIO_Init+0x12e>
 80018ee:	2b12      	cmp	r3, #18
 80018f0:	d82a      	bhi.n	8001948 <HAL_GPIO_Init+0xcc>
 80018f2:	2b12      	cmp	r3, #18
 80018f4:	d859      	bhi.n	80019aa <HAL_GPIO_Init+0x12e>
 80018f6:	a201      	add	r2, pc, #4	; (adr r2, 80018fc <HAL_GPIO_Init+0x80>)
 80018f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fc:	08001977 	.word	0x08001977
 8001900:	08001951 	.word	0x08001951
 8001904:	08001963 	.word	0x08001963
 8001908:	080019a5 	.word	0x080019a5
 800190c:	080019ab 	.word	0x080019ab
 8001910:	080019ab 	.word	0x080019ab
 8001914:	080019ab 	.word	0x080019ab
 8001918:	080019ab 	.word	0x080019ab
 800191c:	080019ab 	.word	0x080019ab
 8001920:	080019ab 	.word	0x080019ab
 8001924:	080019ab 	.word	0x080019ab
 8001928:	080019ab 	.word	0x080019ab
 800192c:	080019ab 	.word	0x080019ab
 8001930:	080019ab 	.word	0x080019ab
 8001934:	080019ab 	.word	0x080019ab
 8001938:	080019ab 	.word	0x080019ab
 800193c:	080019ab 	.word	0x080019ab
 8001940:	08001959 	.word	0x08001959
 8001944:	0800196d 	.word	0x0800196d
 8001948:	4a79      	ldr	r2, [pc, #484]	; (8001b30 <HAL_GPIO_Init+0x2b4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800194e:	e02c      	b.n	80019aa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	623b      	str	r3, [r7, #32]
          break;
 8001956:	e029      	b.n	80019ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	3304      	adds	r3, #4
 800195e:	623b      	str	r3, [r7, #32]
          break;
 8001960:	e024      	b.n	80019ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	3308      	adds	r3, #8
 8001968:	623b      	str	r3, [r7, #32]
          break;
 800196a:	e01f      	b.n	80019ac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	330c      	adds	r3, #12
 8001972:	623b      	str	r3, [r7, #32]
          break;
 8001974:	e01a      	b.n	80019ac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d102      	bne.n	8001984 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800197e:	2304      	movs	r3, #4
 8001980:	623b      	str	r3, [r7, #32]
          break;
 8001982:	e013      	b.n	80019ac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d105      	bne.n	8001998 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800198c:	2308      	movs	r3, #8
 800198e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	611a      	str	r2, [r3, #16]
          break;
 8001996:	e009      	b.n	80019ac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001998:	2308      	movs	r3, #8
 800199a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	69fa      	ldr	r2, [r7, #28]
 80019a0:	615a      	str	r2, [r3, #20]
          break;
 80019a2:	e003      	b.n	80019ac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
          break;
 80019a8:	e000      	b.n	80019ac <HAL_GPIO_Init+0x130>
          break;
 80019aa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2bff      	cmp	r3, #255	; 0xff
 80019b0:	d801      	bhi.n	80019b6 <HAL_GPIO_Init+0x13a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	e001      	b.n	80019ba <HAL_GPIO_Init+0x13e>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3304      	adds	r3, #4
 80019ba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	2bff      	cmp	r3, #255	; 0xff
 80019c0:	d802      	bhi.n	80019c8 <HAL_GPIO_Init+0x14c>
 80019c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	e002      	b.n	80019ce <HAL_GPIO_Init+0x152>
 80019c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ca:	3b08      	subs	r3, #8
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	210f      	movs	r1, #15
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	401a      	ands	r2, r3
 80019e0:	6a39      	ldr	r1, [r7, #32]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	fa01 f303 	lsl.w	r3, r1, r3
 80019e8:	431a      	orrs	r2, r3
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80b1 	beq.w	8001b5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019fc:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <HAL_GPIO_Init+0x2b8>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a4c      	ldr	r2, [pc, #304]	; (8001b34 <HAL_GPIO_Init+0x2b8>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b4a      	ldr	r3, [pc, #296]	; (8001b34 <HAL_GPIO_Init+0x2b8>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a14:	4a48      	ldr	r2, [pc, #288]	; (8001b38 <HAL_GPIO_Init+0x2bc>)
 8001a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a18:	089b      	lsrs	r3, r3, #2
 8001a1a:	3302      	adds	r3, #2
 8001a1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	220f      	movs	r2, #15
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	4013      	ands	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a40      	ldr	r2, [pc, #256]	; (8001b3c <HAL_GPIO_Init+0x2c0>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d013      	beq.n	8001a68 <HAL_GPIO_Init+0x1ec>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a3f      	ldr	r2, [pc, #252]	; (8001b40 <HAL_GPIO_Init+0x2c4>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d00d      	beq.n	8001a64 <HAL_GPIO_Init+0x1e8>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a3e      	ldr	r2, [pc, #248]	; (8001b44 <HAL_GPIO_Init+0x2c8>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d007      	beq.n	8001a60 <HAL_GPIO_Init+0x1e4>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a3d      	ldr	r2, [pc, #244]	; (8001b48 <HAL_GPIO_Init+0x2cc>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d101      	bne.n	8001a5c <HAL_GPIO_Init+0x1e0>
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e006      	b.n	8001a6a <HAL_GPIO_Init+0x1ee>
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	e004      	b.n	8001a6a <HAL_GPIO_Init+0x1ee>
 8001a60:	2302      	movs	r3, #2
 8001a62:	e002      	b.n	8001a6a <HAL_GPIO_Init+0x1ee>
 8001a64:	2301      	movs	r3, #1
 8001a66:	e000      	b.n	8001a6a <HAL_GPIO_Init+0x1ee>
 8001a68:	2300      	movs	r3, #0
 8001a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6c:	f002 0203 	and.w	r2, r2, #3
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	4093      	lsls	r3, r2
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a7a:	492f      	ldr	r1, [pc, #188]	; (8001b38 <HAL_GPIO_Init+0x2bc>)
 8001a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3302      	adds	r3, #2
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a94:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	492c      	ldr	r1, [pc, #176]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	4928      	ldr	r1, [pc, #160]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001abc:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	4922      	ldr	r1, [pc, #136]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001acc:	68da      	ldr	r2, [r3, #12]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	491e      	ldr	r1, [pc, #120]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ae4:	4b19      	ldr	r3, [pc, #100]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	4918      	ldr	r1, [pc, #96]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001af2:	4b16      	ldr	r3, [pc, #88]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001af4:	685a      	ldr	r2, [r3, #4]
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	43db      	mvns	r3, r3
 8001afa:	4914      	ldr	r1, [pc, #80]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001afc:	4013      	ands	r3, r2
 8001afe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d021      	beq.n	8001b50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	490e      	ldr	r1, [pc, #56]	; (8001b4c <HAL_GPIO_Init+0x2d0>)
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	e021      	b.n	8001b5e <HAL_GPIO_Init+0x2e2>
 8001b1a:	bf00      	nop
 8001b1c:	10320000 	.word	0x10320000
 8001b20:	10310000 	.word	0x10310000
 8001b24:	10220000 	.word	0x10220000
 8001b28:	10210000 	.word	0x10210000
 8001b2c:	10120000 	.word	0x10120000
 8001b30:	10110000 	.word	0x10110000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	40010800 	.word	0x40010800
 8001b40:	40010c00 	.word	0x40010c00
 8001b44:	40011000 	.word	0x40011000
 8001b48:	40011400 	.word	0x40011400
 8001b4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_GPIO_Init+0x304>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	43db      	mvns	r3, r3
 8001b58:	4909      	ldr	r1, [pc, #36]	; (8001b80 <HAL_GPIO_Init+0x304>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	3301      	adds	r3, #1
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	f47f ae8e 	bne.w	8001890 <HAL_GPIO_Init+0x14>
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	372c      	adds	r7, #44	; 0x2c
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	40010400 	.word	0x40010400

08001b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
 8001b90:	4613      	mov	r3, r2
 8001b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba0:	e003      	b.n	8001baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba2:	887b      	ldrh	r3, [r7, #2]
 8001ba4:	041a      	lsls	r2, r3, #16
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	611a      	str	r2, [r3, #16]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e272      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 8087 	beq.w	8001ce2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bd4:	4b92      	ldr	r3, [pc, #584]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b04      	cmp	r3, #4
 8001bde:	d00c      	beq.n	8001bfa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be0:	4b8f      	ldr	r3, [pc, #572]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 030c 	and.w	r3, r3, #12
 8001be8:	2b08      	cmp	r3, #8
 8001bea:	d112      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5e>
 8001bec:	4b8c      	ldr	r3, [pc, #560]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bf8:	d10b      	bne.n	8001c12 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bfa:	4b89      	ldr	r3, [pc, #548]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d06c      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x12c>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d168      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e24c      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1a:	d106      	bne.n	8001c2a <HAL_RCC_OscConfig+0x76>
 8001c1c:	4b80      	ldr	r3, [pc, #512]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a7f      	ldr	r2, [pc, #508]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e02e      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x98>
 8001c32:	4b7b      	ldr	r3, [pc, #492]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a7a      	ldr	r2, [pc, #488]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	4b78      	ldr	r3, [pc, #480]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a77      	ldr	r2, [pc, #476]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e01d      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0xbc>
 8001c56:	4b72      	ldr	r3, [pc, #456]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a71      	ldr	r2, [pc, #452]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b6f      	ldr	r3, [pc, #444]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a6e      	ldr	r2, [pc, #440]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e00b      	b.n	8001c88 <HAL_RCC_OscConfig+0xd4>
 8001c70:	4b6b      	ldr	r3, [pc, #428]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a6a      	ldr	r2, [pc, #424]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	4b68      	ldr	r3, [pc, #416]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a67      	ldr	r2, [pc, #412]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c86:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d013      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fd06 	bl	80016a0 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c98:	f7ff fd02 	bl	80016a0 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b64      	cmp	r3, #100	; 0x64
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e200      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0f0      	beq.n	8001c98 <HAL_RCC_OscConfig+0xe4>
 8001cb6:	e014      	b.n	8001ce2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7ff fcf2 	bl	80016a0 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc0:	f7ff fcee 	bl	80016a0 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b64      	cmp	r3, #100	; 0x64
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e1ec      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cd2:	4b53      	ldr	r3, [pc, #332]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x10c>
 8001cde:	e000      	b.n	8001ce2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0302 	and.w	r3, r3, #2
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d063      	beq.n	8001db6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cee:	4b4c      	ldr	r3, [pc, #304]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001cfa:	4b49      	ldr	r3, [pc, #292]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d11c      	bne.n	8001d40 <HAL_RCC_OscConfig+0x18c>
 8001d06:	4b46      	ldr	r3, [pc, #280]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d116      	bne.n	8001d40 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d12:	4b43      	ldr	r3, [pc, #268]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d005      	beq.n	8001d2a <HAL_RCC_OscConfig+0x176>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e1c0      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2a:	4b3d      	ldr	r3, [pc, #244]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	695b      	ldr	r3, [r3, #20]
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4939      	ldr	r1, [pc, #228]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3e:	e03a      	b.n	8001db6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d48:	4b36      	ldr	r3, [pc, #216]	; (8001e24 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4e:	f7ff fca7 	bl	80016a0 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d56:	f7ff fca3 	bl	80016a0 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e1a1      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d68:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0302 	and.w	r3, r3, #2
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d74:	4b2a      	ldr	r3, [pc, #168]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	00db      	lsls	r3, r3, #3
 8001d82:	4927      	ldr	r1, [pc, #156]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	4313      	orrs	r3, r2
 8001d86:	600b      	str	r3, [r1, #0]
 8001d88:	e015      	b.n	8001db6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d90:	f7ff fc86 	bl	80016a0 <HAL_GetTick>
 8001d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d98:	f7ff fc82 	bl	80016a0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e180      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0308 	and.w	r3, r3, #8
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d03a      	beq.n	8001e38 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d019      	beq.n	8001dfe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_RCC_OscConfig+0x274>)
 8001dcc:	2201      	movs	r2, #1
 8001dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd0:	f7ff fc66 	bl	80016a0 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dd8:	f7ff fc62 	bl	80016a0 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e160      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d0f0      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001df6:	2001      	movs	r0, #1
 8001df8:	f000 fabc 	bl	8002374 <RCC_Delay>
 8001dfc:	e01c      	b.n	8001e38 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_RCC_OscConfig+0x274>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e04:	f7ff fc4c 	bl	80016a0 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e0a:	e00f      	b.n	8001e2c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e0c:	f7ff fc48 	bl	80016a0 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d908      	bls.n	8001e2c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e146      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	42420000 	.word	0x42420000
 8001e28:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	4b92      	ldr	r3, [pc, #584]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e9      	bne.n	8001e0c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	f000 80a6 	beq.w	8001f92 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e46:	2300      	movs	r3, #0
 8001e48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e4a:	4b8b      	ldr	r3, [pc, #556]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d10d      	bne.n	8001e72 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b88      	ldr	r3, [pc, #544]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	4a87      	ldr	r2, [pc, #540]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	61d3      	str	r3, [r2, #28]
 8001e62:	4b85      	ldr	r3, [pc, #532]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e72:	4b82      	ldr	r3, [pc, #520]	; (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d118      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e7e:	4b7f      	ldr	r3, [pc, #508]	; (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a7e      	ldr	r2, [pc, #504]	; (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e8a:	f7ff fc09 	bl	80016a0 <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e92:	f7ff fc05 	bl	80016a0 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b64      	cmp	r3, #100	; 0x64
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e103      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea4:	4b75      	ldr	r3, [pc, #468]	; (800207c <HAL_RCC_OscConfig+0x4c8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d0f0      	beq.n	8001e92 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d106      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x312>
 8001eb8:	4b6f      	ldr	r3, [pc, #444]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001eba:	6a1b      	ldr	r3, [r3, #32]
 8001ebc:	4a6e      	ldr	r2, [pc, #440]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6213      	str	r3, [r2, #32]
 8001ec4:	e02d      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10c      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x334>
 8001ece:	4b6a      	ldr	r3, [pc, #424]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a69      	ldr	r2, [pc, #420]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f023 0301 	bic.w	r3, r3, #1
 8001ed8:	6213      	str	r3, [r2, #32]
 8001eda:	4b67      	ldr	r3, [pc, #412]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	6a1b      	ldr	r3, [r3, #32]
 8001ede:	4a66      	ldr	r2, [pc, #408]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	f023 0304 	bic.w	r3, r3, #4
 8001ee4:	6213      	str	r3, [r2, #32]
 8001ee6:	e01c      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2b05      	cmp	r3, #5
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_OscConfig+0x356>
 8001ef0:	4b61      	ldr	r3, [pc, #388]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ef2:	6a1b      	ldr	r3, [r3, #32]
 8001ef4:	4a60      	ldr	r2, [pc, #384]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6213      	str	r3, [r2, #32]
 8001efc:	4b5e      	ldr	r3, [pc, #376]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	4a5d      	ldr	r2, [pc, #372]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6213      	str	r3, [r2, #32]
 8001f08:	e00b      	b.n	8001f22 <HAL_RCC_OscConfig+0x36e>
 8001f0a:	4b5b      	ldr	r3, [pc, #364]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a5a      	ldr	r2, [pc, #360]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f023 0301 	bic.w	r3, r3, #1
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	4b58      	ldr	r3, [pc, #352]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a57      	ldr	r2, [pc, #348]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	f023 0304 	bic.w	r3, r3, #4
 8001f20:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d015      	beq.n	8001f56 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f2a:	f7ff fbb9 	bl	80016a0 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7ff fbb5 	bl	80016a0 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e0b1      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f48:	4b4b      	ldr	r3, [pc, #300]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d0ee      	beq.n	8001f32 <HAL_RCC_OscConfig+0x37e>
 8001f54:	e014      	b.n	8001f80 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f56:	f7ff fba3 	bl	80016a0 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff fb9f 	bl	80016a0 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e09b      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f74:	4b40      	ldr	r3, [pc, #256]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1ee      	bne.n	8001f5e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f80:	7dfb      	ldrb	r3, [r7, #23]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d105      	bne.n	8001f92 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f86:	4b3c      	ldr	r3, [pc, #240]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	4a3b      	ldr	r2, [pc, #236]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f90:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69db      	ldr	r3, [r3, #28]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8087 	beq.w	80020aa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f9c:	4b36      	ldr	r3, [pc, #216]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 030c 	and.w	r3, r3, #12
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	d061      	beq.n	800206c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d146      	bne.n	800203e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb0:	4b33      	ldr	r3, [pc, #204]	; (8002080 <HAL_RCC_OscConfig+0x4cc>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb6:	f7ff fb73 	bl	80016a0 <HAL_GetTick>
 8001fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fbc:	e008      	b.n	8001fd0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fbe:	f7ff fb6f 	bl	80016a0 <HAL_GetTick>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e06d      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd0:	4b29      	ldr	r3, [pc, #164]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1f0      	bne.n	8001fbe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fe4:	d108      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fe6:	4b24      	ldr	r3, [pc, #144]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	4921      	ldr	r1, [pc, #132]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a19      	ldr	r1, [r3, #32]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002008:	430b      	orrs	r3, r1
 800200a:	491b      	ldr	r1, [pc, #108]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	4b1b      	ldr	r3, [pc, #108]	; (8002080 <HAL_RCC_OscConfig+0x4cc>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002016:	f7ff fb43 	bl	80016a0 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7ff fb3f 	bl	80016a0 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e03d      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x46a>
 800203c:	e035      	b.n	80020aa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b10      	ldr	r3, [pc, #64]	; (8002080 <HAL_RCC_OscConfig+0x4cc>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff fb2c 	bl	80016a0 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7ff fb28 	bl	80016a0 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e026      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x498>
 800206a:	e01e      	b.n	80020aa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69db      	ldr	r3, [r3, #28]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e019      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
 8002078:	40021000 	.word	0x40021000
 800207c:	40007000 	.word	0x40007000
 8002080:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_OscConfig+0x500>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	429a      	cmp	r2, r3
 8002096:	d106      	bne.n	80020a6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000

080020b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0d0      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020cc:	4b6a      	ldr	r3, [pc, #424]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0307 	and.w	r3, r3, #7
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d910      	bls.n	80020fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b67      	ldr	r3, [pc, #412]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 0207 	bic.w	r2, r3, #7
 80020e2:	4965      	ldr	r1, [pc, #404]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b63      	ldr	r3, [pc, #396]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e0b8      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d020      	beq.n	800214a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002114:	4b59      	ldr	r3, [pc, #356]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a58      	ldr	r2, [pc, #352]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800211e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800212c:	4b53      	ldr	r3, [pc, #332]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	4a52      	ldr	r2, [pc, #328]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002136:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b50      	ldr	r3, [pc, #320]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	494d      	ldr	r1, [pc, #308]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d040      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	4b47      	ldr	r3, [pc, #284]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d115      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e07f      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002176:	4b41      	ldr	r3, [pc, #260]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e073      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	4b3d      	ldr	r3, [pc, #244]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e06b      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002196:	4b39      	ldr	r3, [pc, #228]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f023 0203 	bic.w	r2, r3, #3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4936      	ldr	r1, [pc, #216]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a8:	f7ff fa7a 	bl	80016a0 <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b0:	f7ff fa76 	bl	80016a0 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e053      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 020c 	and.w	r2, r3, #12
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d1eb      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	683a      	ldr	r2, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d210      	bcs.n	8002208 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b24      	ldr	r3, [pc, #144]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f023 0207 	bic.w	r2, r3, #7
 80021ee:	4922      	ldr	r1, [pc, #136]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b20      	ldr	r3, [pc, #128]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e032      	b.n	800226e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0304 	and.w	r3, r3, #4
 8002210:	2b00      	cmp	r3, #0
 8002212:	d008      	beq.n	8002226 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4916      	ldr	r1, [pc, #88]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002222:	4313      	orrs	r3, r2
 8002224:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b00      	cmp	r3, #0
 8002230:	d009      	beq.n	8002246 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	490e      	ldr	r1, [pc, #56]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 8002242:	4313      	orrs	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002246:	f000 f82d 	bl	80022a4 <HAL_RCC_GetSysClockFreq>
 800224a:	4602      	mov	r2, r0
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <HAL_RCC_ClockConfig+0x1c4>)
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	091b      	lsrs	r3, r3, #4
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	490a      	ldr	r1, [pc, #40]	; (8002280 <HAL_RCC_ClockConfig+0x1c8>)
 8002258:	5ccb      	ldrb	r3, [r1, r3]
 800225a:	fa22 f303 	lsr.w	r3, r2, r3
 800225e:	4a09      	ldr	r2, [pc, #36]	; (8002284 <HAL_RCC_ClockConfig+0x1cc>)
 8002260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1d0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4618      	mov	r0, r3
 8002268:	f7ff f9d8 	bl	800161c <HAL_InitTick>

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	40022000 	.word	0x40022000
 800227c:	40021000 	.word	0x40021000
 8002280:	0800387c 	.word	0x0800387c
 8002284:	20000018 	.word	0x20000018
 8002288:	20000048 	.word	0x20000048

0800228c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002290:	4b03      	ldr	r3, [pc, #12]	; (80022a0 <HAL_RCC_EnableCSS+0x14>)
 8002292:	2201      	movs	r2, #1
 8002294:	601a      	str	r2, [r3, #0]
}
 8002296:	bf00      	nop
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	4242004c 	.word	0x4242004c

080022a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	2300      	movs	r3, #0
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	2300      	movs	r3, #0
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022be:	4b1e      	ldr	r3, [pc, #120]	; (8002338 <HAL_RCC_GetSysClockFreq+0x94>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 030c 	and.w	r3, r3, #12
 80022ca:	2b04      	cmp	r3, #4
 80022cc:	d002      	beq.n	80022d4 <HAL_RCC_GetSysClockFreq+0x30>
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d003      	beq.n	80022da <HAL_RCC_GetSysClockFreq+0x36>
 80022d2:	e027      	b.n	8002324 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022d4:	4b19      	ldr	r3, [pc, #100]	; (800233c <HAL_RCC_GetSysClockFreq+0x98>)
 80022d6:	613b      	str	r3, [r7, #16]
      break;
 80022d8:	e027      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	0c9b      	lsrs	r3, r3, #18
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	4a17      	ldr	r2, [pc, #92]	; (8002340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022e4:	5cd3      	ldrb	r3, [r2, r3]
 80022e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d010      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <HAL_RCC_GetSysClockFreq+0x94>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	0c5b      	lsrs	r3, r3, #17
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	4a11      	ldr	r2, [pc, #68]	; (8002344 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <HAL_RCC_GetSysClockFreq+0x98>)
 8002306:	fb03 f202 	mul.w	r2, r3, r2
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e004      	b.n	800231e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002318:	fb02 f303 	mul.w	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	613b      	str	r3, [r7, #16]
      break;
 8002322:	e002      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_RCC_GetSysClockFreq+0x98>)
 8002326:	613b      	str	r3, [r7, #16]
      break;
 8002328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232a:	693b      	ldr	r3, [r7, #16]
}
 800232c:	4618      	mov	r0, r3
 800232e:	371c      	adds	r7, #28
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	007a1200 	.word	0x007a1200
 8002340:	0800388c 	.word	0x0800388c
 8002344:	0800389c 	.word	0x0800389c
 8002348:	003d0900 	.word	0x003d0900

0800234c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002350:	4b06      	ldr	r3, [pc, #24]	; (800236c <HAL_RCC_NMI_IRQHandler+0x20>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002358:	2b80      	cmp	r3, #128	; 0x80
 800235a:	d104      	bne.n	8002366 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800235c:	f000 f828 	bl	80023b0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002362:	2280      	movs	r2, #128	; 0x80
 8002364:	701a      	strb	r2, [r3, #0]
  }
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40021000 	.word	0x40021000
 8002370:	4002100a 	.word	0x4002100a

08002374 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800237c:	4b0a      	ldr	r3, [pc, #40]	; (80023a8 <RCC_Delay+0x34>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <RCC_Delay+0x38>)
 8002382:	fba2 2303 	umull	r2, r3, r2, r3
 8002386:	0a5b      	lsrs	r3, r3, #9
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002390:	bf00      	nop
  }
  while (Delay --);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	1e5a      	subs	r2, r3, #1
 8002396:	60fa      	str	r2, [r7, #12]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1f9      	bne.n	8002390 <RCC_Delay+0x1c>
}
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr
 80023a8:	20000018 	.word	0x20000018
 80023ac:	10624dd3 	.word	0x10624dd3

080023b0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80023b4:	bf00      	nop
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bc80      	pop	{r7}
 80023ba:	4770      	bx	lr

080023bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e076      	b.n	80024bc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d108      	bne.n	80023e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023de:	d009      	beq.n	80023f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	61da      	str	r2, [r3, #28]
 80023e6:	e005      	b.n	80023f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7fd ffee 	bl	80003f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800242a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f003 0302 	and.w	r3, r3, #2
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	431a      	orrs	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002464:	431a      	orrs	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002478:	ea42 0103 	orr.w	r1, r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002480:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	0c1a      	lsrs	r2, r3, #16
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f002 0204 	and.w	r2, r2, #4
 800249a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69da      	ldr	r2, [r3, #28]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b088      	sub	sp, #32
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	603b      	str	r3, [r7, #0]
 80024d0:	4613      	mov	r3, r2
 80024d2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80024d4:	2300      	movs	r3, #0
 80024d6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_SPI_Transmit+0x22>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e12d      	b.n	8002742 <HAL_SPI_Transmit+0x27e>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024ee:	f7ff f8d7 	bl	80016a0 <HAL_GetTick>
 80024f2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80024f4:	88fb      	ldrh	r3, [r7, #6]
 80024f6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b01      	cmp	r3, #1
 8002502:	d002      	beq.n	800250a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002504:	2302      	movs	r3, #2
 8002506:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002508:	e116      	b.n	8002738 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <HAL_SPI_Transmit+0x52>
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d102      	bne.n	800251c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	77fb      	strb	r3, [r7, #31]
    goto error;
 800251a:	e10d      	b.n	8002738 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2203      	movs	r2, #3
 8002520:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	88fa      	ldrh	r2, [r7, #6]
 800253a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002562:	d10f      	bne.n	8002584 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002572:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002582:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b40      	cmp	r3, #64	; 0x40
 8002590:	d007      	beq.n	80025a2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025aa:	d14f      	bne.n	800264c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d002      	beq.n	80025ba <HAL_SPI_Transmit+0xf6>
 80025b4:	8afb      	ldrh	r3, [r7, #22]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d142      	bne.n	8002640 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	881a      	ldrh	r2, [r3, #0]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	1c9a      	adds	r2, r3, #2
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80025de:	e02f      	b.n	8002640 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d112      	bne.n	8002614 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	881a      	ldrh	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	1c9a      	adds	r2, r3, #2
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002608:	b29b      	uxth	r3, r3
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	86da      	strh	r2, [r3, #54]	; 0x36
 8002612:	e015      	b.n	8002640 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002614:	f7ff f844 	bl	80016a0 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	683a      	ldr	r2, [r7, #0]
 8002620:	429a      	cmp	r2, r3
 8002622:	d803      	bhi.n	800262c <HAL_SPI_Transmit+0x168>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262a:	d102      	bne.n	8002632 <HAL_SPI_Transmit+0x16e>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800263e:	e07b      	b.n	8002738 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ca      	bne.n	80025e0 <HAL_SPI_Transmit+0x11c>
 800264a:	e050      	b.n	80026ee <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d002      	beq.n	800265a <HAL_SPI_Transmit+0x196>
 8002654:	8afb      	ldrh	r3, [r7, #22]
 8002656:	2b01      	cmp	r3, #1
 8002658:	d144      	bne.n	80026e4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	330c      	adds	r3, #12
 8002664:	7812      	ldrb	r2, [r2, #0]
 8002666:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002676:	b29b      	uxth	r3, r3
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002680:	e030      	b.n	80026e4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b02      	cmp	r3, #2
 800268e:	d113      	bne.n	80026b8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	330c      	adds	r3, #12
 800269a:	7812      	ldrb	r2, [r2, #0]
 800269c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	1c5a      	adds	r2, r3, #1
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	3b01      	subs	r3, #1
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	86da      	strh	r2, [r3, #54]	; 0x36
 80026b6:	e015      	b.n	80026e4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026b8:	f7fe fff2 	bl	80016a0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d803      	bhi.n	80026d0 <HAL_SPI_Transmit+0x20c>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ce:	d102      	bne.n	80026d6 <HAL_SPI_Transmit+0x212>
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80026e2:	e029      	b.n	8002738 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026e8:	b29b      	uxth	r3, r3
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1c9      	bne.n	8002682 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	6839      	ldr	r1, [r7, #0]
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 fbcc 	bl	8002e90 <SPI_EndRxTxTransaction>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2220      	movs	r2, #32
 8002702:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d10a      	bne.n	8002722 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800270c:	2300      	movs	r3, #0
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	77fb      	strb	r3, [r7, #31]
 800272e:	e003      	b.n	8002738 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002740:	7ffb      	ldrb	r3, [r7, #31]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b088      	sub	sp, #32
 800274e:	af02      	add	r7, sp, #8
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4613      	mov	r3, r2
 8002758:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b01      	cmp	r3, #1
 8002768:	d002      	beq.n	8002770 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800276a:	2302      	movs	r3, #2
 800276c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800276e:	e0fb      	b.n	8002968 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002778:	d112      	bne.n	80027a0 <HAL_SPI_Receive+0x56>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10e      	bne.n	80027a0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2204      	movs	r2, #4
 8002786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800278a:	88fa      	ldrh	r2, [r7, #6]
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	9300      	str	r3, [sp, #0]
 8002790:	4613      	mov	r3, r2
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	68f8      	ldr	r0, [r7, #12]
 8002798:	f000 f8ef 	bl	800297a <HAL_SPI_TransmitReceive>
 800279c:	4603      	mov	r3, r0
 800279e:	e0e8      	b.n	8002972 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_SPI_Receive+0x64>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e0e1      	b.n	8002972 <HAL_SPI_Receive+0x228>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027b6:	f7fe ff73 	bl	80016a0 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d002      	beq.n	80027c8 <HAL_SPI_Receive+0x7e>
 80027c2:	88fb      	ldrh	r3, [r7, #6]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d102      	bne.n	80027ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80027cc:	e0cc      	b.n	8002968 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2204      	movs	r2, #4
 80027d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	88fa      	ldrh	r2, [r7, #6]
 80027e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002814:	d10f      	bne.n	8002836 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002824:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002834:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002840:	2b40      	cmp	r3, #64	; 0x40
 8002842:	d007      	beq.n	8002854 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002852:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d16a      	bne.n	8002932 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800285c:	e032      	b.n	80028c4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b01      	cmp	r3, #1
 800286a:	d115      	bne.n	8002898 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f103 020c 	add.w	r2, r3, #12
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	7812      	ldrb	r2, [r2, #0]
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	1c5a      	adds	r2, r3, #1
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002896:	e015      	b.n	80028c4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002898:	f7fe ff02 	bl	80016a0 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d803      	bhi.n	80028b0 <HAL_SPI_Receive+0x166>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ae:	d102      	bne.n	80028b6 <HAL_SPI_Receive+0x16c>
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d106      	bne.n	80028c4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80028c2:	e051      	b.n	8002968 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1c7      	bne.n	800285e <HAL_SPI_Receive+0x114>
 80028ce:	e035      	b.n	800293c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d113      	bne.n	8002906 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e8:	b292      	uxth	r2, r2
 80028ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f0:	1c9a      	adds	r2, r3, #2
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002904:	e015      	b.n	8002932 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002906:	f7fe fecb 	bl	80016a0 <HAL_GetTick>
 800290a:	4602      	mov	r2, r0
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	1ad3      	subs	r3, r2, r3
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d803      	bhi.n	800291e <HAL_SPI_Receive+0x1d4>
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d102      	bne.n	8002924 <HAL_SPI_Receive+0x1da>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d106      	bne.n	8002932 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002930:	e01a      	b.n	8002968 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002936:	b29b      	uxth	r3, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	d1c9      	bne.n	80028d0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	6839      	ldr	r1, [r7, #0]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fa53 	bl	8002dec <SPI_EndRxTransaction>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d002      	beq.n	8002952 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2220      	movs	r2, #32
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002956:	2b00      	cmp	r3, #0
 8002958:	d002      	beq.n	8002960 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	75fb      	strb	r3, [r7, #23]
 800295e:	e003      	b.n	8002968 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002970:	7dfb      	ldrb	r3, [r7, #23]
}
 8002972:	4618      	mov	r0, r3
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b08c      	sub	sp, #48	; 0x30
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002988:	2301      	movs	r3, #1
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800298c:	2300      	movs	r3, #0
 800298e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_SPI_TransmitReceive+0x26>
 800299c:	2302      	movs	r3, #2
 800299e:	e198      	b.n	8002cd2 <HAL_SPI_TransmitReceive+0x358>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029a8:	f7fe fe7a 	bl	80016a0 <HAL_GetTick>
 80029ac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80029be:	887b      	ldrh	r3, [r7, #2]
 80029c0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d00f      	beq.n	80029ea <HAL_SPI_TransmitReceive+0x70>
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029d0:	d107      	bne.n	80029e2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d103      	bne.n	80029e2 <HAL_SPI_TransmitReceive+0x68>
 80029da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80029de:	2b04      	cmp	r3, #4
 80029e0:	d003      	beq.n	80029ea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
 80029e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80029e8:	e16d      	b.n	8002cc6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d005      	beq.n	80029fc <HAL_SPI_TransmitReceive+0x82>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <HAL_SPI_TransmitReceive+0x82>
 80029f6:	887b      	ldrh	r3, [r7, #2]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d103      	bne.n	8002a04 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002a02:	e160      	b.n	8002cc6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d003      	beq.n	8002a18 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2205      	movs	r2, #5
 8002a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	887a      	ldrh	r2, [r7, #2]
 8002a28:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	887a      	ldrh	r2, [r7, #2]
 8002a2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	887a      	ldrh	r2, [r7, #2]
 8002a3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	887a      	ldrh	r2, [r7, #2]
 8002a40:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a58:	2b40      	cmp	r3, #64	; 0x40
 8002a5a:	d007      	beq.n	8002a6c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a74:	d17c      	bne.n	8002b70 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <HAL_SPI_TransmitReceive+0x10a>
 8002a7e:	8b7b      	ldrh	r3, [r7, #26]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d16a      	bne.n	8002b5a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a88:	881a      	ldrh	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a94:	1c9a      	adds	r2, r3, #2
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002aa8:	e057      	b.n	8002b5a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d11b      	bne.n	8002af0 <HAL_SPI_TransmitReceive+0x176>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d016      	beq.n	8002af0 <HAL_SPI_TransmitReceive+0x176>
 8002ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d113      	bne.n	8002af0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	881a      	ldrh	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad8:	1c9a      	adds	r2, r3, #2
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d119      	bne.n	8002b32 <HAL_SPI_TransmitReceive+0x1b8>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d014      	beq.n	8002b32 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	b292      	uxth	r2, r2
 8002b14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b1a:	1c9a      	adds	r2, r3, #2
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	3b01      	subs	r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b32:	f7fe fdb5 	bl	80016a0 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d80b      	bhi.n	8002b5a <HAL_SPI_TransmitReceive+0x1e0>
 8002b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b48:	d007      	beq.n	8002b5a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002b58:	e0b5      	b.n	8002cc6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1a2      	bne.n	8002aaa <HAL_SPI_TransmitReceive+0x130>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d19d      	bne.n	8002aaa <HAL_SPI_TransmitReceive+0x130>
 8002b6e:	e080      	b.n	8002c72 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d002      	beq.n	8002b7e <HAL_SPI_TransmitReceive+0x204>
 8002b78:	8b7b      	ldrh	r3, [r7, #26]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d16f      	bne.n	8002c5e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	330c      	adds	r3, #12
 8002b88:	7812      	ldrb	r2, [r2, #0]
 8002b8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ba4:	e05b      	b.n	8002c5e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d11c      	bne.n	8002bee <HAL_SPI_TransmitReceive+0x274>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d017      	beq.n	8002bee <HAL_SPI_TransmitReceive+0x274>
 8002bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d114      	bne.n	8002bee <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	330c      	adds	r3, #12
 8002bce:	7812      	ldrb	r2, [r2, #0]
 8002bd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d119      	bne.n	8002c30 <HAL_SPI_TransmitReceive+0x2b6>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d014      	beq.n	8002c30 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c10:	b2d2      	uxtb	r2, r2
 8002c12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	1c5a      	adds	r2, r3, #1
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c30:	f7fe fd36 	bl	80016a0 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d803      	bhi.n	8002c48 <HAL_SPI_TransmitReceive+0x2ce>
 8002c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c46:	d102      	bne.n	8002c4e <HAL_SPI_TransmitReceive+0x2d4>
 8002c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d107      	bne.n	8002c5e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8002c5c:	e033      	b.n	8002cc6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c62:	b29b      	uxth	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d19e      	bne.n	8002ba6 <HAL_SPI_TransmitReceive+0x22c>
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d199      	bne.n	8002ba6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f90a 	bl	8002e90 <SPI_EndRxTxTransaction>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d006      	beq.n	8002c90 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002c8e:	e01a      	b.n	8002cc6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c98:	2300      	movs	r3, #0
 8002c9a:	617b      	str	r3, [r7, #20]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	617b      	str	r3, [r7, #20]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cbc:	e003      	b.n	8002cc6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002cce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3730      	adds	r7, #48	; 0x30
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
	...

08002cdc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002cec:	f7fe fcd8 	bl	80016a0 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002cfc:	f7fe fcd0 	bl	80016a0 <HAL_GetTick>
 8002d00:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d02:	4b39      	ldr	r3, [pc, #228]	; (8002de8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	015b      	lsls	r3, r3, #5
 8002d08:	0d1b      	lsrs	r3, r3, #20
 8002d0a:	69fa      	ldr	r2, [r7, #28]
 8002d0c:	fb02 f303 	mul.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d12:	e054      	b.n	8002dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1a:	d050      	beq.n	8002dbe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d1c:	f7fe fcc0 	bl	80016a0 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d902      	bls.n	8002d32 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d13d      	bne.n	8002dae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d40:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4a:	d111      	bne.n	8002d70 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d54:	d004      	beq.n	8002d60 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5e:	d107      	bne.n	8002d70 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d6e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d78:	d10f      	bne.n	8002d9a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d98:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e017      	b.n	8002dde <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	bf0c      	ite	eq
 8002dce:	2301      	moveq	r3, #1
 8002dd0:	2300      	movne	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d19b      	bne.n	8002d14 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3720      	adds	r7, #32
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	20000018 	.word	0x20000018

08002dec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e00:	d111      	bne.n	8002e26 <SPI_EndRxTransaction+0x3a>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e0a:	d004      	beq.n	8002e16 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e14:	d107      	bne.n	8002e26 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e24:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e2e:	d117      	bne.n	8002e60 <SPI_EndRxTransaction+0x74>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e38:	d112      	bne.n	8002e60 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2200      	movs	r2, #0
 8002e42:	2101      	movs	r1, #1
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f7ff ff49 	bl	8002cdc <SPI_WaitFlagStateUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01a      	beq.n	8002e86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	f043 0220 	orr.w	r2, r3, #32
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e013      	b.n	8002e88 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2200      	movs	r2, #0
 8002e68:	2180      	movs	r1, #128	; 0x80
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f7ff ff36 	bl	8002cdc <SPI_WaitFlagStateUntilTimeout>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d007      	beq.n	8002e86 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e7a:	f043 0220 	orr.w	r2, r3, #32
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e000      	b.n	8002e88 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af02      	add	r7, sp, #8
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	9300      	str	r3, [sp, #0]
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	2180      	movs	r1, #128	; 0x80
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f7ff ff18 	bl	8002cdc <SPI_WaitFlagStateUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d007      	beq.n	8002ec2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	f043 0220 	orr.w	r2, r3, #32
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e000      	b.n	8002ec4 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <std>:
 8002ecc:	2300      	movs	r3, #0
 8002ece:	b510      	push	{r4, lr}
 8002ed0:	4604      	mov	r4, r0
 8002ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8002ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002eda:	6083      	str	r3, [r0, #8]
 8002edc:	8181      	strh	r1, [r0, #12]
 8002ede:	6643      	str	r3, [r0, #100]	; 0x64
 8002ee0:	81c2      	strh	r2, [r0, #14]
 8002ee2:	6183      	str	r3, [r0, #24]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	305c      	adds	r0, #92	; 0x5c
 8002eea:	f000 f9e5 	bl	80032b8 <memset>
 8002eee:	4b0d      	ldr	r3, [pc, #52]	; (8002f24 <std+0x58>)
 8002ef0:	6224      	str	r4, [r4, #32]
 8002ef2:	6263      	str	r3, [r4, #36]	; 0x24
 8002ef4:	4b0c      	ldr	r3, [pc, #48]	; (8002f28 <std+0x5c>)
 8002ef6:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ef8:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <std+0x60>)
 8002efa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <std+0x64>)
 8002efe:	6323      	str	r3, [r4, #48]	; 0x30
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <std+0x68>)
 8002f02:	429c      	cmp	r4, r3
 8002f04:	d006      	beq.n	8002f14 <std+0x48>
 8002f06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002f0a:	4294      	cmp	r4, r2
 8002f0c:	d002      	beq.n	8002f14 <std+0x48>
 8002f0e:	33d0      	adds	r3, #208	; 0xd0
 8002f10:	429c      	cmp	r4, r3
 8002f12:	d105      	bne.n	8002f20 <std+0x54>
 8002f14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002f18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f1c:	f000 ba44 	b.w	80033a8 <__retarget_lock_init_recursive>
 8002f20:	bd10      	pop	{r4, pc}
 8002f22:	bf00      	nop
 8002f24:	08003109 	.word	0x08003109
 8002f28:	0800312b 	.word	0x0800312b
 8002f2c:	08003163 	.word	0x08003163
 8002f30:	08003187 	.word	0x08003187
 8002f34:	20000130 	.word	0x20000130

08002f38 <stdio_exit_handler>:
 8002f38:	4a02      	ldr	r2, [pc, #8]	; (8002f44 <stdio_exit_handler+0xc>)
 8002f3a:	4903      	ldr	r1, [pc, #12]	; (8002f48 <stdio_exit_handler+0x10>)
 8002f3c:	4803      	ldr	r0, [pc, #12]	; (8002f4c <stdio_exit_handler+0x14>)
 8002f3e:	f000 b869 	b.w	8003014 <_fwalk_sglue>
 8002f42:	bf00      	nop
 8002f44:	20000050 	.word	0x20000050
 8002f48:	0800369d 	.word	0x0800369d
 8002f4c:	2000005c 	.word	0x2000005c

08002f50 <cleanup_stdio>:
 8002f50:	6841      	ldr	r1, [r0, #4]
 8002f52:	4b0c      	ldr	r3, [pc, #48]	; (8002f84 <cleanup_stdio+0x34>)
 8002f54:	b510      	push	{r4, lr}
 8002f56:	4299      	cmp	r1, r3
 8002f58:	4604      	mov	r4, r0
 8002f5a:	d001      	beq.n	8002f60 <cleanup_stdio+0x10>
 8002f5c:	f000 fb9e 	bl	800369c <_fflush_r>
 8002f60:	68a1      	ldr	r1, [r4, #8]
 8002f62:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <cleanup_stdio+0x38>)
 8002f64:	4299      	cmp	r1, r3
 8002f66:	d002      	beq.n	8002f6e <cleanup_stdio+0x1e>
 8002f68:	4620      	mov	r0, r4
 8002f6a:	f000 fb97 	bl	800369c <_fflush_r>
 8002f6e:	68e1      	ldr	r1, [r4, #12]
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <cleanup_stdio+0x3c>)
 8002f72:	4299      	cmp	r1, r3
 8002f74:	d004      	beq.n	8002f80 <cleanup_stdio+0x30>
 8002f76:	4620      	mov	r0, r4
 8002f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002f7c:	f000 bb8e 	b.w	800369c <_fflush_r>
 8002f80:	bd10      	pop	{r4, pc}
 8002f82:	bf00      	nop
 8002f84:	20000130 	.word	0x20000130
 8002f88:	20000198 	.word	0x20000198
 8002f8c:	20000200 	.word	0x20000200

08002f90 <global_stdio_init.part.0>:
 8002f90:	b510      	push	{r4, lr}
 8002f92:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <global_stdio_init.part.0+0x30>)
 8002f94:	4c0b      	ldr	r4, [pc, #44]	; (8002fc4 <global_stdio_init.part.0+0x34>)
 8002f96:	4a0c      	ldr	r2, [pc, #48]	; (8002fc8 <global_stdio_init.part.0+0x38>)
 8002f98:	4620      	mov	r0, r4
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	2104      	movs	r1, #4
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f7ff ff94 	bl	8002ecc <std>
 8002fa4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002fa8:	2201      	movs	r2, #1
 8002faa:	2109      	movs	r1, #9
 8002fac:	f7ff ff8e 	bl	8002ecc <std>
 8002fb0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002fba:	2112      	movs	r1, #18
 8002fbc:	f7ff bf86 	b.w	8002ecc <std>
 8002fc0:	20000268 	.word	0x20000268
 8002fc4:	20000130 	.word	0x20000130
 8002fc8:	08002f39 	.word	0x08002f39

08002fcc <__sfp_lock_acquire>:
 8002fcc:	4801      	ldr	r0, [pc, #4]	; (8002fd4 <__sfp_lock_acquire+0x8>)
 8002fce:	f000 b9ec 	b.w	80033aa <__retarget_lock_acquire_recursive>
 8002fd2:	bf00      	nop
 8002fd4:	20000271 	.word	0x20000271

08002fd8 <__sfp_lock_release>:
 8002fd8:	4801      	ldr	r0, [pc, #4]	; (8002fe0 <__sfp_lock_release+0x8>)
 8002fda:	f000 b9e7 	b.w	80033ac <__retarget_lock_release_recursive>
 8002fde:	bf00      	nop
 8002fe0:	20000271 	.word	0x20000271

08002fe4 <__sinit>:
 8002fe4:	b510      	push	{r4, lr}
 8002fe6:	4604      	mov	r4, r0
 8002fe8:	f7ff fff0 	bl	8002fcc <__sfp_lock_acquire>
 8002fec:	6a23      	ldr	r3, [r4, #32]
 8002fee:	b11b      	cbz	r3, 8002ff8 <__sinit+0x14>
 8002ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ff4:	f7ff bff0 	b.w	8002fd8 <__sfp_lock_release>
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <__sinit+0x28>)
 8002ffa:	6223      	str	r3, [r4, #32]
 8002ffc:	4b04      	ldr	r3, [pc, #16]	; (8003010 <__sinit+0x2c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1f5      	bne.n	8002ff0 <__sinit+0xc>
 8003004:	f7ff ffc4 	bl	8002f90 <global_stdio_init.part.0>
 8003008:	e7f2      	b.n	8002ff0 <__sinit+0xc>
 800300a:	bf00      	nop
 800300c:	08002f51 	.word	0x08002f51
 8003010:	20000268 	.word	0x20000268

08003014 <_fwalk_sglue>:
 8003014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003018:	4607      	mov	r7, r0
 800301a:	4688      	mov	r8, r1
 800301c:	4614      	mov	r4, r2
 800301e:	2600      	movs	r6, #0
 8003020:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003024:	f1b9 0901 	subs.w	r9, r9, #1
 8003028:	d505      	bpl.n	8003036 <_fwalk_sglue+0x22>
 800302a:	6824      	ldr	r4, [r4, #0]
 800302c:	2c00      	cmp	r4, #0
 800302e:	d1f7      	bne.n	8003020 <_fwalk_sglue+0xc>
 8003030:	4630      	mov	r0, r6
 8003032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003036:	89ab      	ldrh	r3, [r5, #12]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d907      	bls.n	800304c <_fwalk_sglue+0x38>
 800303c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003040:	3301      	adds	r3, #1
 8003042:	d003      	beq.n	800304c <_fwalk_sglue+0x38>
 8003044:	4629      	mov	r1, r5
 8003046:	4638      	mov	r0, r7
 8003048:	47c0      	blx	r8
 800304a:	4306      	orrs	r6, r0
 800304c:	3568      	adds	r5, #104	; 0x68
 800304e:	e7e9      	b.n	8003024 <_fwalk_sglue+0x10>

08003050 <_puts_r>:
 8003050:	6a03      	ldr	r3, [r0, #32]
 8003052:	b570      	push	{r4, r5, r6, lr}
 8003054:	4605      	mov	r5, r0
 8003056:	460e      	mov	r6, r1
 8003058:	6884      	ldr	r4, [r0, #8]
 800305a:	b90b      	cbnz	r3, 8003060 <_puts_r+0x10>
 800305c:	f7ff ffc2 	bl	8002fe4 <__sinit>
 8003060:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003062:	07db      	lsls	r3, r3, #31
 8003064:	d405      	bmi.n	8003072 <_puts_r+0x22>
 8003066:	89a3      	ldrh	r3, [r4, #12]
 8003068:	0598      	lsls	r0, r3, #22
 800306a:	d402      	bmi.n	8003072 <_puts_r+0x22>
 800306c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800306e:	f000 f99c 	bl	80033aa <__retarget_lock_acquire_recursive>
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	0719      	lsls	r1, r3, #28
 8003076:	d513      	bpl.n	80030a0 <_puts_r+0x50>
 8003078:	6923      	ldr	r3, [r4, #16]
 800307a:	b18b      	cbz	r3, 80030a0 <_puts_r+0x50>
 800307c:	3e01      	subs	r6, #1
 800307e:	68a3      	ldr	r3, [r4, #8]
 8003080:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003084:	3b01      	subs	r3, #1
 8003086:	60a3      	str	r3, [r4, #8]
 8003088:	b9e9      	cbnz	r1, 80030c6 <_puts_r+0x76>
 800308a:	2b00      	cmp	r3, #0
 800308c:	da2e      	bge.n	80030ec <_puts_r+0x9c>
 800308e:	4622      	mov	r2, r4
 8003090:	210a      	movs	r1, #10
 8003092:	4628      	mov	r0, r5
 8003094:	f000 f87b 	bl	800318e <__swbuf_r>
 8003098:	3001      	adds	r0, #1
 800309a:	d007      	beq.n	80030ac <_puts_r+0x5c>
 800309c:	250a      	movs	r5, #10
 800309e:	e007      	b.n	80030b0 <_puts_r+0x60>
 80030a0:	4621      	mov	r1, r4
 80030a2:	4628      	mov	r0, r5
 80030a4:	f000 f8b0 	bl	8003208 <__swsetup_r>
 80030a8:	2800      	cmp	r0, #0
 80030aa:	d0e7      	beq.n	800307c <_puts_r+0x2c>
 80030ac:	f04f 35ff 	mov.w	r5, #4294967295
 80030b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030b2:	07da      	lsls	r2, r3, #31
 80030b4:	d405      	bmi.n	80030c2 <_puts_r+0x72>
 80030b6:	89a3      	ldrh	r3, [r4, #12]
 80030b8:	059b      	lsls	r3, r3, #22
 80030ba:	d402      	bmi.n	80030c2 <_puts_r+0x72>
 80030bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030be:	f000 f975 	bl	80033ac <__retarget_lock_release_recursive>
 80030c2:	4628      	mov	r0, r5
 80030c4:	bd70      	pop	{r4, r5, r6, pc}
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	da04      	bge.n	80030d4 <_puts_r+0x84>
 80030ca:	69a2      	ldr	r2, [r4, #24]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	dc06      	bgt.n	80030de <_puts_r+0x8e>
 80030d0:	290a      	cmp	r1, #10
 80030d2:	d004      	beq.n	80030de <_puts_r+0x8e>
 80030d4:	6823      	ldr	r3, [r4, #0]
 80030d6:	1c5a      	adds	r2, r3, #1
 80030d8:	6022      	str	r2, [r4, #0]
 80030da:	7019      	strb	r1, [r3, #0]
 80030dc:	e7cf      	b.n	800307e <_puts_r+0x2e>
 80030de:	4622      	mov	r2, r4
 80030e0:	4628      	mov	r0, r5
 80030e2:	f000 f854 	bl	800318e <__swbuf_r>
 80030e6:	3001      	adds	r0, #1
 80030e8:	d1c9      	bne.n	800307e <_puts_r+0x2e>
 80030ea:	e7df      	b.n	80030ac <_puts_r+0x5c>
 80030ec:	250a      	movs	r5, #10
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	6022      	str	r2, [r4, #0]
 80030f4:	701d      	strb	r5, [r3, #0]
 80030f6:	e7db      	b.n	80030b0 <_puts_r+0x60>

080030f8 <puts>:
 80030f8:	4b02      	ldr	r3, [pc, #8]	; (8003104 <puts+0xc>)
 80030fa:	4601      	mov	r1, r0
 80030fc:	6818      	ldr	r0, [r3, #0]
 80030fe:	f7ff bfa7 	b.w	8003050 <_puts_r>
 8003102:	bf00      	nop
 8003104:	200000a8 	.word	0x200000a8

08003108 <__sread>:
 8003108:	b510      	push	{r4, lr}
 800310a:	460c      	mov	r4, r1
 800310c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003110:	f000 f8fc 	bl	800330c <_read_r>
 8003114:	2800      	cmp	r0, #0
 8003116:	bfab      	itete	ge
 8003118:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800311a:	89a3      	ldrhlt	r3, [r4, #12]
 800311c:	181b      	addge	r3, r3, r0
 800311e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003122:	bfac      	ite	ge
 8003124:	6563      	strge	r3, [r4, #84]	; 0x54
 8003126:	81a3      	strhlt	r3, [r4, #12]
 8003128:	bd10      	pop	{r4, pc}

0800312a <__swrite>:
 800312a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800312e:	461f      	mov	r7, r3
 8003130:	898b      	ldrh	r3, [r1, #12]
 8003132:	4605      	mov	r5, r0
 8003134:	05db      	lsls	r3, r3, #23
 8003136:	460c      	mov	r4, r1
 8003138:	4616      	mov	r6, r2
 800313a:	d505      	bpl.n	8003148 <__swrite+0x1e>
 800313c:	2302      	movs	r3, #2
 800313e:	2200      	movs	r2, #0
 8003140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003144:	f000 f8d0 	bl	80032e8 <_lseek_r>
 8003148:	89a3      	ldrh	r3, [r4, #12]
 800314a:	4632      	mov	r2, r6
 800314c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003150:	81a3      	strh	r3, [r4, #12]
 8003152:	4628      	mov	r0, r5
 8003154:	463b      	mov	r3, r7
 8003156:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800315a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800315e:	f000 b8e7 	b.w	8003330 <_write_r>

08003162 <__sseek>:
 8003162:	b510      	push	{r4, lr}
 8003164:	460c      	mov	r4, r1
 8003166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800316a:	f000 f8bd 	bl	80032e8 <_lseek_r>
 800316e:	1c43      	adds	r3, r0, #1
 8003170:	89a3      	ldrh	r3, [r4, #12]
 8003172:	bf15      	itete	ne
 8003174:	6560      	strne	r0, [r4, #84]	; 0x54
 8003176:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800317a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800317e:	81a3      	strheq	r3, [r4, #12]
 8003180:	bf18      	it	ne
 8003182:	81a3      	strhne	r3, [r4, #12]
 8003184:	bd10      	pop	{r4, pc}

08003186 <__sclose>:
 8003186:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800318a:	f000 b89d 	b.w	80032c8 <_close_r>

0800318e <__swbuf_r>:
 800318e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003190:	460e      	mov	r6, r1
 8003192:	4614      	mov	r4, r2
 8003194:	4605      	mov	r5, r0
 8003196:	b118      	cbz	r0, 80031a0 <__swbuf_r+0x12>
 8003198:	6a03      	ldr	r3, [r0, #32]
 800319a:	b90b      	cbnz	r3, 80031a0 <__swbuf_r+0x12>
 800319c:	f7ff ff22 	bl	8002fe4 <__sinit>
 80031a0:	69a3      	ldr	r3, [r4, #24]
 80031a2:	60a3      	str	r3, [r4, #8]
 80031a4:	89a3      	ldrh	r3, [r4, #12]
 80031a6:	071a      	lsls	r2, r3, #28
 80031a8:	d525      	bpl.n	80031f6 <__swbuf_r+0x68>
 80031aa:	6923      	ldr	r3, [r4, #16]
 80031ac:	b31b      	cbz	r3, 80031f6 <__swbuf_r+0x68>
 80031ae:	6823      	ldr	r3, [r4, #0]
 80031b0:	6922      	ldr	r2, [r4, #16]
 80031b2:	b2f6      	uxtb	r6, r6
 80031b4:	1a98      	subs	r0, r3, r2
 80031b6:	6963      	ldr	r3, [r4, #20]
 80031b8:	4637      	mov	r7, r6
 80031ba:	4283      	cmp	r3, r0
 80031bc:	dc04      	bgt.n	80031c8 <__swbuf_r+0x3a>
 80031be:	4621      	mov	r1, r4
 80031c0:	4628      	mov	r0, r5
 80031c2:	f000 fa6b 	bl	800369c <_fflush_r>
 80031c6:	b9e0      	cbnz	r0, 8003202 <__swbuf_r+0x74>
 80031c8:	68a3      	ldr	r3, [r4, #8]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	60a3      	str	r3, [r4, #8]
 80031ce:	6823      	ldr	r3, [r4, #0]
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	6022      	str	r2, [r4, #0]
 80031d4:	701e      	strb	r6, [r3, #0]
 80031d6:	6962      	ldr	r2, [r4, #20]
 80031d8:	1c43      	adds	r3, r0, #1
 80031da:	429a      	cmp	r2, r3
 80031dc:	d004      	beq.n	80031e8 <__swbuf_r+0x5a>
 80031de:	89a3      	ldrh	r3, [r4, #12]
 80031e0:	07db      	lsls	r3, r3, #31
 80031e2:	d506      	bpl.n	80031f2 <__swbuf_r+0x64>
 80031e4:	2e0a      	cmp	r6, #10
 80031e6:	d104      	bne.n	80031f2 <__swbuf_r+0x64>
 80031e8:	4621      	mov	r1, r4
 80031ea:	4628      	mov	r0, r5
 80031ec:	f000 fa56 	bl	800369c <_fflush_r>
 80031f0:	b938      	cbnz	r0, 8003202 <__swbuf_r+0x74>
 80031f2:	4638      	mov	r0, r7
 80031f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031f6:	4621      	mov	r1, r4
 80031f8:	4628      	mov	r0, r5
 80031fa:	f000 f805 	bl	8003208 <__swsetup_r>
 80031fe:	2800      	cmp	r0, #0
 8003200:	d0d5      	beq.n	80031ae <__swbuf_r+0x20>
 8003202:	f04f 37ff 	mov.w	r7, #4294967295
 8003206:	e7f4      	b.n	80031f2 <__swbuf_r+0x64>

08003208 <__swsetup_r>:
 8003208:	b538      	push	{r3, r4, r5, lr}
 800320a:	4b2a      	ldr	r3, [pc, #168]	; (80032b4 <__swsetup_r+0xac>)
 800320c:	4605      	mov	r5, r0
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	460c      	mov	r4, r1
 8003212:	b118      	cbz	r0, 800321c <__swsetup_r+0x14>
 8003214:	6a03      	ldr	r3, [r0, #32]
 8003216:	b90b      	cbnz	r3, 800321c <__swsetup_r+0x14>
 8003218:	f7ff fee4 	bl	8002fe4 <__sinit>
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003222:	0718      	lsls	r0, r3, #28
 8003224:	d422      	bmi.n	800326c <__swsetup_r+0x64>
 8003226:	06d9      	lsls	r1, r3, #27
 8003228:	d407      	bmi.n	800323a <__swsetup_r+0x32>
 800322a:	2309      	movs	r3, #9
 800322c:	602b      	str	r3, [r5, #0]
 800322e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003232:	f04f 30ff 	mov.w	r0, #4294967295
 8003236:	81a3      	strh	r3, [r4, #12]
 8003238:	e034      	b.n	80032a4 <__swsetup_r+0x9c>
 800323a:	0758      	lsls	r0, r3, #29
 800323c:	d512      	bpl.n	8003264 <__swsetup_r+0x5c>
 800323e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003240:	b141      	cbz	r1, 8003254 <__swsetup_r+0x4c>
 8003242:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003246:	4299      	cmp	r1, r3
 8003248:	d002      	beq.n	8003250 <__swsetup_r+0x48>
 800324a:	4628      	mov	r0, r5
 800324c:	f000 f8b0 	bl	80033b0 <_free_r>
 8003250:	2300      	movs	r3, #0
 8003252:	6363      	str	r3, [r4, #52]	; 0x34
 8003254:	89a3      	ldrh	r3, [r4, #12]
 8003256:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800325a:	81a3      	strh	r3, [r4, #12]
 800325c:	2300      	movs	r3, #0
 800325e:	6063      	str	r3, [r4, #4]
 8003260:	6923      	ldr	r3, [r4, #16]
 8003262:	6023      	str	r3, [r4, #0]
 8003264:	89a3      	ldrh	r3, [r4, #12]
 8003266:	f043 0308 	orr.w	r3, r3, #8
 800326a:	81a3      	strh	r3, [r4, #12]
 800326c:	6923      	ldr	r3, [r4, #16]
 800326e:	b94b      	cbnz	r3, 8003284 <__swsetup_r+0x7c>
 8003270:	89a3      	ldrh	r3, [r4, #12]
 8003272:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800327a:	d003      	beq.n	8003284 <__swsetup_r+0x7c>
 800327c:	4621      	mov	r1, r4
 800327e:	4628      	mov	r0, r5
 8003280:	f000 fa59 	bl	8003736 <__smakebuf_r>
 8003284:	89a0      	ldrh	r0, [r4, #12]
 8003286:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800328a:	f010 0301 	ands.w	r3, r0, #1
 800328e:	d00a      	beq.n	80032a6 <__swsetup_r+0x9e>
 8003290:	2300      	movs	r3, #0
 8003292:	60a3      	str	r3, [r4, #8]
 8003294:	6963      	ldr	r3, [r4, #20]
 8003296:	425b      	negs	r3, r3
 8003298:	61a3      	str	r3, [r4, #24]
 800329a:	6923      	ldr	r3, [r4, #16]
 800329c:	b943      	cbnz	r3, 80032b0 <__swsetup_r+0xa8>
 800329e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80032a2:	d1c4      	bne.n	800322e <__swsetup_r+0x26>
 80032a4:	bd38      	pop	{r3, r4, r5, pc}
 80032a6:	0781      	lsls	r1, r0, #30
 80032a8:	bf58      	it	pl
 80032aa:	6963      	ldrpl	r3, [r4, #20]
 80032ac:	60a3      	str	r3, [r4, #8]
 80032ae:	e7f4      	b.n	800329a <__swsetup_r+0x92>
 80032b0:	2000      	movs	r0, #0
 80032b2:	e7f7      	b.n	80032a4 <__swsetup_r+0x9c>
 80032b4:	200000a8 	.word	0x200000a8

080032b8 <memset>:
 80032b8:	4603      	mov	r3, r0
 80032ba:	4402      	add	r2, r0
 80032bc:	4293      	cmp	r3, r2
 80032be:	d100      	bne.n	80032c2 <memset+0xa>
 80032c0:	4770      	bx	lr
 80032c2:	f803 1b01 	strb.w	r1, [r3], #1
 80032c6:	e7f9      	b.n	80032bc <memset+0x4>

080032c8 <_close_r>:
 80032c8:	b538      	push	{r3, r4, r5, lr}
 80032ca:	2300      	movs	r3, #0
 80032cc:	4d05      	ldr	r5, [pc, #20]	; (80032e4 <_close_r+0x1c>)
 80032ce:	4604      	mov	r4, r0
 80032d0:	4608      	mov	r0, r1
 80032d2:	602b      	str	r3, [r5, #0]
 80032d4:	f7fd f938 	bl	8000548 <_close>
 80032d8:	1c43      	adds	r3, r0, #1
 80032da:	d102      	bne.n	80032e2 <_close_r+0x1a>
 80032dc:	682b      	ldr	r3, [r5, #0]
 80032de:	b103      	cbz	r3, 80032e2 <_close_r+0x1a>
 80032e0:	6023      	str	r3, [r4, #0]
 80032e2:	bd38      	pop	{r3, r4, r5, pc}
 80032e4:	2000026c 	.word	0x2000026c

080032e8 <_lseek_r>:
 80032e8:	b538      	push	{r3, r4, r5, lr}
 80032ea:	4604      	mov	r4, r0
 80032ec:	4608      	mov	r0, r1
 80032ee:	4611      	mov	r1, r2
 80032f0:	2200      	movs	r2, #0
 80032f2:	4d05      	ldr	r5, [pc, #20]	; (8003308 <_lseek_r+0x20>)
 80032f4:	602a      	str	r2, [r5, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	f7fd f94a 	bl	8000590 <_lseek>
 80032fc:	1c43      	adds	r3, r0, #1
 80032fe:	d102      	bne.n	8003306 <_lseek_r+0x1e>
 8003300:	682b      	ldr	r3, [r5, #0]
 8003302:	b103      	cbz	r3, 8003306 <_lseek_r+0x1e>
 8003304:	6023      	str	r3, [r4, #0]
 8003306:	bd38      	pop	{r3, r4, r5, pc}
 8003308:	2000026c 	.word	0x2000026c

0800330c <_read_r>:
 800330c:	b538      	push	{r3, r4, r5, lr}
 800330e:	4604      	mov	r4, r0
 8003310:	4608      	mov	r0, r1
 8003312:	4611      	mov	r1, r2
 8003314:	2200      	movs	r2, #0
 8003316:	4d05      	ldr	r5, [pc, #20]	; (800332c <_read_r+0x20>)
 8003318:	602a      	str	r2, [r5, #0]
 800331a:	461a      	mov	r2, r3
 800331c:	f7fd f8db 	bl	80004d6 <_read>
 8003320:	1c43      	adds	r3, r0, #1
 8003322:	d102      	bne.n	800332a <_read_r+0x1e>
 8003324:	682b      	ldr	r3, [r5, #0]
 8003326:	b103      	cbz	r3, 800332a <_read_r+0x1e>
 8003328:	6023      	str	r3, [r4, #0]
 800332a:	bd38      	pop	{r3, r4, r5, pc}
 800332c:	2000026c 	.word	0x2000026c

08003330 <_write_r>:
 8003330:	b538      	push	{r3, r4, r5, lr}
 8003332:	4604      	mov	r4, r0
 8003334:	4608      	mov	r0, r1
 8003336:	4611      	mov	r1, r2
 8003338:	2200      	movs	r2, #0
 800333a:	4d05      	ldr	r5, [pc, #20]	; (8003350 <_write_r+0x20>)
 800333c:	602a      	str	r2, [r5, #0]
 800333e:	461a      	mov	r2, r3
 8003340:	f7fd f8e6 	bl	8000510 <_write>
 8003344:	1c43      	adds	r3, r0, #1
 8003346:	d102      	bne.n	800334e <_write_r+0x1e>
 8003348:	682b      	ldr	r3, [r5, #0]
 800334a:	b103      	cbz	r3, 800334e <_write_r+0x1e>
 800334c:	6023      	str	r3, [r4, #0]
 800334e:	bd38      	pop	{r3, r4, r5, pc}
 8003350:	2000026c 	.word	0x2000026c

08003354 <__errno>:
 8003354:	4b01      	ldr	r3, [pc, #4]	; (800335c <__errno+0x8>)
 8003356:	6818      	ldr	r0, [r3, #0]
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	200000a8 	.word	0x200000a8

08003360 <__libc_init_array>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	2600      	movs	r6, #0
 8003364:	4d0c      	ldr	r5, [pc, #48]	; (8003398 <__libc_init_array+0x38>)
 8003366:	4c0d      	ldr	r4, [pc, #52]	; (800339c <__libc_init_array+0x3c>)
 8003368:	1b64      	subs	r4, r4, r5
 800336a:	10a4      	asrs	r4, r4, #2
 800336c:	42a6      	cmp	r6, r4
 800336e:	d109      	bne.n	8003384 <__libc_init_array+0x24>
 8003370:	f000 fa50 	bl	8003814 <_init>
 8003374:	2600      	movs	r6, #0
 8003376:	4d0a      	ldr	r5, [pc, #40]	; (80033a0 <__libc_init_array+0x40>)
 8003378:	4c0a      	ldr	r4, [pc, #40]	; (80033a4 <__libc_init_array+0x44>)
 800337a:	1b64      	subs	r4, r4, r5
 800337c:	10a4      	asrs	r4, r4, #2
 800337e:	42a6      	cmp	r6, r4
 8003380:	d105      	bne.n	800338e <__libc_init_array+0x2e>
 8003382:	bd70      	pop	{r4, r5, r6, pc}
 8003384:	f855 3b04 	ldr.w	r3, [r5], #4
 8003388:	4798      	blx	r3
 800338a:	3601      	adds	r6, #1
 800338c:	e7ee      	b.n	800336c <__libc_init_array+0xc>
 800338e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003392:	4798      	blx	r3
 8003394:	3601      	adds	r6, #1
 8003396:	e7f2      	b.n	800337e <__libc_init_array+0x1e>
 8003398:	080038a0 	.word	0x080038a0
 800339c:	080038a0 	.word	0x080038a0
 80033a0:	080038a0 	.word	0x080038a0
 80033a4:	080038a4 	.word	0x080038a4

080033a8 <__retarget_lock_init_recursive>:
 80033a8:	4770      	bx	lr

080033aa <__retarget_lock_acquire_recursive>:
 80033aa:	4770      	bx	lr

080033ac <__retarget_lock_release_recursive>:
 80033ac:	4770      	bx	lr
	...

080033b0 <_free_r>:
 80033b0:	b538      	push	{r3, r4, r5, lr}
 80033b2:	4605      	mov	r5, r0
 80033b4:	2900      	cmp	r1, #0
 80033b6:	d040      	beq.n	800343a <_free_r+0x8a>
 80033b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033bc:	1f0c      	subs	r4, r1, #4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bfb8      	it	lt
 80033c2:	18e4      	addlt	r4, r4, r3
 80033c4:	f000 f8dc 	bl	8003580 <__malloc_lock>
 80033c8:	4a1c      	ldr	r2, [pc, #112]	; (800343c <_free_r+0x8c>)
 80033ca:	6813      	ldr	r3, [r2, #0]
 80033cc:	b933      	cbnz	r3, 80033dc <_free_r+0x2c>
 80033ce:	6063      	str	r3, [r4, #4]
 80033d0:	6014      	str	r4, [r2, #0]
 80033d2:	4628      	mov	r0, r5
 80033d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033d8:	f000 b8d8 	b.w	800358c <__malloc_unlock>
 80033dc:	42a3      	cmp	r3, r4
 80033de:	d908      	bls.n	80033f2 <_free_r+0x42>
 80033e0:	6820      	ldr	r0, [r4, #0]
 80033e2:	1821      	adds	r1, r4, r0
 80033e4:	428b      	cmp	r3, r1
 80033e6:	bf01      	itttt	eq
 80033e8:	6819      	ldreq	r1, [r3, #0]
 80033ea:	685b      	ldreq	r3, [r3, #4]
 80033ec:	1809      	addeq	r1, r1, r0
 80033ee:	6021      	streq	r1, [r4, #0]
 80033f0:	e7ed      	b.n	80033ce <_free_r+0x1e>
 80033f2:	461a      	mov	r2, r3
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	b10b      	cbz	r3, 80033fc <_free_r+0x4c>
 80033f8:	42a3      	cmp	r3, r4
 80033fa:	d9fa      	bls.n	80033f2 <_free_r+0x42>
 80033fc:	6811      	ldr	r1, [r2, #0]
 80033fe:	1850      	adds	r0, r2, r1
 8003400:	42a0      	cmp	r0, r4
 8003402:	d10b      	bne.n	800341c <_free_r+0x6c>
 8003404:	6820      	ldr	r0, [r4, #0]
 8003406:	4401      	add	r1, r0
 8003408:	1850      	adds	r0, r2, r1
 800340a:	4283      	cmp	r3, r0
 800340c:	6011      	str	r1, [r2, #0]
 800340e:	d1e0      	bne.n	80033d2 <_free_r+0x22>
 8003410:	6818      	ldr	r0, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	4408      	add	r0, r1
 8003416:	6010      	str	r0, [r2, #0]
 8003418:	6053      	str	r3, [r2, #4]
 800341a:	e7da      	b.n	80033d2 <_free_r+0x22>
 800341c:	d902      	bls.n	8003424 <_free_r+0x74>
 800341e:	230c      	movs	r3, #12
 8003420:	602b      	str	r3, [r5, #0]
 8003422:	e7d6      	b.n	80033d2 <_free_r+0x22>
 8003424:	6820      	ldr	r0, [r4, #0]
 8003426:	1821      	adds	r1, r4, r0
 8003428:	428b      	cmp	r3, r1
 800342a:	bf01      	itttt	eq
 800342c:	6819      	ldreq	r1, [r3, #0]
 800342e:	685b      	ldreq	r3, [r3, #4]
 8003430:	1809      	addeq	r1, r1, r0
 8003432:	6021      	streq	r1, [r4, #0]
 8003434:	6063      	str	r3, [r4, #4]
 8003436:	6054      	str	r4, [r2, #4]
 8003438:	e7cb      	b.n	80033d2 <_free_r+0x22>
 800343a:	bd38      	pop	{r3, r4, r5, pc}
 800343c:	20000274 	.word	0x20000274

08003440 <sbrk_aligned>:
 8003440:	b570      	push	{r4, r5, r6, lr}
 8003442:	4e0e      	ldr	r6, [pc, #56]	; (800347c <sbrk_aligned+0x3c>)
 8003444:	460c      	mov	r4, r1
 8003446:	6831      	ldr	r1, [r6, #0]
 8003448:	4605      	mov	r5, r0
 800344a:	b911      	cbnz	r1, 8003452 <sbrk_aligned+0x12>
 800344c:	f000 f9d2 	bl	80037f4 <_sbrk_r>
 8003450:	6030      	str	r0, [r6, #0]
 8003452:	4621      	mov	r1, r4
 8003454:	4628      	mov	r0, r5
 8003456:	f000 f9cd 	bl	80037f4 <_sbrk_r>
 800345a:	1c43      	adds	r3, r0, #1
 800345c:	d00a      	beq.n	8003474 <sbrk_aligned+0x34>
 800345e:	1cc4      	adds	r4, r0, #3
 8003460:	f024 0403 	bic.w	r4, r4, #3
 8003464:	42a0      	cmp	r0, r4
 8003466:	d007      	beq.n	8003478 <sbrk_aligned+0x38>
 8003468:	1a21      	subs	r1, r4, r0
 800346a:	4628      	mov	r0, r5
 800346c:	f000 f9c2 	bl	80037f4 <_sbrk_r>
 8003470:	3001      	adds	r0, #1
 8003472:	d101      	bne.n	8003478 <sbrk_aligned+0x38>
 8003474:	f04f 34ff 	mov.w	r4, #4294967295
 8003478:	4620      	mov	r0, r4
 800347a:	bd70      	pop	{r4, r5, r6, pc}
 800347c:	20000278 	.word	0x20000278

08003480 <_malloc_r>:
 8003480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003484:	1ccd      	adds	r5, r1, #3
 8003486:	f025 0503 	bic.w	r5, r5, #3
 800348a:	3508      	adds	r5, #8
 800348c:	2d0c      	cmp	r5, #12
 800348e:	bf38      	it	cc
 8003490:	250c      	movcc	r5, #12
 8003492:	2d00      	cmp	r5, #0
 8003494:	4607      	mov	r7, r0
 8003496:	db01      	blt.n	800349c <_malloc_r+0x1c>
 8003498:	42a9      	cmp	r1, r5
 800349a:	d905      	bls.n	80034a8 <_malloc_r+0x28>
 800349c:	230c      	movs	r3, #12
 800349e:	2600      	movs	r6, #0
 80034a0:	603b      	str	r3, [r7, #0]
 80034a2:	4630      	mov	r0, r6
 80034a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034a8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800357c <_malloc_r+0xfc>
 80034ac:	f000 f868 	bl	8003580 <__malloc_lock>
 80034b0:	f8d8 3000 	ldr.w	r3, [r8]
 80034b4:	461c      	mov	r4, r3
 80034b6:	bb5c      	cbnz	r4, 8003510 <_malloc_r+0x90>
 80034b8:	4629      	mov	r1, r5
 80034ba:	4638      	mov	r0, r7
 80034bc:	f7ff ffc0 	bl	8003440 <sbrk_aligned>
 80034c0:	1c43      	adds	r3, r0, #1
 80034c2:	4604      	mov	r4, r0
 80034c4:	d155      	bne.n	8003572 <_malloc_r+0xf2>
 80034c6:	f8d8 4000 	ldr.w	r4, [r8]
 80034ca:	4626      	mov	r6, r4
 80034cc:	2e00      	cmp	r6, #0
 80034ce:	d145      	bne.n	800355c <_malloc_r+0xdc>
 80034d0:	2c00      	cmp	r4, #0
 80034d2:	d048      	beq.n	8003566 <_malloc_r+0xe6>
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	4631      	mov	r1, r6
 80034d8:	4638      	mov	r0, r7
 80034da:	eb04 0903 	add.w	r9, r4, r3
 80034de:	f000 f989 	bl	80037f4 <_sbrk_r>
 80034e2:	4581      	cmp	r9, r0
 80034e4:	d13f      	bne.n	8003566 <_malloc_r+0xe6>
 80034e6:	6821      	ldr	r1, [r4, #0]
 80034e8:	4638      	mov	r0, r7
 80034ea:	1a6d      	subs	r5, r5, r1
 80034ec:	4629      	mov	r1, r5
 80034ee:	f7ff ffa7 	bl	8003440 <sbrk_aligned>
 80034f2:	3001      	adds	r0, #1
 80034f4:	d037      	beq.n	8003566 <_malloc_r+0xe6>
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	442b      	add	r3, r5
 80034fa:	6023      	str	r3, [r4, #0]
 80034fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d038      	beq.n	8003576 <_malloc_r+0xf6>
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	42a2      	cmp	r2, r4
 8003508:	d12b      	bne.n	8003562 <_malloc_r+0xe2>
 800350a:	2200      	movs	r2, #0
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	e00f      	b.n	8003530 <_malloc_r+0xb0>
 8003510:	6822      	ldr	r2, [r4, #0]
 8003512:	1b52      	subs	r2, r2, r5
 8003514:	d41f      	bmi.n	8003556 <_malloc_r+0xd6>
 8003516:	2a0b      	cmp	r2, #11
 8003518:	d917      	bls.n	800354a <_malloc_r+0xca>
 800351a:	1961      	adds	r1, r4, r5
 800351c:	42a3      	cmp	r3, r4
 800351e:	6025      	str	r5, [r4, #0]
 8003520:	bf18      	it	ne
 8003522:	6059      	strne	r1, [r3, #4]
 8003524:	6863      	ldr	r3, [r4, #4]
 8003526:	bf08      	it	eq
 8003528:	f8c8 1000 	streq.w	r1, [r8]
 800352c:	5162      	str	r2, [r4, r5]
 800352e:	604b      	str	r3, [r1, #4]
 8003530:	4638      	mov	r0, r7
 8003532:	f104 060b 	add.w	r6, r4, #11
 8003536:	f000 f829 	bl	800358c <__malloc_unlock>
 800353a:	f026 0607 	bic.w	r6, r6, #7
 800353e:	1d23      	adds	r3, r4, #4
 8003540:	1af2      	subs	r2, r6, r3
 8003542:	d0ae      	beq.n	80034a2 <_malloc_r+0x22>
 8003544:	1b9b      	subs	r3, r3, r6
 8003546:	50a3      	str	r3, [r4, r2]
 8003548:	e7ab      	b.n	80034a2 <_malloc_r+0x22>
 800354a:	42a3      	cmp	r3, r4
 800354c:	6862      	ldr	r2, [r4, #4]
 800354e:	d1dd      	bne.n	800350c <_malloc_r+0x8c>
 8003550:	f8c8 2000 	str.w	r2, [r8]
 8003554:	e7ec      	b.n	8003530 <_malloc_r+0xb0>
 8003556:	4623      	mov	r3, r4
 8003558:	6864      	ldr	r4, [r4, #4]
 800355a:	e7ac      	b.n	80034b6 <_malloc_r+0x36>
 800355c:	4634      	mov	r4, r6
 800355e:	6876      	ldr	r6, [r6, #4]
 8003560:	e7b4      	b.n	80034cc <_malloc_r+0x4c>
 8003562:	4613      	mov	r3, r2
 8003564:	e7cc      	b.n	8003500 <_malloc_r+0x80>
 8003566:	230c      	movs	r3, #12
 8003568:	4638      	mov	r0, r7
 800356a:	603b      	str	r3, [r7, #0]
 800356c:	f000 f80e 	bl	800358c <__malloc_unlock>
 8003570:	e797      	b.n	80034a2 <_malloc_r+0x22>
 8003572:	6025      	str	r5, [r4, #0]
 8003574:	e7dc      	b.n	8003530 <_malloc_r+0xb0>
 8003576:	605b      	str	r3, [r3, #4]
 8003578:	deff      	udf	#255	; 0xff
 800357a:	bf00      	nop
 800357c:	20000274 	.word	0x20000274

08003580 <__malloc_lock>:
 8003580:	4801      	ldr	r0, [pc, #4]	; (8003588 <__malloc_lock+0x8>)
 8003582:	f7ff bf12 	b.w	80033aa <__retarget_lock_acquire_recursive>
 8003586:	bf00      	nop
 8003588:	20000270 	.word	0x20000270

0800358c <__malloc_unlock>:
 800358c:	4801      	ldr	r0, [pc, #4]	; (8003594 <__malloc_unlock+0x8>)
 800358e:	f7ff bf0d 	b.w	80033ac <__retarget_lock_release_recursive>
 8003592:	bf00      	nop
 8003594:	20000270 	.word	0x20000270

08003598 <__sflush_r>:
 8003598:	898a      	ldrh	r2, [r1, #12]
 800359a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800359c:	4605      	mov	r5, r0
 800359e:	0710      	lsls	r0, r2, #28
 80035a0:	460c      	mov	r4, r1
 80035a2:	d457      	bmi.n	8003654 <__sflush_r+0xbc>
 80035a4:	684b      	ldr	r3, [r1, #4]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	dc04      	bgt.n	80035b4 <__sflush_r+0x1c>
 80035aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	dc01      	bgt.n	80035b4 <__sflush_r+0x1c>
 80035b0:	2000      	movs	r0, #0
 80035b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035b6:	2e00      	cmp	r6, #0
 80035b8:	d0fa      	beq.n	80035b0 <__sflush_r+0x18>
 80035ba:	2300      	movs	r3, #0
 80035bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80035c0:	682f      	ldr	r7, [r5, #0]
 80035c2:	6a21      	ldr	r1, [r4, #32]
 80035c4:	602b      	str	r3, [r5, #0]
 80035c6:	d032      	beq.n	800362e <__sflush_r+0x96>
 80035c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80035ca:	89a3      	ldrh	r3, [r4, #12]
 80035cc:	075a      	lsls	r2, r3, #29
 80035ce:	d505      	bpl.n	80035dc <__sflush_r+0x44>
 80035d0:	6863      	ldr	r3, [r4, #4]
 80035d2:	1ac0      	subs	r0, r0, r3
 80035d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80035d6:	b10b      	cbz	r3, 80035dc <__sflush_r+0x44>
 80035d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80035da:	1ac0      	subs	r0, r0, r3
 80035dc:	2300      	movs	r3, #0
 80035de:	4602      	mov	r2, r0
 80035e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80035e2:	4628      	mov	r0, r5
 80035e4:	6a21      	ldr	r1, [r4, #32]
 80035e6:	47b0      	blx	r6
 80035e8:	1c43      	adds	r3, r0, #1
 80035ea:	89a3      	ldrh	r3, [r4, #12]
 80035ec:	d106      	bne.n	80035fc <__sflush_r+0x64>
 80035ee:	6829      	ldr	r1, [r5, #0]
 80035f0:	291d      	cmp	r1, #29
 80035f2:	d82b      	bhi.n	800364c <__sflush_r+0xb4>
 80035f4:	4a28      	ldr	r2, [pc, #160]	; (8003698 <__sflush_r+0x100>)
 80035f6:	410a      	asrs	r2, r1
 80035f8:	07d6      	lsls	r6, r2, #31
 80035fa:	d427      	bmi.n	800364c <__sflush_r+0xb4>
 80035fc:	2200      	movs	r2, #0
 80035fe:	6062      	str	r2, [r4, #4]
 8003600:	6922      	ldr	r2, [r4, #16]
 8003602:	04d9      	lsls	r1, r3, #19
 8003604:	6022      	str	r2, [r4, #0]
 8003606:	d504      	bpl.n	8003612 <__sflush_r+0x7a>
 8003608:	1c42      	adds	r2, r0, #1
 800360a:	d101      	bne.n	8003610 <__sflush_r+0x78>
 800360c:	682b      	ldr	r3, [r5, #0]
 800360e:	b903      	cbnz	r3, 8003612 <__sflush_r+0x7a>
 8003610:	6560      	str	r0, [r4, #84]	; 0x54
 8003612:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003614:	602f      	str	r7, [r5, #0]
 8003616:	2900      	cmp	r1, #0
 8003618:	d0ca      	beq.n	80035b0 <__sflush_r+0x18>
 800361a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800361e:	4299      	cmp	r1, r3
 8003620:	d002      	beq.n	8003628 <__sflush_r+0x90>
 8003622:	4628      	mov	r0, r5
 8003624:	f7ff fec4 	bl	80033b0 <_free_r>
 8003628:	2000      	movs	r0, #0
 800362a:	6360      	str	r0, [r4, #52]	; 0x34
 800362c:	e7c1      	b.n	80035b2 <__sflush_r+0x1a>
 800362e:	2301      	movs	r3, #1
 8003630:	4628      	mov	r0, r5
 8003632:	47b0      	blx	r6
 8003634:	1c41      	adds	r1, r0, #1
 8003636:	d1c8      	bne.n	80035ca <__sflush_r+0x32>
 8003638:	682b      	ldr	r3, [r5, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0c5      	beq.n	80035ca <__sflush_r+0x32>
 800363e:	2b1d      	cmp	r3, #29
 8003640:	d001      	beq.n	8003646 <__sflush_r+0xae>
 8003642:	2b16      	cmp	r3, #22
 8003644:	d101      	bne.n	800364a <__sflush_r+0xb2>
 8003646:	602f      	str	r7, [r5, #0]
 8003648:	e7b2      	b.n	80035b0 <__sflush_r+0x18>
 800364a:	89a3      	ldrh	r3, [r4, #12]
 800364c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003650:	81a3      	strh	r3, [r4, #12]
 8003652:	e7ae      	b.n	80035b2 <__sflush_r+0x1a>
 8003654:	690f      	ldr	r7, [r1, #16]
 8003656:	2f00      	cmp	r7, #0
 8003658:	d0aa      	beq.n	80035b0 <__sflush_r+0x18>
 800365a:	0793      	lsls	r3, r2, #30
 800365c:	bf18      	it	ne
 800365e:	2300      	movne	r3, #0
 8003660:	680e      	ldr	r6, [r1, #0]
 8003662:	bf08      	it	eq
 8003664:	694b      	ldreq	r3, [r1, #20]
 8003666:	1bf6      	subs	r6, r6, r7
 8003668:	600f      	str	r7, [r1, #0]
 800366a:	608b      	str	r3, [r1, #8]
 800366c:	2e00      	cmp	r6, #0
 800366e:	dd9f      	ble.n	80035b0 <__sflush_r+0x18>
 8003670:	4633      	mov	r3, r6
 8003672:	463a      	mov	r2, r7
 8003674:	4628      	mov	r0, r5
 8003676:	6a21      	ldr	r1, [r4, #32]
 8003678:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800367c:	47e0      	blx	ip
 800367e:	2800      	cmp	r0, #0
 8003680:	dc06      	bgt.n	8003690 <__sflush_r+0xf8>
 8003682:	89a3      	ldrh	r3, [r4, #12]
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800368c:	81a3      	strh	r3, [r4, #12]
 800368e:	e790      	b.n	80035b2 <__sflush_r+0x1a>
 8003690:	4407      	add	r7, r0
 8003692:	1a36      	subs	r6, r6, r0
 8003694:	e7ea      	b.n	800366c <__sflush_r+0xd4>
 8003696:	bf00      	nop
 8003698:	dfbffffe 	.word	0xdfbffffe

0800369c <_fflush_r>:
 800369c:	b538      	push	{r3, r4, r5, lr}
 800369e:	690b      	ldr	r3, [r1, #16]
 80036a0:	4605      	mov	r5, r0
 80036a2:	460c      	mov	r4, r1
 80036a4:	b913      	cbnz	r3, 80036ac <_fflush_r+0x10>
 80036a6:	2500      	movs	r5, #0
 80036a8:	4628      	mov	r0, r5
 80036aa:	bd38      	pop	{r3, r4, r5, pc}
 80036ac:	b118      	cbz	r0, 80036b6 <_fflush_r+0x1a>
 80036ae:	6a03      	ldr	r3, [r0, #32]
 80036b0:	b90b      	cbnz	r3, 80036b6 <_fflush_r+0x1a>
 80036b2:	f7ff fc97 	bl	8002fe4 <__sinit>
 80036b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f3      	beq.n	80036a6 <_fflush_r+0xa>
 80036be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80036c0:	07d0      	lsls	r0, r2, #31
 80036c2:	d404      	bmi.n	80036ce <_fflush_r+0x32>
 80036c4:	0599      	lsls	r1, r3, #22
 80036c6:	d402      	bmi.n	80036ce <_fflush_r+0x32>
 80036c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036ca:	f7ff fe6e 	bl	80033aa <__retarget_lock_acquire_recursive>
 80036ce:	4628      	mov	r0, r5
 80036d0:	4621      	mov	r1, r4
 80036d2:	f7ff ff61 	bl	8003598 <__sflush_r>
 80036d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80036d8:	4605      	mov	r5, r0
 80036da:	07da      	lsls	r2, r3, #31
 80036dc:	d4e4      	bmi.n	80036a8 <_fflush_r+0xc>
 80036de:	89a3      	ldrh	r3, [r4, #12]
 80036e0:	059b      	lsls	r3, r3, #22
 80036e2:	d4e1      	bmi.n	80036a8 <_fflush_r+0xc>
 80036e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80036e6:	f7ff fe61 	bl	80033ac <__retarget_lock_release_recursive>
 80036ea:	e7dd      	b.n	80036a8 <_fflush_r+0xc>

080036ec <__swhatbuf_r>:
 80036ec:	b570      	push	{r4, r5, r6, lr}
 80036ee:	460c      	mov	r4, r1
 80036f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036f4:	4615      	mov	r5, r2
 80036f6:	2900      	cmp	r1, #0
 80036f8:	461e      	mov	r6, r3
 80036fa:	b096      	sub	sp, #88	; 0x58
 80036fc:	da0c      	bge.n	8003718 <__swhatbuf_r+0x2c>
 80036fe:	89a3      	ldrh	r3, [r4, #12]
 8003700:	2100      	movs	r1, #0
 8003702:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003706:	bf0c      	ite	eq
 8003708:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800370c:	2340      	movne	r3, #64	; 0x40
 800370e:	2000      	movs	r0, #0
 8003710:	6031      	str	r1, [r6, #0]
 8003712:	602b      	str	r3, [r5, #0]
 8003714:	b016      	add	sp, #88	; 0x58
 8003716:	bd70      	pop	{r4, r5, r6, pc}
 8003718:	466a      	mov	r2, sp
 800371a:	f000 f849 	bl	80037b0 <_fstat_r>
 800371e:	2800      	cmp	r0, #0
 8003720:	dbed      	blt.n	80036fe <__swhatbuf_r+0x12>
 8003722:	9901      	ldr	r1, [sp, #4]
 8003724:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003728:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800372c:	4259      	negs	r1, r3
 800372e:	4159      	adcs	r1, r3
 8003730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003734:	e7eb      	b.n	800370e <__swhatbuf_r+0x22>

08003736 <__smakebuf_r>:
 8003736:	898b      	ldrh	r3, [r1, #12]
 8003738:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800373a:	079d      	lsls	r5, r3, #30
 800373c:	4606      	mov	r6, r0
 800373e:	460c      	mov	r4, r1
 8003740:	d507      	bpl.n	8003752 <__smakebuf_r+0x1c>
 8003742:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003746:	6023      	str	r3, [r4, #0]
 8003748:	6123      	str	r3, [r4, #16]
 800374a:	2301      	movs	r3, #1
 800374c:	6163      	str	r3, [r4, #20]
 800374e:	b002      	add	sp, #8
 8003750:	bd70      	pop	{r4, r5, r6, pc}
 8003752:	466a      	mov	r2, sp
 8003754:	ab01      	add	r3, sp, #4
 8003756:	f7ff ffc9 	bl	80036ec <__swhatbuf_r>
 800375a:	9900      	ldr	r1, [sp, #0]
 800375c:	4605      	mov	r5, r0
 800375e:	4630      	mov	r0, r6
 8003760:	f7ff fe8e 	bl	8003480 <_malloc_r>
 8003764:	b948      	cbnz	r0, 800377a <__smakebuf_r+0x44>
 8003766:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800376a:	059a      	lsls	r2, r3, #22
 800376c:	d4ef      	bmi.n	800374e <__smakebuf_r+0x18>
 800376e:	f023 0303 	bic.w	r3, r3, #3
 8003772:	f043 0302 	orr.w	r3, r3, #2
 8003776:	81a3      	strh	r3, [r4, #12]
 8003778:	e7e3      	b.n	8003742 <__smakebuf_r+0xc>
 800377a:	89a3      	ldrh	r3, [r4, #12]
 800377c:	6020      	str	r0, [r4, #0]
 800377e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003782:	81a3      	strh	r3, [r4, #12]
 8003784:	9b00      	ldr	r3, [sp, #0]
 8003786:	6120      	str	r0, [r4, #16]
 8003788:	6163      	str	r3, [r4, #20]
 800378a:	9b01      	ldr	r3, [sp, #4]
 800378c:	b15b      	cbz	r3, 80037a6 <__smakebuf_r+0x70>
 800378e:	4630      	mov	r0, r6
 8003790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003794:	f000 f81e 	bl	80037d4 <_isatty_r>
 8003798:	b128      	cbz	r0, 80037a6 <__smakebuf_r+0x70>
 800379a:	89a3      	ldrh	r3, [r4, #12]
 800379c:	f023 0303 	bic.w	r3, r3, #3
 80037a0:	f043 0301 	orr.w	r3, r3, #1
 80037a4:	81a3      	strh	r3, [r4, #12]
 80037a6:	89a3      	ldrh	r3, [r4, #12]
 80037a8:	431d      	orrs	r5, r3
 80037aa:	81a5      	strh	r5, [r4, #12]
 80037ac:	e7cf      	b.n	800374e <__smakebuf_r+0x18>
	...

080037b0 <_fstat_r>:
 80037b0:	b538      	push	{r3, r4, r5, lr}
 80037b2:	2300      	movs	r3, #0
 80037b4:	4d06      	ldr	r5, [pc, #24]	; (80037d0 <_fstat_r+0x20>)
 80037b6:	4604      	mov	r4, r0
 80037b8:	4608      	mov	r0, r1
 80037ba:	4611      	mov	r1, r2
 80037bc:	602b      	str	r3, [r5, #0]
 80037be:	f7fc fece 	bl	800055e <_fstat>
 80037c2:	1c43      	adds	r3, r0, #1
 80037c4:	d102      	bne.n	80037cc <_fstat_r+0x1c>
 80037c6:	682b      	ldr	r3, [r5, #0]
 80037c8:	b103      	cbz	r3, 80037cc <_fstat_r+0x1c>
 80037ca:	6023      	str	r3, [r4, #0]
 80037cc:	bd38      	pop	{r3, r4, r5, pc}
 80037ce:	bf00      	nop
 80037d0:	2000026c 	.word	0x2000026c

080037d4 <_isatty_r>:
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	2300      	movs	r3, #0
 80037d8:	4d05      	ldr	r5, [pc, #20]	; (80037f0 <_isatty_r+0x1c>)
 80037da:	4604      	mov	r4, r0
 80037dc:	4608      	mov	r0, r1
 80037de:	602b      	str	r3, [r5, #0]
 80037e0:	f7fc fecc 	bl	800057c <_isatty>
 80037e4:	1c43      	adds	r3, r0, #1
 80037e6:	d102      	bne.n	80037ee <_isatty_r+0x1a>
 80037e8:	682b      	ldr	r3, [r5, #0]
 80037ea:	b103      	cbz	r3, 80037ee <_isatty_r+0x1a>
 80037ec:	6023      	str	r3, [r4, #0]
 80037ee:	bd38      	pop	{r3, r4, r5, pc}
 80037f0:	2000026c 	.word	0x2000026c

080037f4 <_sbrk_r>:
 80037f4:	b538      	push	{r3, r4, r5, lr}
 80037f6:	2300      	movs	r3, #0
 80037f8:	4d05      	ldr	r5, [pc, #20]	; (8003810 <_sbrk_r+0x1c>)
 80037fa:	4604      	mov	r4, r0
 80037fc:	4608      	mov	r0, r1
 80037fe:	602b      	str	r3, [r5, #0]
 8003800:	f7fc fed2 	bl	80005a8 <_sbrk>
 8003804:	1c43      	adds	r3, r0, #1
 8003806:	d102      	bne.n	800380e <_sbrk_r+0x1a>
 8003808:	682b      	ldr	r3, [r5, #0]
 800380a:	b103      	cbz	r3, 800380e <_sbrk_r+0x1a>
 800380c:	6023      	str	r3, [r4, #0]
 800380e:	bd38      	pop	{r3, r4, r5, pc}
 8003810:	2000026c 	.word	0x2000026c

08003814 <_init>:
 8003814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003816:	bf00      	nop
 8003818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800381a:	bc08      	pop	{r3}
 800381c:	469e      	mov	lr, r3
 800381e:	4770      	bx	lr

08003820 <_fini>:
 8003820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003822:	bf00      	nop
 8003824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003826:	bc08      	pop	{r3}
 8003828:	469e      	mov	lr, r3
 800382a:	4770      	bx	lr
