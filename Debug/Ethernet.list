
Ethernet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003734  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003874  08003874  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08003874  08003874  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003874  08003874  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003874  08003874  00013874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003878  08003878  00013878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800387c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  20000058  080038d4  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080038d4  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006dde  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b6c  00000000  00000000  00026ea2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  00028a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000619  00000000  00000000  00029228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016a2e  00000000  00000000  00029841  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090b1  00000000  00000000  0004026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00084ad6  00000000  00000000  00049320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001f34  00000000  00000000  000cddf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000cfd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08003828 	.word	0x08003828

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08003828 	.word	0x08003828

0800014c <main>:
netmode_type gNetMode = {
		NM_FORCEARP | NM_WAKEONLAN | NM_PPPOE | 128
};

int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000152:	af00      	add	r7, sp, #0
  HAL_Init();
 8000154:	f001 fece 	bl	8001ef4 <HAL_Init>

  SystemClock_Config();
 8000158:	f000 f862 	bl	8000220 <SystemClock_Config>

  MX_GPIO_Init();
 800015c:	f000 f8dc 	bl	8000318 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000160:	f000 f8a4 	bl	80002ac <MX_SPI1_Init>
  W5500Init();
 8000164:	f001 f8b6 	bl	80012d4 <W5500Init>

  ctlnetwork(CN_SET_NETINFO, (void*) &gWIZNETINFO2);
 8000168:	492a      	ldr	r1, [pc, #168]	; (8000214 <main+0xc8>)
 800016a:	2000      	movs	r0, #0
 800016c:	f001 fab4 	bl	80016d8 <ctlnetwork>
//  ctlnetwork(CN_SET_NETMODE, (void*) &gNetMode);

  // Open a TCP server socket
  socket(socketNumber, Sn_MR_TCP, port, 0);
 8000170:	4b29      	ldr	r3, [pc, #164]	; (8000218 <main+0xcc>)
 8000172:	7818      	ldrb	r0, [r3, #0]
 8000174:	4b29      	ldr	r3, [pc, #164]	; (800021c <main+0xd0>)
 8000176:	881a      	ldrh	r2, [r3, #0]
 8000178:	2300      	movs	r3, #0
 800017a:	2101      	movs	r1, #1
 800017c:	f000 fcaa 	bl	8000ad4 <socket>

  // Listen for incoming connections
  listen(socketNumber);
 8000180:	4b25      	ldr	r3, [pc, #148]	; (8000218 <main+0xcc>)
 8000182:	781b      	ldrb	r3, [r3, #0]
 8000184:	4618      	mov	r0, r3
 8000186:	f000 fe27 	bl	8000dd8 <listen>
  //data will be placed here
  uint8_t buffer[1024];
  while (1) {
      // Open a TCP server socket
      socket(socketNumber, Sn_MR_TCP, port, 0);
 800018a:	4b23      	ldr	r3, [pc, #140]	; (8000218 <main+0xcc>)
 800018c:	7818      	ldrb	r0, [r3, #0]
 800018e:	4b23      	ldr	r3, [pc, #140]	; (800021c <main+0xd0>)
 8000190:	881a      	ldrh	r2, [r3, #0]
 8000192:	2300      	movs	r3, #0
 8000194:	2101      	movs	r1, #1
 8000196:	f000 fc9d 	bl	8000ad4 <socket>

      // Listen for incoming connections
      listen(socketNumber);
 800019a:	4b1f      	ldr	r3, [pc, #124]	; (8000218 <main+0xcc>)
 800019c:	781b      	ldrb	r3, [r3, #0]
 800019e:	4618      	mov	r0, r3
 80001a0:	f000 fe1a 	bl	8000dd8 <listen>

      while (1) {
          // Check if a client is trying to connect
          if (getSn_SR(socketNumber) == SOCK_ESTABLISHED) {
 80001a4:	4b1c      	ldr	r3, [pc, #112]	; (8000218 <main+0xcc>)
 80001a6:	781b      	ldrb	r3, [r3, #0]
 80001a8:	009b      	lsls	r3, r3, #2
 80001aa:	3301      	adds	r3, #1
 80001ac:	00db      	lsls	r3, r3, #3
 80001ae:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80001b2:	4618      	mov	r0, r3
 80001b4:	f000 f9e6 	bl	8000584 <WIZCHIP_READ>
 80001b8:	4603      	mov	r3, r0
 80001ba:	2b17      	cmp	r3, #23
 80001bc:	d115      	bne.n	80001ea <main+0x9e>
              int receivedSize = 0;
 80001be:	2300      	movs	r3, #0
 80001c0:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

              // Receive data from the client
              receivedSize = recv(socketNumber, buffer, sizeof(buffer));
 80001c4:	4b14      	ldr	r3, [pc, #80]	; (8000218 <main+0xcc>)
 80001c6:	781b      	ldrb	r3, [r3, #0]
 80001c8:	1d39      	adds	r1, r7, #4
 80001ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80001ce:	4618      	mov	r0, r3
 80001d0:	f000 ff56 	bl	8001080 <recv>
 80001d4:	f8c7 0404 	str.w	r0, [r7, #1028]	; 0x404

              // Process the received data (you can implement your own logic here)

              // Send a response back to the client
              send(socketNumber, buffer, receivedSize);
 80001d8:	4b0f      	ldr	r3, [pc, #60]	; (8000218 <main+0xcc>)
 80001da:	781b      	ldrb	r3, [r3, #0]
 80001dc:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 80001e0:	b292      	uxth	r2, r2
 80001e2:	1d39      	adds	r1, r7, #4
 80001e4:	4618      	mov	r0, r3
 80001e6:	f000 fe51 	bl	8000e8c <send>
          }

          // Check for disconnection
          if (getSn_SR(socketNumber) == SOCK_CLOSED) {
 80001ea:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <main+0xcc>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	009b      	lsls	r3, r3, #2
 80001f0:	3301      	adds	r3, #1
 80001f2:	00db      	lsls	r3, r3, #3
 80001f4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80001f8:	4618      	mov	r0, r3
 80001fa:	f000 f9c3 	bl	8000584 <WIZCHIP_READ>
 80001fe:	4603      	mov	r3, r0
 8000200:	2b00      	cmp	r3, #0
 8000202:	d1cf      	bne.n	80001a4 <main+0x58>
              // Close the socket
              close(socketNumber);
 8000204:	4b04      	ldr	r3, [pc, #16]	; (8000218 <main+0xcc>)
 8000206:	781b      	ldrb	r3, [r3, #0]
 8000208:	4618      	mov	r0, r3
 800020a:	f000 fd77 	bl	8000cfc <close>
              break;  // Exit the inner loop to reopen the socket
 800020e:	bf00      	nop
      socket(socketNumber, Sn_MR_TCP, port, 0);
 8000210:	e7bb      	b.n	800018a <main+0x3e>
 8000212:	bf00      	nop
 8000214:	20000004 	.word	0x20000004
 8000218:	200000cc 	.word	0x200000cc
 800021c:	20000000 	.word	0x20000000

08000220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b090      	sub	sp, #64	; 0x40
 8000224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000226:	f107 0318 	add.w	r3, r7, #24
 800022a:	2228      	movs	r2, #40	; 0x28
 800022c:	2100      	movs	r1, #0
 800022e:	4618      	mov	r0, r3
 8000230:	f003 face 	bl	80037d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]
 8000240:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000242:	2301      	movs	r3, #1
 8000244:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800024a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800024c:	2300      	movs	r3, #0
 800024e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	2301      	movs	r3, #1
 8000252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000254:	2302      	movs	r3, #2
 8000256:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800025c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 800025e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000262:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000264:	f107 0318 	add.w	r3, r7, #24
 8000268:	4618      	mov	r0, r3
 800026a:	f002 f925 	bl	80024b8 <HAL_RCC_OscConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000274:	f000 f8d4 	bl	8000420 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000278:	230f      	movs	r3, #15
 800027a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027c:	2302      	movs	r3, #2
 800027e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000284:	2300      	movs	r3, #0
 8000286:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000288:	2300      	movs	r3, #0
 800028a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2100      	movs	r1, #0
 8000290:	4618      	mov	r0, r3
 8000292:	f002 fb93 	bl	80029bc <HAL_RCC_ClockConfig>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800029c:	f000 f8c0 	bl	8000420 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80002a0:	f002 fc76 	bl	8002b90 <HAL_RCC_EnableCSS>
}
 80002a4:	bf00      	nop
 80002a6:	3740      	adds	r7, #64	; 0x40
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002b0:	4b17      	ldr	r3, [pc, #92]	; (8000310 <MX_SPI1_Init+0x64>)
 80002b2:	4a18      	ldr	r2, [pc, #96]	; (8000314 <MX_SPI1_Init+0x68>)
 80002b4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002b6:	4b16      	ldr	r3, [pc, #88]	; (8000310 <MX_SPI1_Init+0x64>)
 80002b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80002bc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002be:	4b14      	ldr	r3, [pc, #80]	; (8000310 <MX_SPI1_Init+0x64>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80002c4:	4b12      	ldr	r3, [pc, #72]	; (8000310 <MX_SPI1_Init+0x64>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80002ca:	4b11      	ldr	r3, [pc, #68]	; (8000310 <MX_SPI1_Init+0x64>)
 80002cc:	2202      	movs	r2, #2
 80002ce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80002d0:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <MX_SPI1_Init+0x64>)
 80002d2:	2201      	movs	r2, #1
 80002d4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002d6:	4b0e      	ldr	r3, [pc, #56]	; (8000310 <MX_SPI1_Init+0x64>)
 80002d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002dc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80002de:	4b0c      	ldr	r3, [pc, #48]	; (8000310 <MX_SPI1_Init+0x64>)
 80002e0:	2220      	movs	r2, #32
 80002e2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <MX_SPI1_Init+0x64>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <MX_SPI1_Init+0x64>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <MX_SPI1_Init+0x64>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80002f6:	4b06      	ldr	r3, [pc, #24]	; (8000310 <MX_SPI1_Init+0x64>)
 80002f8:	220a      	movs	r2, #10
 80002fa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002fc:	4804      	ldr	r0, [pc, #16]	; (8000310 <MX_SPI1_Init+0x64>)
 80002fe:	f002 fcdf 	bl	8002cc0 <HAL_SPI_Init>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000308:	f000 f88a 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000074 	.word	0x20000074
 8000314:	40013000 	.word	0x40013000

08000318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 0310 	add.w	r3, r7, #16
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032c:	4b38      	ldr	r3, [pc, #224]	; (8000410 <MX_GPIO_Init+0xf8>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a37      	ldr	r2, [pc, #220]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000332:	f043 0310 	orr.w	r3, r3, #16
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b35      	ldr	r3, [pc, #212]	; (8000410 <MX_GPIO_Init+0xf8>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0310 	and.w	r3, r3, #16
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000344:	4b32      	ldr	r3, [pc, #200]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a31      	ldr	r2, [pc, #196]	; (8000410 <MX_GPIO_Init+0xf8>)
 800034a:	f043 0320 	orr.w	r3, r3, #32
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b2f      	ldr	r3, [pc, #188]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0320 	and.w	r3, r3, #32
 8000358:	60bb      	str	r3, [r7, #8]
 800035a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035c:	4b2c      	ldr	r3, [pc, #176]	; (8000410 <MX_GPIO_Init+0xf8>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a2b      	ldr	r2, [pc, #172]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000362:	f043 0304 	orr.w	r3, r3, #4
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b29      	ldr	r3, [pc, #164]	; (8000410 <MX_GPIO_Init+0xf8>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0304 	and.w	r3, r3, #4
 8000370:	607b      	str	r3, [r7, #4]
 8000372:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000374:	4b26      	ldr	r3, [pc, #152]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	4a25      	ldr	r2, [pc, #148]	; (8000410 <MX_GPIO_Init+0xf8>)
 800037a:	f043 0308 	orr.w	r3, r3, #8
 800037e:	6193      	str	r3, [r2, #24]
 8000380:	4b23      	ldr	r3, [pc, #140]	; (8000410 <MX_GPIO_Init+0xf8>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	f003 0308 	and.w	r3, r3, #8
 8000388:	603b      	str	r3, [r7, #0]
 800038a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800038c:	2200      	movs	r2, #0
 800038e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000392:	4820      	ldr	r0, [pc, #128]	; (8000414 <MX_GPIO_Init+0xfc>)
 8000394:	f002 f878 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2103      	movs	r1, #3
 800039c:	481e      	ldr	r0, [pc, #120]	; (8000418 <MX_GPIO_Init+0x100>)
 800039e:	f002 f873 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003a8:	481c      	ldr	r0, [pc, #112]	; (800041c <MX_GPIO_Init+0x104>)
 80003aa:	f002 f86d 	bl	8002488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80003ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b4:	2301      	movs	r3, #1
 80003b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b8:	2300      	movs	r3, #0
 80003ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003bc:	2302      	movs	r3, #2
 80003be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c0:	f107 0310 	add.w	r3, r7, #16
 80003c4:	4619      	mov	r1, r3
 80003c6:	4813      	ldr	r0, [pc, #76]	; (8000414 <MX_GPIO_Init+0xfc>)
 80003c8:	f001 feda 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80003cc:	2303      	movs	r3, #3
 80003ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d0:	2301      	movs	r3, #1
 80003d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d4:	2300      	movs	r3, #0
 80003d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d8:	2302      	movs	r3, #2
 80003da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003dc:	f107 0310 	add.w	r3, r7, #16
 80003e0:	4619      	mov	r1, r3
 80003e2:	480d      	ldr	r0, [pc, #52]	; (8000418 <MX_GPIO_Init+0x100>)
 80003e4:	f001 fecc 	bl	8002180 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80003e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ee:	2301      	movs	r3, #1
 80003f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f6:	2302      	movs	r3, #2
 80003f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003fa:	f107 0310 	add.w	r3, r7, #16
 80003fe:	4619      	mov	r1, r3
 8000400:	4806      	ldr	r0, [pc, #24]	; (800041c <MX_GPIO_Init+0x104>)
 8000402:	f001 febd 	bl	8002180 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000406:	bf00      	nop
 8000408:	3720      	adds	r7, #32
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000
 8000414:	40011000 	.word	0x40011000
 8000418:	40010800 	.word	0x40010800
 800041c:	40010c00 	.word	0x40010c00

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	e7fe      	b.n	8000428 <Error_Handler+0x8>
	...

0800042c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800042c:	b480      	push	{r7}
 800042e:	b085      	sub	sp, #20
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000432:	4b15      	ldr	r3, [pc, #84]	; (8000488 <HAL_MspInit+0x5c>)
 8000434:	699b      	ldr	r3, [r3, #24]
 8000436:	4a14      	ldr	r2, [pc, #80]	; (8000488 <HAL_MspInit+0x5c>)
 8000438:	f043 0301 	orr.w	r3, r3, #1
 800043c:	6193      	str	r3, [r2, #24]
 800043e:	4b12      	ldr	r3, [pc, #72]	; (8000488 <HAL_MspInit+0x5c>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	f003 0301 	and.w	r3, r3, #1
 8000446:	60bb      	str	r3, [r7, #8]
 8000448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_MspInit+0x5c>)
 800044c:	69db      	ldr	r3, [r3, #28]
 800044e:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <HAL_MspInit+0x5c>)
 8000450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000454:	61d3      	str	r3, [r2, #28]
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <HAL_MspInit+0x5c>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000462:	4b0a      	ldr	r3, [pc, #40]	; (800048c <HAL_MspInit+0x60>)
 8000464:	685b      	ldr	r3, [r3, #4]
 8000466:	60fb      	str	r3, [r7, #12]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	4a04      	ldr	r2, [pc, #16]	; (800048c <HAL_MspInit+0x60>)
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047e:	bf00      	nop
 8000480:	3714      	adds	r7, #20
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr
 8000488:	40021000 	.word	0x40021000
 800048c:	40010000 	.word	0x40010000

08000490 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b088      	sub	sp, #32
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000498:	f107 0310 	add.w	r3, r7, #16
 800049c:	2200      	movs	r2, #0
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	605a      	str	r2, [r3, #4]
 80004a2:	609a      	str	r2, [r3, #8]
 80004a4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	4a1b      	ldr	r2, [pc, #108]	; (8000518 <HAL_SPI_MspInit+0x88>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d12f      	bne.n	8000510 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80004b0:	4b1a      	ldr	r3, [pc, #104]	; (800051c <HAL_SPI_MspInit+0x8c>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a19      	ldr	r2, [pc, #100]	; (800051c <HAL_SPI_MspInit+0x8c>)
 80004b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b17      	ldr	r3, [pc, #92]	; (800051c <HAL_SPI_MspInit+0x8c>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80004c4:	60fb      	str	r3, [r7, #12]
 80004c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c8:	4b14      	ldr	r3, [pc, #80]	; (800051c <HAL_SPI_MspInit+0x8c>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	4a13      	ldr	r2, [pc, #76]	; (800051c <HAL_SPI_MspInit+0x8c>)
 80004ce:	f043 0304 	orr.w	r3, r3, #4
 80004d2:	6193      	str	r3, [r2, #24]
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <HAL_SPI_MspInit+0x8c>)
 80004d6:	699b      	ldr	r3, [r3, #24]
 80004d8:	f003 0304 	and.w	r3, r3, #4
 80004dc:	60bb      	str	r3, [r7, #8]
 80004de:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80004e0:	23a0      	movs	r3, #160	; 0xa0
 80004e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004e4:	2302      	movs	r3, #2
 80004e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e8:	2303      	movs	r3, #3
 80004ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	4619      	mov	r1, r3
 80004f2:	480b      	ldr	r0, [pc, #44]	; (8000520 <HAL_SPI_MspInit+0x90>)
 80004f4:	f001 fe44 	bl	8002180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004f8:	2340      	movs	r3, #64	; 0x40
 80004fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	2300      	movs	r3, #0
 8000502:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	4619      	mov	r1, r3
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <HAL_SPI_MspInit+0x90>)
 800050c:	f001 fe38 	bl	8002180 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000510:	bf00      	nop
 8000512:	3720      	adds	r7, #32
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40013000 	.word	0x40013000
 800051c:	40021000 	.word	0x40021000
 8000520:	40010800 	.word	0x40010800

08000524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000528:	f002 fb92 	bl	8002c50 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800052c:	e7fe      	b.n	800052c <NMI_Handler+0x8>

0800052e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000532:	e7fe      	b.n	8000532 <HardFault_Handler+0x4>

08000534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <MemManage_Handler+0x4>

0800053a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <BusFault_Handler+0x4>

08000540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <UsageFault_Handler+0x4>

08000546 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	bc80      	pop	{r7}
 8000568:	4770      	bx	lr

0800056a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800056a:	b580      	push	{r7, lr}
 800056c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800056e:	f001 fd07 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	bd80      	pop	{r7, pc}

08000576 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
	...

08000584 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <WIZCHIP_READ+0x94>)
 800058e:	68db      	ldr	r3, [r3, #12]
 8000590:	4798      	blx	r3
   WIZCHIP.CS._select();
 8000592:	4b21      	ldr	r3, [pc, #132]	; (8000618 <WIZCHIP_READ+0x94>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <WIZCHIP_READ+0x94>)
 800059a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800059c:	2b00      	cmp	r3, #0
 800059e:	d003      	beq.n	80005a8 <WIZCHIP_READ+0x24>
 80005a0:	4b1d      	ldr	r3, [pc, #116]	; (8000618 <WIZCHIP_READ+0x94>)
 80005a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d114      	bne.n	80005d2 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80005a8:	4b1b      	ldr	r3, [pc, #108]	; (8000618 <WIZCHIP_READ+0x94>)
 80005aa:	6a1b      	ldr	r3, [r3, #32]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	0c12      	lsrs	r2, r2, #16
 80005b0:	b2d2      	uxtb	r2, r2
 80005b2:	4610      	mov	r0, r2
 80005b4:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80005b6:	4b18      	ldr	r3, [pc, #96]	; (8000618 <WIZCHIP_READ+0x94>)
 80005b8:	6a1b      	ldr	r3, [r3, #32]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	0a12      	lsrs	r2, r2, #8
 80005be:	b2d2      	uxtb	r2, r2
 80005c0:	4610      	mov	r0, r2
 80005c2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <WIZCHIP_READ+0x94>)
 80005c6:	6a1b      	ldr	r3, [r3, #32]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	b2d2      	uxtb	r2, r2
 80005cc:	4610      	mov	r0, r2
 80005ce:	4798      	blx	r3
 80005d0:	e011      	b.n	80005f6 <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	0c1b      	lsrs	r3, r3, #16
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	0a1b      	lsrs	r3, r3, #8
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 80005e8:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <WIZCHIP_READ+0x94>)
 80005ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005ec:	f107 020c 	add.w	r2, r7, #12
 80005f0:	2103      	movs	r1, #3
 80005f2:	4610      	mov	r0, r2
 80005f4:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <WIZCHIP_READ+0x94>)
 80005f8:	69db      	ldr	r3, [r3, #28]
 80005fa:	4798      	blx	r3
 80005fc:	4603      	mov	r3, r0
 80005fe:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <WIZCHIP_READ+0x94>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000606:	4b04      	ldr	r3, [pc, #16]	; (8000618 <WIZCHIP_READ+0x94>)
 8000608:	691b      	ldr	r3, [r3, #16]
 800060a:	4798      	blx	r3
   return ret;
 800060c:	7bfb      	ldrb	r3, [r7, #15]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000024 	.word	0x20000024

0800061c <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <WIZCHIP_WRITE+0x98>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	4798      	blx	r3
   WIZCHIP.CS._select();
 800062e:	4b21      	ldr	r3, [pc, #132]	; (80006b4 <WIZCHIP_WRITE+0x98>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f043 0304 	orr.w	r3, r3, #4
 800063a:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800063c:	4b1d      	ldr	r3, [pc, #116]	; (80006b4 <WIZCHIP_WRITE+0x98>)
 800063e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000640:	2b00      	cmp	r3, #0
 8000642:	d119      	bne.n	8000678 <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <WIZCHIP_WRITE+0x98>)
 8000646:	6a1b      	ldr	r3, [r3, #32]
 8000648:	687a      	ldr	r2, [r7, #4]
 800064a:	0c12      	lsrs	r2, r2, #16
 800064c:	b2d2      	uxtb	r2, r2
 800064e:	4610      	mov	r0, r2
 8000650:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8000652:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <WIZCHIP_WRITE+0x98>)
 8000654:	6a1b      	ldr	r3, [r3, #32]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	0a12      	lsrs	r2, r2, #8
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	4610      	mov	r0, r2
 800065e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8000660:	4b14      	ldr	r3, [pc, #80]	; (80006b4 <WIZCHIP_WRITE+0x98>)
 8000662:	6a1b      	ldr	r3, [r3, #32]
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	b2d2      	uxtb	r2, r2
 8000668:	4610      	mov	r0, r2
 800066a:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 800066c:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <WIZCHIP_WRITE+0x98>)
 800066e:	6a1b      	ldr	r3, [r3, #32]
 8000670:	78fa      	ldrb	r2, [r7, #3]
 8000672:	4610      	mov	r0, r2
 8000674:	4798      	blx	r3
 8000676:	e013      	b.n	80006a0 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	0c1b      	lsrs	r3, r3, #16
 800067c:	b2db      	uxtb	r3, r3
 800067e:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	0a1b      	lsrs	r3, r3, #8
 8000684:	b2db      	uxtb	r3, r3
 8000686:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 800068e:	78fb      	ldrb	r3, [r7, #3]
 8000690:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <WIZCHIP_WRITE+0x98>)
 8000694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000696:	f107 020c 	add.w	r2, r7, #12
 800069a:	2104      	movs	r1, #4
 800069c:	4610      	mov	r0, r2
 800069e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <WIZCHIP_WRITE+0x98>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80006a6:	4b03      	ldr	r3, [pc, #12]	; (80006b4 <WIZCHIP_WRITE+0x98>)
 80006a8:	691b      	ldr	r3, [r3, #16]
 80006aa:	4798      	blx	r3
}
 80006ac:	bf00      	nop
 80006ae:	3710      	adds	r7, #16
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000024 	.word	0x20000024

080006b8 <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b087      	sub	sp, #28
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	4613      	mov	r3, r2
 80006c4:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80006c6:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <WIZCHIP_READ_BUF+0xbc>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	4798      	blx	r3
   WIZCHIP.CS._select();
 80006cc:	4b29      	ldr	r3, [pc, #164]	; (8000774 <WIZCHIP_READ_BUF+0xbc>)
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80006d2:	4b28      	ldr	r3, [pc, #160]	; (8000774 <WIZCHIP_READ_BUF+0xbc>)
 80006d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d003      	beq.n	80006e2 <WIZCHIP_READ_BUF+0x2a>
 80006da:	4b26      	ldr	r3, [pc, #152]	; (8000774 <WIZCHIP_READ_BUF+0xbc>)
 80006dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d126      	bne.n	8000730 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80006e2:	4b24      	ldr	r3, [pc, #144]	; (8000774 <WIZCHIP_READ_BUF+0xbc>)
 80006e4:	6a1b      	ldr	r3, [r3, #32]
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	0c12      	lsrs	r2, r2, #16
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	4610      	mov	r0, r2
 80006ee:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80006f0:	4b20      	ldr	r3, [pc, #128]	; (8000774 <WIZCHIP_READ_BUF+0xbc>)
 80006f2:	6a1b      	ldr	r3, [r3, #32]
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	0a12      	lsrs	r2, r2, #8
 80006f8:	b2d2      	uxtb	r2, r2
 80006fa:	4610      	mov	r0, r2
 80006fc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <WIZCHIP_READ_BUF+0xbc>)
 8000700:	6a1b      	ldr	r3, [r3, #32]
 8000702:	68fa      	ldr	r2, [r7, #12]
 8000704:	b2d2      	uxtb	r2, r2
 8000706:	4610      	mov	r0, r2
 8000708:	4798      	blx	r3
		for(i = 0; i < len; i++)
 800070a:	2300      	movs	r3, #0
 800070c:	82fb      	strh	r3, [r7, #22]
 800070e:	e00a      	b.n	8000726 <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8000710:	4b18      	ldr	r3, [pc, #96]	; (8000774 <WIZCHIP_READ_BUF+0xbc>)
 8000712:	69db      	ldr	r3, [r3, #28]
 8000714:	8afa      	ldrh	r2, [r7, #22]
 8000716:	68b9      	ldr	r1, [r7, #8]
 8000718:	188c      	adds	r4, r1, r2
 800071a:	4798      	blx	r3
 800071c:	4603      	mov	r3, r0
 800071e:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8000720:	8afb      	ldrh	r3, [r7, #22]
 8000722:	3301      	adds	r3, #1
 8000724:	82fb      	strh	r3, [r7, #22]
 8000726:	8afa      	ldrh	r2, [r7, #22]
 8000728:	88fb      	ldrh	r3, [r7, #6]
 800072a:	429a      	cmp	r2, r3
 800072c:	d3f0      	bcc.n	8000710 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800072e:	e017      	b.n	8000760 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	0c1b      	lsrs	r3, r3, #16
 8000734:	b2db      	uxtb	r3, r3
 8000736:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	0a1b      	lsrs	r3, r3, #8
 800073c:	b2db      	uxtb	r3, r3
 800073e:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <WIZCHIP_READ_BUF+0xbc>)
 8000748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800074a:	f107 0210 	add.w	r2, r7, #16
 800074e:	2103      	movs	r1, #3
 8000750:	4610      	mov	r0, r2
 8000752:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <WIZCHIP_READ_BUF+0xbc>)
 8000756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000758:	88fa      	ldrh	r2, [r7, #6]
 800075a:	4611      	mov	r1, r2
 800075c:	68b8      	ldr	r0, [r7, #8]
 800075e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000760:	4b04      	ldr	r3, [pc, #16]	; (8000774 <WIZCHIP_READ_BUF+0xbc>)
 8000762:	699b      	ldr	r3, [r3, #24]
 8000764:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000766:	4b03      	ldr	r3, [pc, #12]	; (8000774 <WIZCHIP_READ_BUF+0xbc>)
 8000768:	691b      	ldr	r3, [r3, #16]
 800076a:	4798      	blx	r3
}
 800076c:	bf00      	nop
 800076e:	371c      	adds	r7, #28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd90      	pop	{r4, r7, pc}
 8000774:	20000024 	.word	0x20000024

08000778 <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	4613      	mov	r3, r2
 8000784:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8000786:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <WIZCHIP_WRITE_BUF+0xbc>)
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	4798      	blx	r3
   WIZCHIP.CS._select();
 800078c:	4b29      	ldr	r3, [pc, #164]	; (8000834 <WIZCHIP_WRITE_BUF+0xbc>)
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <WIZCHIP_WRITE_BUF+0xbc>)
 800079c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d126      	bne.n	80007f0 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80007a2:	4b24      	ldr	r3, [pc, #144]	; (8000834 <WIZCHIP_WRITE_BUF+0xbc>)
 80007a4:	6a1b      	ldr	r3, [r3, #32]
 80007a6:	68fa      	ldr	r2, [r7, #12]
 80007a8:	0c12      	lsrs	r2, r2, #16
 80007aa:	b2d2      	uxtb	r2, r2
 80007ac:	4610      	mov	r0, r2
 80007ae:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80007b0:	4b20      	ldr	r3, [pc, #128]	; (8000834 <WIZCHIP_WRITE_BUF+0xbc>)
 80007b2:	6a1b      	ldr	r3, [r3, #32]
 80007b4:	68fa      	ldr	r2, [r7, #12]
 80007b6:	0a12      	lsrs	r2, r2, #8
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	4610      	mov	r0, r2
 80007bc:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80007be:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <WIZCHIP_WRITE_BUF+0xbc>)
 80007c0:	6a1b      	ldr	r3, [r3, #32]
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	b2d2      	uxtb	r2, r2
 80007c6:	4610      	mov	r0, r2
 80007c8:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	82fb      	strh	r3, [r7, #22]
 80007ce:	e00a      	b.n	80007e6 <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 80007d0:	4b18      	ldr	r3, [pc, #96]	; (8000834 <WIZCHIP_WRITE_BUF+0xbc>)
 80007d2:	6a1b      	ldr	r3, [r3, #32]
 80007d4:	8afa      	ldrh	r2, [r7, #22]
 80007d6:	68b9      	ldr	r1, [r7, #8]
 80007d8:	440a      	add	r2, r1
 80007da:	7812      	ldrb	r2, [r2, #0]
 80007dc:	4610      	mov	r0, r2
 80007de:	4798      	blx	r3
		for(i = 0; i < len; i++)
 80007e0:	8afb      	ldrh	r3, [r7, #22]
 80007e2:	3301      	adds	r3, #1
 80007e4:	82fb      	strh	r3, [r7, #22]
 80007e6:	8afa      	ldrh	r2, [r7, #22]
 80007e8:	88fb      	ldrh	r3, [r7, #6]
 80007ea:	429a      	cmp	r2, r3
 80007ec:	d3f0      	bcc.n	80007d0 <WIZCHIP_WRITE_BUF+0x58>
 80007ee:	e017      	b.n	8000820 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	0c1b      	lsrs	r3, r3, #16
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	0a1b      	lsrs	r3, r3, #8
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8000806:	4b0b      	ldr	r3, [pc, #44]	; (8000834 <WIZCHIP_WRITE_BUF+0xbc>)
 8000808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800080a:	f107 0210 	add.w	r2, r7, #16
 800080e:	2103      	movs	r1, #3
 8000810:	4610      	mov	r0, r2
 8000812:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <WIZCHIP_WRITE_BUF+0xbc>)
 8000816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000818:	88fa      	ldrh	r2, [r7, #6]
 800081a:	4611      	mov	r1, r2
 800081c:	68b8      	ldr	r0, [r7, #8]
 800081e:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <WIZCHIP_WRITE_BUF+0xbc>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8000826:	4b03      	ldr	r3, [pc, #12]	; (8000834 <WIZCHIP_WRITE_BUF+0xbc>)
 8000828:	691b      	ldr	r3, [r3, #16]
 800082a:	4798      	blx	r3
}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000024 	.word	0x20000024

08000838 <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8000838:	b590      	push	{r4, r7, lr}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8000842:	2300      	movs	r3, #0
 8000844:	81fb      	strh	r3, [r7, #14]
 8000846:	2300      	movs	r3, #0
 8000848:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	3301      	adds	r3, #1
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fe94 	bl	8000584 <WIZCHIP_READ>
 800085c:	4603      	mov	r3, r0
 800085e:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8000860:	89bb      	ldrh	r3, [r7, #12]
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	b29c      	uxth	r4, r3
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	3301      	adds	r3, #1
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe86 	bl	8000584 <WIZCHIP_READ>
 8000878:	4603      	mov	r3, r0
 800087a:	b29b      	uxth	r3, r3
 800087c:	4423      	add	r3, r4
 800087e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000880:	89bb      	ldrh	r3, [r7, #12]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d01a      	beq.n	80008bc <getSn_TX_FSR+0x84>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	009b      	lsls	r3, r3, #2
 800088a:	3301      	adds	r3, #1
 800088c:	00db      	lsls	r3, r3, #3
 800088e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000892:	4618      	mov	r0, r3
 8000894:	f7ff fe76 	bl	8000584 <WIZCHIP_READ>
 8000898:	4603      	mov	r3, r0
 800089a:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 800089c:	89fb      	ldrh	r3, [r7, #14]
 800089e:	021b      	lsls	r3, r3, #8
 80008a0:	b29c      	uxth	r4, r3
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	3301      	adds	r3, #1
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	f503 5304 	add.w	r3, r3, #8448	; 0x2100
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fe68 	bl	8000584 <WIZCHIP_READ>
 80008b4:	4603      	mov	r3, r0
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	4423      	add	r3, r4
 80008ba:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80008bc:	89fa      	ldrh	r2, [r7, #14]
 80008be:	89bb      	ldrh	r3, [r7, #12]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d1c2      	bne.n	800084a <getSn_TX_FSR+0x12>
   return val;
 80008c4:	89fb      	ldrh	r3, [r7, #14]
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd90      	pop	{r4, r7, pc}

080008ce <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 80008ce:	b590      	push	{r4, r7, lr}
 80008d0:	b085      	sub	sp, #20
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80008d8:	2300      	movs	r3, #0
 80008da:	81fb      	strh	r3, [r7, #14]
 80008dc:	2300      	movs	r3, #0
 80008de:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	009b      	lsls	r3, r3, #2
 80008e4:	3301      	adds	r3, #1
 80008e6:	00db      	lsls	r3, r3, #3
 80008e8:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fe49 	bl	8000584 <WIZCHIP_READ>
 80008f2:	4603      	mov	r3, r0
 80008f4:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80008f6:	89bb      	ldrh	r3, [r7, #12]
 80008f8:	021b      	lsls	r3, r3, #8
 80008fa:	b29c      	uxth	r4, r3
 80008fc:	79fb      	ldrb	r3, [r7, #7]
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	3301      	adds	r3, #1
 8000902:	00db      	lsls	r3, r3, #3
 8000904:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fe3b 	bl	8000584 <WIZCHIP_READ>
 800090e:	4603      	mov	r3, r0
 8000910:	b29b      	uxth	r3, r3
 8000912:	4423      	add	r3, r4
 8000914:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8000916:	89bb      	ldrh	r3, [r7, #12]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d01a      	beq.n	8000952 <getSn_RX_RSR+0x84>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	3301      	adds	r3, #1
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff fe2b 	bl	8000584 <WIZCHIP_READ>
 800092e:	4603      	mov	r3, r0
 8000930:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8000932:	89fb      	ldrh	r3, [r7, #14]
 8000934:	021b      	lsls	r3, r3, #8
 8000936:	b29c      	uxth	r4, r3
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	3301      	adds	r3, #1
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fe1d 	bl	8000584 <WIZCHIP_READ>
 800094a:	4603      	mov	r3, r0
 800094c:	b29b      	uxth	r3, r3
 800094e:	4423      	add	r3, r4
 8000950:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8000952:	89fa      	ldrh	r2, [r7, #14]
 8000954:	89bb      	ldrh	r3, [r7, #12]
 8000956:	429a      	cmp	r2, r3
 8000958:	d1c2      	bne.n	80008e0 <getSn_RX_RSR+0x12>
   return val;
 800095a:	89fb      	ldrh	r3, [r7, #14]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	bd90      	pop	{r4, r7, pc}

08000964 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000964:	b590      	push	{r4, r7, lr}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	6039      	str	r1, [r7, #0]
 800096e:	71fb      	strb	r3, [r7, #7]
 8000970:	4613      	mov	r3, r2
 8000972:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000978:	2300      	movs	r3, #0
 800097a:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 800097c:	88bb      	ldrh	r3, [r7, #4]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d048      	beq.n	8000a14 <wiz_send_data+0xb0>
   ptr = getSn_TX_WR(sn);
 8000982:	79fb      	ldrb	r3, [r7, #7]
 8000984:	009b      	lsls	r3, r3, #2
 8000986:	3301      	adds	r3, #1
 8000988:	00db      	lsls	r3, r3, #3
 800098a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fdf8 	bl	8000584 <WIZCHIP_READ>
 8000994:	4603      	mov	r3, r0
 8000996:	b29b      	uxth	r3, r3
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b29c      	uxth	r4, r3
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	3301      	adds	r3, #1
 80009a2:	00db      	lsls	r3, r3, #3
 80009a4:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fdeb 	bl	8000584 <WIZCHIP_READ>
 80009ae:	4603      	mov	r3, r0
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	4423      	add	r3, r4
 80009b4:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 80009b6:	89fb      	ldrh	r3, [r7, #14]
 80009b8:	021b      	lsls	r3, r3, #8
 80009ba:	79fa      	ldrb	r2, [r7, #7]
 80009bc:	0092      	lsls	r2, r2, #2
 80009be:	3202      	adds	r2, #2
 80009c0:	00d2      	lsls	r2, r2, #3
 80009c2:	4413      	add	r3, r2
 80009c4:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 80009c6:	88bb      	ldrh	r3, [r7, #4]
 80009c8:	461a      	mov	r2, r3
 80009ca:	6839      	ldr	r1, [r7, #0]
 80009cc:	68b8      	ldr	r0, [r7, #8]
 80009ce:	f7ff fed3 	bl	8000778 <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 80009d2:	89fa      	ldrh	r2, [r7, #14]
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	4413      	add	r3, r2
 80009d8:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	009b      	lsls	r3, r3, #2
 80009de:	3301      	adds	r3, #1
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80009e6:	461a      	mov	r2, r3
 80009e8:	89fb      	ldrh	r3, [r7, #14]
 80009ea:	0a1b      	lsrs	r3, r3, #8
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	4619      	mov	r1, r3
 80009f2:	4610      	mov	r0, r2
 80009f4:	f7ff fe12 	bl	800061c <WIZCHIP_WRITE>
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	3301      	adds	r3, #1
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	f503 5314 	add.w	r3, r3, #9472	; 0x2500
 8000a04:	461a      	mov	r2, r3
 8000a06:	89fb      	ldrh	r3, [r7, #14]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4610      	mov	r0, r2
 8000a0e:	f7ff fe05 	bl	800061c <WIZCHIP_WRITE>
 8000a12:	e000      	b.n	8000a16 <wiz_send_data+0xb2>
   if(len == 0)  return;
 8000a14:	bf00      	nop
}
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd90      	pop	{r4, r7, pc}

08000a1c <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8000a34:	88bb      	ldrh	r3, [r7, #4]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d048      	beq.n	8000acc <wiz_recv_data+0xb0>
   ptr = getSn_RX_RD(sn);
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	009b      	lsls	r3, r3, #2
 8000a3e:	3301      	adds	r3, #1
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fd9c 	bl	8000584 <WIZCHIP_READ>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	b29c      	uxth	r4, r3
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	3301      	adds	r3, #1
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8000a60:	4618      	mov	r0, r3
 8000a62:	f7ff fd8f 	bl	8000584 <WIZCHIP_READ>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	4423      	add	r3, r4
 8000a6c:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8000a6e:	89fb      	ldrh	r3, [r7, #14]
 8000a70:	021b      	lsls	r3, r3, #8
 8000a72:	79fa      	ldrb	r2, [r7, #7]
 8000a74:	0092      	lsls	r2, r2, #2
 8000a76:	3203      	adds	r2, #3
 8000a78:	00d2      	lsls	r2, r2, #3
 8000a7a:	4413      	add	r3, r2
 8000a7c:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8000a7e:	88bb      	ldrh	r3, [r7, #4]
 8000a80:	461a      	mov	r2, r3
 8000a82:	6839      	ldr	r1, [r7, #0]
 8000a84:	68b8      	ldr	r0, [r7, #8]
 8000a86:	f7ff fe17 	bl	80006b8 <WIZCHIP_READ_BUF>
   ptr += len;
 8000a8a:	89fa      	ldrh	r2, [r7, #14]
 8000a8c:	88bb      	ldrh	r3, [r7, #4]
 8000a8e:	4413      	add	r3, r2
 8000a90:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	3301      	adds	r3, #1
 8000a98:	00db      	lsls	r3, r3, #3
 8000a9a:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	89fb      	ldrh	r3, [r7, #14]
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4610      	mov	r0, r2
 8000aac:	f7ff fdb6 	bl	800061c <WIZCHIP_WRITE>
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	f503 5324 	add.w	r3, r3, #10496	; 0x2900
 8000abc:	461a      	mov	r2, r3
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	4610      	mov	r0, r2
 8000ac6:	f7ff fda9 	bl	800061c <WIZCHIP_WRITE>
 8000aca:	e000      	b.n	8000ace <wiz_recv_data+0xb2>
   if(len == 0) return;
 8000acc:	bf00      	nop
}
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd90      	pop	{r4, r7, pc}

08000ad4 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8000ad4:	b590      	push	{r4, r7, lr}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4604      	mov	r4, r0
 8000adc:	4608      	mov	r0, r1
 8000ade:	4611      	mov	r1, r2
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4623      	mov	r3, r4
 8000ae4:	71fb      	strb	r3, [r7, #7]
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71bb      	strb	r3, [r7, #6]
 8000aea:	460b      	mov	r3, r1
 8000aec:	80bb      	strh	r3, [r7, #4]
 8000aee:	4613      	mov	r3, r2
 8000af0:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	2b08      	cmp	r3, #8
 8000af6:	d902      	bls.n	8000afe <socket+0x2a>
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295
 8000afc:	e0f0      	b.n	8000ce0 <socket+0x20c>
	switch(protocol)
 8000afe:	79bb      	ldrb	r3, [r7, #6]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d005      	beq.n	8000b10 <socket+0x3c>
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	dd11      	ble.n	8000b2c <socket+0x58>
 8000b08:	3b02      	subs	r3, #2
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d80e      	bhi.n	8000b2c <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8000b0e:	e011      	b.n	8000b34 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2204      	movs	r2, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8000b1c:	f7ff fdcc 	bl	80006b8 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d105      	bne.n	8000b32 <socket+0x5e>
 8000b26:	f06f 0302 	mvn.w	r3, #2
 8000b2a:	e0d9      	b.n	8000ce0 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8000b2c:	f06f 0304 	mvn.w	r3, #4
 8000b30:	e0d6      	b.n	8000ce0 <socket+0x20c>
	    break;
 8000b32:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	f003 0304 	and.w	r3, r3, #4
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d002      	beq.n	8000b44 <socket+0x70>
 8000b3e:	f06f 0305 	mvn.w	r3, #5
 8000b42:	e0cd      	b.n	8000ce0 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8000b44:	78fb      	ldrb	r3, [r7, #3]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d028      	beq.n	8000b9c <socket+0xc8>
	{
   	switch(protocol)
 8000b4a:	79bb      	ldrb	r3, [r7, #6]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d002      	beq.n	8000b56 <socket+0x82>
 8000b50:	2b02      	cmp	r3, #2
 8000b52:	d008      	beq.n	8000b66 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8000b54:	e022      	b.n	8000b9c <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8000b56:	78fb      	ldrb	r3, [r7, #3]
 8000b58:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d11a      	bne.n	8000b96 <socket+0xc2>
 8000b60:	f06f 0305 	mvn.w	r3, #5
 8000b64:	e0bc      	b.n	8000ce0 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8000b66:	78fb      	ldrb	r3, [r7, #3]
 8000b68:	f003 0320 	and.w	r3, r3, #32
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8000b70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db02      	blt.n	8000b7e <socket+0xaa>
 8000b78:	f06f 0305 	mvn.w	r3, #5
 8000b7c:	e0b0      	b.n	8000ce0 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8000b7e:	78fb      	ldrb	r3, [r7, #3]
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d008      	beq.n	8000b9a <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8000b88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	db04      	blt.n	8000b9a <socket+0xc6>
 8000b90:	f06f 0305 	mvn.w	r3, #5
 8000b94:	e0a4      	b.n	8000ce0 <socket+0x20c>
   	      break;
 8000b96:	bf00      	nop
 8000b98:	e000      	b.n	8000b9c <socket+0xc8>
   	      break;
 8000b9a:	bf00      	nop
   	}
   }
	close(sn);
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f8ac 	bl	8000cfc <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8000ba4:	79fb      	ldrb	r3, [r7, #7]
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	3301      	adds	r3, #1
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	4618      	mov	r0, r3
 8000bae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bb2:	f023 030f 	bic.w	r3, r3, #15
 8000bb6:	b25a      	sxtb	r2, r3
 8000bb8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b25b      	sxtb	r3, r3
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	f7ff fd2a 	bl	800061c <WIZCHIP_WRITE>
    #endif
	if(!port)
 8000bc8:	88bb      	ldrh	r3, [r7, #4]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d110      	bne.n	8000bf0 <socket+0x11c>
	{
	   port = sock_any_port++;
 8000bce:	4b46      	ldr	r3, [pc, #280]	; (8000ce8 <socket+0x214>)
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	b291      	uxth	r1, r2
 8000bd6:	4a44      	ldr	r2, [pc, #272]	; (8000ce8 <socket+0x214>)
 8000bd8:	8011      	strh	r1, [r2, #0]
 8000bda:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8000bdc:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <socket+0x214>)
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d103      	bne.n	8000bf0 <socket+0x11c>
 8000be8:	4b3f      	ldr	r3, [pc, #252]	; (8000ce8 <socket+0x214>)
 8000bea:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000bee:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	88bb      	ldrh	r3, [r7, #4]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	4619      	mov	r1, r3
 8000c08:	4610      	mov	r0, r2
 8000c0a:	f7ff fd07 	bl	800061c <WIZCHIP_WRITE>
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	3301      	adds	r3, #1
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	88bb      	ldrh	r3, [r7, #4]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	4619      	mov	r1, r3
 8000c22:	4610      	mov	r0, r2
 8000c24:	f7ff fcfa 	bl	800061c <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	00db      	lsls	r3, r3, #3
 8000c30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c34:	2101      	movs	r1, #1
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff fcf0 	bl	800061c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8000c3c:	bf00      	nop
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	3301      	adds	r3, #1
 8000c44:	00db      	lsls	r3, r3, #3
 8000c46:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff fc9a 	bl	8000584 <WIZCHIP_READ>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d1f3      	bne.n	8000c3e <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	2201      	movs	r2, #1
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	43db      	mvns	r3, r3
 8000c62:	b21a      	sxth	r2, r3
 8000c64:	4b21      	ldr	r3, [pc, #132]	; (8000cec <socket+0x218>)
 8000c66:	881b      	ldrh	r3, [r3, #0]
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	b21b      	sxth	r3, r3
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <socket+0x218>)
 8000c72:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	f003 0201 	and.w	r2, r3, #1
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	b21a      	sxth	r2, r3
 8000c82:	4b1a      	ldr	r3, [pc, #104]	; (8000cec <socket+0x218>)
 8000c84:	881b      	ldrh	r3, [r3, #0]
 8000c86:	b21b      	sxth	r3, r3
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	4b17      	ldr	r3, [pc, #92]	; (8000cec <socket+0x218>)
 8000c90:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8000c92:	79fb      	ldrb	r3, [r7, #7]
 8000c94:	2201      	movs	r2, #1
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	b21b      	sxth	r3, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <socket+0x21c>)
 8000ca2:	881b      	ldrh	r3, [r3, #0]
 8000ca4:	b21b      	sxth	r3, r3
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <socket+0x21c>)
 8000cae:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	4a10      	ldr	r2, [pc, #64]	; (8000cf4 <socket+0x220>)
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <socket+0x224>)
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8000cc2:	bf00      	nop
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	3301      	adds	r3, #1
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fc57 	bl	8000584 <WIZCHIP_READ>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0f3      	beq.n	8000cc4 <socket+0x1f0>
   return (int8_t)sn;
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}
 8000ce8:	20000020 	.word	0x20000020
 8000cec:	200000ce 	.word	0x200000ce
 8000cf0:	200000d0 	.word	0x200000d0
 8000cf4:	200000d4 	.word	0x200000d4
 8000cf8:	200000e4 	.word	0x200000e4

08000cfc <close>:

int8_t close(uint8_t sn)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	2b08      	cmp	r3, #8
 8000d0a:	d902      	bls.n	8000d12 <close+0x16>
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d10:	e055      	b.n	8000dbe <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	3301      	adds	r3, #1
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d1e:	2110      	movs	r1, #16
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff fc7b 	bl	800061c <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8000d26:	bf00      	nop
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff fc25 	bl	8000584 <WIZCHIP_READ>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1f3      	bne.n	8000d28 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8000d40:	79fb      	ldrb	r3, [r7, #7]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	3301      	adds	r3, #1
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d4c:	211f      	movs	r1, #31
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fc64 	bl	800061c <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	2201      	movs	r2, #1
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	b21b      	sxth	r3, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	b21a      	sxth	r2, r3
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <close+0xcc>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	b21b      	sxth	r3, r3
 8000d68:	4013      	ands	r3, r2
 8000d6a:	b21b      	sxth	r3, r3
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <close+0xcc>)
 8000d70:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8000d72:	79fb      	ldrb	r3, [r7, #7]
 8000d74:	2201      	movs	r2, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	b21a      	sxth	r2, r3
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <close+0xd0>)
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	4013      	ands	r3, r2
 8000d88:	b21b      	sxth	r3, r3
 8000d8a:	b29a      	uxth	r2, r3
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <close+0xd0>)
 8000d8e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <close+0xd4>)
 8000d94:	2100      	movs	r1, #0
 8000d96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <close+0xd8>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8000da2:	bf00      	nop
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	3301      	adds	r3, #1
 8000daa:	00db      	lsls	r3, r3, #3
 8000dac:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fbe7 	bl	8000584 <WIZCHIP_READ>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d1f3      	bne.n	8000da4 <close+0xa8>
	return SOCK_OK;
 8000dbc:	2301      	movs	r3, #1
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3708      	adds	r7, #8
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	200000ce 	.word	0x200000ce
 8000dcc:	200000d0 	.word	0x200000d0
 8000dd0:	200000d4 	.word	0x200000d4
 8000dd4:	200000e4 	.word	0x200000e4

08000dd8 <listen>:

int8_t listen(uint8_t sn)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8000de2:	79fb      	ldrb	r3, [r7, #7]
 8000de4:	2b08      	cmp	r3, #8
 8000de6:	d902      	bls.n	8000dee <listen+0x16>
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	e049      	b.n	8000e82 <listen+0xaa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	3301      	adds	r3, #1
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff fbc4 	bl	8000584 <WIZCHIP_READ>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	f003 030f 	and.w	r3, r3, #15
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d002      	beq.n	8000e0c <listen+0x34>
 8000e06:	f06f 0304 	mvn.w	r3, #4
 8000e0a:	e03a      	b.n	8000e82 <listen+0xaa>
	CHECK_SOCKINIT();
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	3301      	adds	r3, #1
 8000e12:	00db      	lsls	r3, r3, #3
 8000e14:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff fbb3 	bl	8000584 <WIZCHIP_READ>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b13      	cmp	r3, #19
 8000e22:	d002      	beq.n	8000e2a <listen+0x52>
 8000e24:	f06f 0302 	mvn.w	r3, #2
 8000e28:	e02b      	b.n	8000e82 <listen+0xaa>
	setSn_CR(sn,Sn_CR_LISTEN);
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	3301      	adds	r3, #1
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e36:	2102      	movs	r1, #2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fbef 	bl	800061c <WIZCHIP_WRITE>
	while(getSn_CR(sn));
 8000e3e:	bf00      	nop
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	3301      	adds	r3, #1
 8000e46:	00db      	lsls	r3, r3, #3
 8000e48:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fb99 	bl	8000584 <WIZCHIP_READ>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d1f3      	bne.n	8000e40 <listen+0x68>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000e58:	e006      	b.n	8000e68 <listen+0x90>
   {
         close(sn);
 8000e5a:	79fb      	ldrb	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff4d 	bl	8000cfc <close>
         return SOCKERR_SOCKCLOSED;
 8000e62:	f06f 0303 	mvn.w	r3, #3
 8000e66:	e00c      	b.n	8000e82 <listen+0xaa>
   while(getSn_SR(sn) != SOCK_LISTEN)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fb85 	bl	8000584 <WIZCHIP_READ>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b14      	cmp	r3, #20
 8000e7e:	d1ec      	bne.n	8000e5a <listen+0x82>
   }
   return SOCK_OK;
 8000e80:	2301      	movs	r3, #1
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	6039      	str	r1, [r7, #0]
 8000e96:	71fb      	strb	r3, [r7, #7]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b08      	cmp	r3, #8
 8000ea8:	d902      	bls.n	8000eb0 <send+0x24>
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	e0de      	b.n	800106e <send+0x1e2>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fb63 	bl	8000584 <WIZCHIP_READ>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	f003 030f 	and.w	r3, r3, #15
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d002      	beq.n	8000ece <send+0x42>
 8000ec8:	f06f 0304 	mvn.w	r3, #4
 8000ecc:	e0cf      	b.n	800106e <send+0x1e2>
   CHECK_SOCKDATA();
 8000ece:	88bb      	ldrh	r3, [r7, #4]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d102      	bne.n	8000eda <send+0x4e>
 8000ed4:	f06f 030d 	mvn.w	r3, #13
 8000ed8:	e0c9      	b.n	800106e <send+0x1e2>
   tmp = getSn_SR(sn);
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	009b      	lsls	r3, r3, #2
 8000ede:	3301      	adds	r3, #1
 8000ee0:	00db      	lsls	r3, r3, #3
 8000ee2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff fb4c 	bl	8000584 <WIZCHIP_READ>
 8000eec:	4603      	mov	r3, r0
 8000eee:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	2b17      	cmp	r3, #23
 8000ef4:	d005      	beq.n	8000f02 <send+0x76>
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2b1c      	cmp	r3, #28
 8000efa:	d002      	beq.n	8000f02 <send+0x76>
 8000efc:	f06f 0306 	mvn.w	r3, #6
 8000f00:	e0b5      	b.n	800106e <send+0x1e2>
   if( sock_is_sending & (1<<sn) )
 8000f02:	4b5d      	ldr	r3, [pc, #372]	; (8001078 <send+0x1ec>)
 8000f04:	881b      	ldrh	r3, [r3, #0]
 8000f06:	461a      	mov	r2, r3
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	fa42 f303 	asr.w	r3, r2, r3
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d039      	beq.n	8000f8a <send+0xfe>
   {
      tmp = getSn_IR(sn);
 8000f16:	79fb      	ldrb	r3, [r7, #7]
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fb2e 	bl	8000584 <WIZCHIP_READ>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	f003 031f 	and.w	r3, r3, #31
 8000f2e:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d019      	beq.n	8000f6e <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	3301      	adds	r3, #1
 8000f40:	00db      	lsls	r3, r3, #3
 8000f42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000f46:	2110      	movs	r1, #16
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fb67 	bl	800061c <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2201      	movs	r2, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	b21b      	sxth	r3, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	b21a      	sxth	r2, r3
 8000f5c:	4b46      	ldr	r3, [pc, #280]	; (8001078 <send+0x1ec>)
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	4013      	ands	r3, r2
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	4b43      	ldr	r3, [pc, #268]	; (8001078 <send+0x1ec>)
 8000f6a:	801a      	strh	r2, [r3, #0]
 8000f6c:	e00d      	b.n	8000f8a <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	f003 0308 	and.w	r3, r3, #8
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d006      	beq.n	8000f86 <send+0xfa>
      {
         close(sn);
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff febe 	bl	8000cfc <close>
         return SOCKERR_TIMEOUT;
 8000f80:	f06f 030c 	mvn.w	r3, #12
 8000f84:	e073      	b.n	800106e <send+0x1e2>
      }
      else return SOCK_BUSY;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e071      	b.n	800106e <send+0x1e2>
   }
   freesize = getSn_TxMAX(sn);
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	3301      	adds	r3, #1
 8000f90:	00db      	lsls	r3, r3, #3
 8000f92:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff faf4 	bl	8000584 <WIZCHIP_READ>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	029b      	lsls	r3, r3, #10
 8000fa2:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8000fa4:	88ba      	ldrh	r2, [r7, #4]
 8000fa6:	89bb      	ldrh	r3, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d901      	bls.n	8000fb0 <send+0x124>
 8000fac:	89bb      	ldrh	r3, [r7, #12]
 8000fae:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff fc40 	bl	8000838 <getSn_TX_FSR>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fadb 	bl	8000584 <WIZCHIP_READ>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	2b17      	cmp	r3, #23
 8000fd6:	d009      	beq.n	8000fec <send+0x160>
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	2b1c      	cmp	r3, #28
 8000fdc:	d006      	beq.n	8000fec <send+0x160>
      {
         close(sn);
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fe8b 	bl	8000cfc <close>
         return SOCKERR_SOCKSTATUS;
 8000fe6:	f06f 0306 	mvn.w	r3, #6
 8000fea:	e040      	b.n	800106e <send+0x1e2>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8000fec:	4b23      	ldr	r3, [pc, #140]	; (800107c <send+0x1f0>)
 8000fee:	881b      	ldrh	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	fa42 f303 	asr.w	r3, r2, r3
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <send+0x180>
 8001000:	88ba      	ldrh	r2, [r7, #4]
 8001002:	89bb      	ldrh	r3, [r7, #12]
 8001004:	429a      	cmp	r2, r3
 8001006:	d901      	bls.n	800100c <send+0x180>
 8001008:	2300      	movs	r3, #0
 800100a:	e030      	b.n	800106e <send+0x1e2>
      if(len <= freesize) break;
 800100c:	88ba      	ldrh	r2, [r7, #4]
 800100e:	89bb      	ldrh	r3, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d900      	bls.n	8001016 <send+0x18a>
      freesize = getSn_TX_FSR(sn);
 8001014:	e7cc      	b.n	8000fb0 <send+0x124>
      if(len <= freesize) break;
 8001016:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 8001018:	88ba      	ldrh	r2, [r7, #4]
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	6839      	ldr	r1, [r7, #0]
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fca0 	bl	8000964 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	3301      	adds	r3, #1
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001030:	2120      	movs	r1, #32
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff faf2 	bl	800061c <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8001038:	bf00      	nop
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	3301      	adds	r3, #1
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fa9c 	bl	8000584 <WIZCHIP_READ>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f3      	bne.n	800103a <send+0x1ae>
   sock_is_sending |= (1 << sn);
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	2201      	movs	r2, #1
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	b21a      	sxth	r2, r3
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <send+0x1ec>)
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21b      	sxth	r3, r3
 8001066:	b29a      	uxth	r2, r3
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <send+0x1ec>)
 800106a:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800106c:	88bb      	ldrh	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000d0 	.word	0x200000d0
 800107c:	200000ce 	.word	0x200000ce

08001080 <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8001080:	b590      	push	{r4, r7, lr}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
 800108c:	4613      	mov	r3, r2
 800108e:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b08      	cmp	r3, #8
 800109c:	d902      	bls.n	80010a4 <recv+0x24>
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e09c      	b.n	80011de <recv+0x15e>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	3301      	adds	r3, #1
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fa69 	bl	8000584 <WIZCHIP_READ>
 80010b2:	4603      	mov	r3, r0
 80010b4:	f003 030f 	and.w	r3, r3, #15
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d002      	beq.n	80010c2 <recv+0x42>
 80010bc:	f06f 0304 	mvn.w	r3, #4
 80010c0:	e08d      	b.n	80011de <recv+0x15e>
   CHECK_SOCKDATA();
 80010c2:	88bb      	ldrh	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <recv+0x4e>
 80010c8:	f06f 030d 	mvn.w	r3, #13
 80010cc:	e087      	b.n	80011de <recv+0x15e>
   
   recvsize = getSn_RxMAX(sn);
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	3301      	adds	r3, #1
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff fa52 	bl	8000584 <WIZCHIP_READ>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	029b      	lsls	r3, r3, #10
 80010e6:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80010e8:	89ba      	ldrh	r2, [r7, #12]
 80010ea:	88bb      	ldrh	r3, [r7, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d201      	bcs.n	80010f4 <recv+0x74>
 80010f0:	89bb      	ldrh	r3, [r7, #12]
 80010f2:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff fbe9 	bl	80008ce <getSn_RX_RSR>
 80010fc:	4603      	mov	r3, r0
 80010fe:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	3301      	adds	r3, #1
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa39 	bl	8000584 <WIZCHIP_READ>
 8001112:	4603      	mov	r3, r0
 8001114:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	2b17      	cmp	r3, #23
 800111a:	d026      	beq.n	800116a <recv+0xea>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	2b1c      	cmp	r3, #28
 8001120:	d11c      	bne.n	800115c <recv+0xdc>
            {
               if(recvsize != 0) break;
 8001122:	89bb      	ldrh	r3, [r7, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d133      	bne.n	8001190 <recv+0x110>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fb84 	bl	8000838 <getSn_TX_FSR>
 8001130:	4603      	mov	r3, r0
 8001132:	461c      	mov	r4, r3
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	3301      	adds	r3, #1
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fa1f 	bl	8000584 <WIZCHIP_READ>
 8001146:	4603      	mov	r3, r0
 8001148:	029b      	lsls	r3, r3, #10
 800114a:	429c      	cmp	r4, r3
 800114c:	d10d      	bne.n	800116a <recv+0xea>
               {
                  close(sn);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fdd3 	bl	8000cfc <close>
                  return SOCKERR_SOCKSTATUS;
 8001156:	f06f 0306 	mvn.w	r3, #6
 800115a:	e040      	b.n	80011de <recv+0x15e>
               }
            }
            else
            {
               close(sn);
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fdcc 	bl	8000cfc <close>
               return SOCKERR_SOCKSTATUS;
 8001164:	f06f 0306 	mvn.w	r3, #6
 8001168:	e039      	b.n	80011de <recv+0x15e>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <recv+0x168>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	fa42 f303 	asr.w	r3, r2, r3
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <recv+0x108>
 800117e:	89bb      	ldrh	r3, [r7, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d101      	bne.n	8001188 <recv+0x108>
 8001184:	2300      	movs	r3, #0
 8001186:	e02a      	b.n	80011de <recv+0x15e>
         if(recvsize != 0) break;
 8001188:	89bb      	ldrh	r3, [r7, #12]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d102      	bne.n	8001194 <recv+0x114>
         recvsize = getSn_RX_RSR(sn);
 800118e:	e7b1      	b.n	80010f4 <recv+0x74>
               if(recvsize != 0) break;
 8001190:	bf00      	nop
 8001192:	e000      	b.n	8001196 <recv+0x116>
         if(recvsize != 0) break;
 8001194:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8001196:	89ba      	ldrh	r2, [r7, #12]
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	429a      	cmp	r2, r3
 800119c:	d201      	bcs.n	80011a2 <recv+0x122>
 800119e:	89bb      	ldrh	r3, [r7, #12]
 80011a0:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 80011a2:	88ba      	ldrh	r2, [r7, #4]
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	6839      	ldr	r1, [r7, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fc37 	bl	8000a1c <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	3301      	adds	r3, #1
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80011ba:	2140      	movs	r1, #64	; 0x40
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fa2d 	bl	800061c <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80011c2:	bf00      	nop
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	3301      	adds	r3, #1
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9d7 	bl	8000584 <WIZCHIP_READ>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f3      	bne.n	80011c4 <recv+0x144>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80011dc:	88bb      	ldrh	r3, [r7, #4]
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3714      	adds	r7, #20
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd90      	pop	{r4, r7, pc}
 80011e6:	bf00      	nop
 80011e8:	200000ce 	.word	0x200000ce

080011ec <wizchip_select>:
#include "wizchip_conf.h"
#include "stdio.h"

extern SPI_HandleTypeDef hspi1;

void wizchip_select(void){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80011f0:	2200      	movs	r2, #0
 80011f2:	2102      	movs	r1, #2
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <wizchip_select+0x14>)
 80011f6:	f001 f947 	bl	8002488 <HAL_GPIO_WritePin>
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40010800 	.word	0x40010800

08001204 <wizchip_deselect>:

void wizchip_deselect(void){
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	2102      	movs	r1, #2
 800120c:	4802      	ldr	r0, [pc, #8]	; (8001218 <wizchip_deselect+0x14>)
 800120e:	f001 f93b 	bl	8002488 <HAL_GPIO_WritePin>
}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40010800 	.word	0x40010800

0800121c <wizchip_read>:
// Single byte read function
uint8_t wizchip_read(void) {
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
    uint8_t rbuf;
    HAL_SPI_Receive(&hspi1, &rbuf, 1, 0xFFFFFFFF);
 8001222:	1df9      	adds	r1, r7, #7
 8001224:	f04f 33ff 	mov.w	r3, #4294967295
 8001228:	2201      	movs	r2, #1
 800122a:	4804      	ldr	r0, [pc, #16]	; (800123c <wizchip_read+0x20>)
 800122c:	f001 ff0f 	bl	800304e <HAL_SPI_Receive>
    return rbuf;
 8001230:	79fb      	ldrb	r3, [r7, #7]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000074 	.word	0x20000074

08001240 <wizchip_write>:

// Single byte write function
void wizchip_write(uint8_t b) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&hspi1, &b, 1, 0xFFFFFFFF);
 800124a:	1df9      	adds	r1, r7, #7
 800124c:	f04f 33ff 	mov.w	r3, #4294967295
 8001250:	2201      	movs	r2, #1
 8001252:	4803      	ldr	r0, [pc, #12]	; (8001260 <wizchip_write+0x20>)
 8001254:	f001 fdb8 	bl	8002dc8 <HAL_SPI_Transmit>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000074 	.word	0x20000074

08001264 <wizchip_read_burst>:

// Read burst function
void wizchip_read_burst(uint8_t* pBuf, uint16_t len) {
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	460b      	mov	r3, r1
 800126e:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < len; i++) {
 8001270:	2300      	movs	r3, #0
 8001272:	81fb      	strh	r3, [r7, #14]
 8001274:	e009      	b.n	800128a <wizchip_read_burst+0x26>
        pBuf[i] = wizchip_read();
 8001276:	89fb      	ldrh	r3, [r7, #14]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	18d4      	adds	r4, r2, r3
 800127c:	f7ff ffce 	bl	800121c <wizchip_read>
 8001280:	4603      	mov	r3, r0
 8001282:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < len; i++) {
 8001284:	89fb      	ldrh	r3, [r7, #14]
 8001286:	3301      	adds	r3, #1
 8001288:	81fb      	strh	r3, [r7, #14]
 800128a:	89fa      	ldrh	r2, [r7, #14]
 800128c:	887b      	ldrh	r3, [r7, #2]
 800128e:	429a      	cmp	r2, r3
 8001290:	d3f1      	bcc.n	8001276 <wizchip_read_burst+0x12>
    }
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	bd90      	pop	{r4, r7, pc}

0800129c <wizchip_write_burst>:

// Write burst function
void wizchip_write_burst(uint8_t* pBuf, uint16_t len) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	460b      	mov	r3, r1
 80012a6:	807b      	strh	r3, [r7, #2]
    for (uint16_t i = 0; i < len; i++) {
 80012a8:	2300      	movs	r3, #0
 80012aa:	81fb      	strh	r3, [r7, #14]
 80012ac:	e009      	b.n	80012c2 <wizchip_write_burst+0x26>
        wizchip_write(pBuf[i]);
 80012ae:	89fb      	ldrh	r3, [r7, #14]
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	4413      	add	r3, r2
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ffc2 	bl	8001240 <wizchip_write>
    for (uint16_t i = 0; i < len; i++) {
 80012bc:	89fb      	ldrh	r3, [r7, #14]
 80012be:	3301      	adds	r3, #1
 80012c0:	81fb      	strh	r3, [r7, #14]
 80012c2:	89fa      	ldrh	r2, [r7, #14]
 80012c4:	887b      	ldrh	r3, [r7, #2]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3f1      	bcc.n	80012ae <wizchip_write_burst+0x12>
    }
}
 80012ca:	bf00      	nop
 80012cc:	bf00      	nop
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <W5500Init>:

void W5500Init(){
 80012d4:	b590      	push	{r4, r7, lr}
 80012d6:	b087      	sub	sp, #28
 80012d8:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8]={{2,2,2,2,2,2,2,2},{2,2,2,2,2,2,2,2}};
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <W5500Init+0x74>)
 80012dc:	1d3c      	adds	r4, r7, #4
 80012de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//Chip Select high by default
 80012e4:	2201      	movs	r2, #1
 80012e6:	2102      	movs	r1, #2
 80012e8:	4818      	ldr	r0, [pc, #96]	; (800134c <W5500Init+0x78>)
 80012ea:	f001 f8cd 	bl	8002488 <HAL_GPIO_WritePin>

	//send pulse on reset pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2101      	movs	r1, #1
 80012f2:	4816      	ldr	r0, [pc, #88]	; (800134c <W5500Init+0x78>)
 80012f4:	f001 f8c8 	bl	8002488 <HAL_GPIO_WritePin>
	tmp=0xff;
 80012f8:	23ff      	movs	r3, #255	; 0xff
 80012fa:	75fb      	strb	r3, [r7, #23]
	while(tmp--);//small delay
 80012fc:	bf00      	nop
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	1e5a      	subs	r2, r3, #1
 8001302:	75fa      	strb	r2, [r7, #23]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d1fa      	bne.n	80012fe <W5500Init+0x2a>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	2101      	movs	r1, #1
 800130c:	480f      	ldr	r0, [pc, #60]	; (800134c <W5500Init+0x78>)
 800130e:	f001 f8bb 	bl	8002488 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8001312:	490f      	ldr	r1, [pc, #60]	; (8001350 <W5500Init+0x7c>)
 8001314:	480f      	ldr	r0, [pc, #60]	; (8001354 <W5500Init+0x80>)
 8001316:	f000 f881 	bl	800141c <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 800131a:	490f      	ldr	r1, [pc, #60]	; (8001358 <W5500Init+0x84>)
 800131c:	480f      	ldr	r0, [pc, #60]	; (800135c <W5500Init+0x88>)
 800131e:	f000 f8a1 	bl	8001464 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_read_burst, wizchip_write_burst);
 8001322:	490f      	ldr	r1, [pc, #60]	; (8001360 <W5500Init+0x8c>)
 8001324:	480f      	ldr	r0, [pc, #60]	; (8001364 <W5500Init+0x90>)
 8001326:	f000 f8c9 	bl	80014bc <reg_wizchip_spiburst_cbfunc>

	if(ctlwizchip(CW_INIT_WIZCHIP, (void*)memsize)==-1){
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4619      	mov	r1, r3
 800132e:	2001      	movs	r0, #1
 8001330:	f000 f8f0 	bl	8001514 <ctlwizchip>
 8001334:	4603      	mov	r3, r0
 8001336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133a:	d100      	bne.n	800133e <W5500Init+0x6a>
//		printf("wizchip Initialization failed\r\n");
		while(1);
 800133c:	e7fe      	b.n	800133c <W5500Init+0x68>
	}
//	printf("wizchip initialization success\r\n");

}
 800133e:	bf00      	nop
 8001340:	371c      	adds	r7, #28
 8001342:	46bd      	mov	sp, r7
 8001344:	bd90      	pop	{r4, r7, pc}
 8001346:	bf00      	nop
 8001348:	08003840 	.word	0x08003840
 800134c:	40010800 	.word	0x40010800
 8001350:	08001205 	.word	0x08001205
 8001354:	080011ed 	.word	0x080011ed
 8001358:	08001241 	.word	0x08001241
 800135c:	0800121d 	.word	0x0800121d
 8001360:	0800129d 	.word	0x0800129d
 8001364:	08001265 	.word	0x08001265

08001368 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr

08001374 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
 8001384:	bf00      	nop
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr

08001398 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bc80      	pop	{r7}
 80013ae:	4770      	bx	lr

080013b0 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	78fa      	ldrb	r2, [r7, #3]
 80013c0:	701a      	strb	r2, [r3, #0]
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr

080013cc <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	2300      	movs	r3, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 80013da:	b480      	push	{r7}
 80013dc:	b083      	sub	sp, #12
 80013de:	af00      	add	r7, sp, #0
 80013e0:	4603      	mov	r3, r0
 80013e2:	71fb      	strb	r3, [r7, #7]
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	807b      	strh	r3, [r7, #2]
 80013fa:	bf00      	nop
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	460b      	mov	r3, r1
 800140e:	807b      	strh	r3, [r7, #2]
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr
	...

0800141c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <reg_wizchip_cs_cbfunc+0x16>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8001432:	4b09      	ldr	r3, [pc, #36]	; (8001458 <reg_wizchip_cs_cbfunc+0x3c>)
 8001434:	4a09      	ldr	r2, [pc, #36]	; (800145c <reg_wizchip_cs_cbfunc+0x40>)
 8001436:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8001438:	4b07      	ldr	r3, [pc, #28]	; (8001458 <reg_wizchip_cs_cbfunc+0x3c>)
 800143a:	4a09      	ldr	r2, [pc, #36]	; (8001460 <reg_wizchip_cs_cbfunc+0x44>)
 800143c:	619a      	str	r2, [r3, #24]
 800143e:	e006      	b.n	800144e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8001440:	4a05      	ldr	r2, [pc, #20]	; (8001458 <reg_wizchip_cs_cbfunc+0x3c>)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <reg_wizchip_cs_cbfunc+0x3c>)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	6193      	str	r3, [r2, #24]
   }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	20000024 	.word	0x20000024
 800145c:	08001381 	.word	0x08001381
 8001460:	0800138d 	.word	0x0800138d

08001464 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 800146e:	bf00      	nop
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001472:	881b      	ldrh	r3, [r3, #0]
 8001474:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f9      	beq.n	8001470 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <reg_wizchip_spi_cbfunc+0x24>
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d106      	bne.n	8001496 <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <reg_wizchip_spi_cbfunc+0x4c>)
 800148a:	4a0a      	ldr	r2, [pc, #40]	; (80014b4 <reg_wizchip_spi_cbfunc+0x50>)
 800148c:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001490:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <reg_wizchip_spi_cbfunc+0x54>)
 8001492:	621a      	str	r2, [r3, #32]
 8001494:	e006      	b.n	80014a4 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8001496:	4a06      	ldr	r2, [pc, #24]	; (80014b0 <reg_wizchip_spi_cbfunc+0x4c>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 800149c:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <reg_wizchip_spi_cbfunc+0x4c>)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	6213      	str	r3, [r2, #32]
   }
}
 80014a2:	bf00      	nop
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000024 	.word	0x20000024
 80014b4:	080013cd 	.word	0x080013cd
 80014b8:	080013db 	.word	0x080013db

080014bc <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 80014c6:	bf00      	nop
 80014c8:	4b0f      	ldr	r3, [pc, #60]	; (8001508 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80014ca:	881b      	ldrh	r3, [r3, #0]
 80014cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f9      	beq.n	80014c8 <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d002      	beq.n	80014e0 <reg_wizchip_spiburst_cbfunc+0x24>
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d106      	bne.n	80014ee <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80014e2:	4a0a      	ldr	r2, [pc, #40]	; (800150c <reg_wizchip_spiburst_cbfunc+0x50>)
 80014e4:	625a      	str	r2, [r3, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 80014e6:	4b08      	ldr	r3, [pc, #32]	; (8001508 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80014e8:	4a09      	ldr	r2, [pc, #36]	; (8001510 <reg_wizchip_spiburst_cbfunc+0x54>)
 80014ea:	629a      	str	r2, [r3, #40]	; 0x28
 80014ec:	e006      	b.n	80014fc <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 80014ee:	4a06      	ldr	r2, [pc, #24]	; (8001508 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6253      	str	r3, [r2, #36]	; 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 80014f4:	4a04      	ldr	r2, [pc, #16]	; (8001508 <reg_wizchip_spiburst_cbfunc+0x4c>)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	6293      	str	r3, [r2, #40]	; 0x28
   }
}
 80014fa:	bf00      	nop
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	20000024 	.word	0x20000024
 800150c:	080013ef 	.word	0x080013ef
 8001510:	08001405 	.word	0x08001405

08001514 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8001514:	b590      	push	{r4, r7, lr}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	2b0f      	cmp	r3, #15
 8001530:	f200 80c7 	bhi.w	80016c2 <ctlwizchip+0x1ae>
 8001534:	a201      	add	r2, pc, #4	; (adr r2, 800153c <ctlwizchip+0x28>)
 8001536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153a:	bf00      	nop
 800153c:	0800157d 	.word	0x0800157d
 8001540:	08001583 	.word	0x08001583
 8001544:	080015af 	.word	0x080015af
 8001548:	080015a3 	.word	0x080015a3
 800154c:	080015bd 	.word	0x080015bd
 8001550:	080015c9 	.word	0x080015c9
 8001554:	080015d7 	.word	0x080015d7
 8001558:	080015fd 	.word	0x080015fd
 800155c:	08001623 	.word	0x08001623
 8001560:	08001667 	.word	0x08001667
 8001564:	0800166d 	.word	0x0800166d
 8001568:	08001675 	.word	0x08001675
 800156c:	080016c9 	.word	0x080016c9
 8001570:	0800167d 	.word	0x0800167d
 8001574:	0800168b 	.word	0x0800168b
 8001578:	080016a7 	.word	0x080016a7
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 800157c:	f000 f8ea 	bl	8001754 <wizchip_sw_reset>
         break;
 8001580:	e0a3      	b.n	80016ca <ctlwizchip+0x1b6>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d004      	beq.n	8001592 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3308      	adds	r3, #8
 8001590:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f927 	bl	80017ec <wizchip_init>
 800159e:	4603      	mov	r3, r0
 80015a0:	e094      	b.n	80016cc <ctlwizchip+0x1b8>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f9ac 	bl	8001904 <wizchip_clrinterrupt>
         break;
 80015ac:	e08d      	b.n	80016ca <ctlwizchip+0x1b6>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 80015ae:	f000 f9dd 	bl	800196c <wizchip_getinterrupt>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	801a      	strh	r2, [r3, #0]
         break;
 80015ba:	e086      	b.n	80016ca <ctlwizchip+0x1b6>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 f9f8 	bl	80019b6 <wizchip_setinterruptmask>
         break;         
 80015c6:	e080      	b.n	80016ca <ctlwizchip+0x1b6>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 80015c8:	f000 fa10 	bl	80019ec <wizchip_getinterruptmask>
 80015cc:	4603      	mov	r3, r0
 80015ce:	461a      	mov	r2, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	801a      	strh	r2, [r3, #0]
         break;
 80015d4:	e079      	b.n	80016ca <ctlwizchip+0x1b6>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	b29b      	uxth	r3, r3
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 80015e6:	f7ff f819 	bl	800061c <WIZCHIP_WRITE>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	881b      	ldrh	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	4619      	mov	r1, r3
 80015f2:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 80015f6:	f7ff f811 	bl	800061c <WIZCHIP_WRITE>
         break;
 80015fa:	e066      	b.n	80016ca <ctlwizchip+0x1b6>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 80015fc:	f44f 5098 	mov.w	r0, #4864	; 0x1300
 8001600:	f7fe ffc0 	bl	8000584 <WIZCHIP_READ>
 8001604:	4603      	mov	r3, r0
 8001606:	b29b      	uxth	r3, r3
 8001608:	021b      	lsls	r3, r3, #8
 800160a:	b29c      	uxth	r4, r3
 800160c:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8001610:	f7fe ffb8 	bl	8000584 <WIZCHIP_READ>
 8001614:	4603      	mov	r3, r0
 8001616:	b29b      	uxth	r3, r3
 8001618:	4423      	add	r3, r4
 800161a:	b29a      	uxth	r2, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	801a      	strh	r2, [r3, #0]
         break;
 8001620:	e053      	b.n	80016ca <ctlwizchip+0x1b6>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8001622:	4b2c      	ldr	r3, [pc, #176]	; (80016d4 <ctlwizchip+0x1c0>)
 8001624:	789a      	ldrb	r2, [r3, #2]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	4a29      	ldr	r2, [pc, #164]	; (80016d4 <ctlwizchip+0x1c0>)
 8001630:	78d2      	ldrb	r2, [r2, #3]
 8001632:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	3302      	adds	r3, #2
 8001638:	4a26      	ldr	r2, [pc, #152]	; (80016d4 <ctlwizchip+0x1c0>)
 800163a:	7912      	ldrb	r2, [r2, #4]
 800163c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	3303      	adds	r3, #3
 8001642:	4a24      	ldr	r2, [pc, #144]	; (80016d4 <ctlwizchip+0x1c0>)
 8001644:	7952      	ldrb	r2, [r2, #5]
 8001646:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	3304      	adds	r3, #4
 800164c:	4a21      	ldr	r2, [pc, #132]	; (80016d4 <ctlwizchip+0x1c0>)
 800164e:	7992      	ldrb	r2, [r2, #6]
 8001650:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	3305      	adds	r3, #5
 8001656:	4a1f      	ldr	r2, [pc, #124]	; (80016d4 <ctlwizchip+0x1c0>)
 8001658:	79d2      	ldrb	r2, [r2, #7]
 800165a:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	3306      	adds	r3, #6
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
         break;
 8001664:	e031      	b.n	80016ca <ctlwizchip+0x1b6>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 8001666:	f000 fa13 	bl	8001a90 <wizphy_reset>
         break;
 800166a:	e02e      	b.n	80016ca <ctlwizchip+0x1b6>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 800166c:	6838      	ldr	r0, [r7, #0]
 800166e:	f000 fa36 	bl	8001ade <wizphy_setphyconf>
         break;
 8001672:	e02a      	b.n	80016ca <ctlwizchip+0x1b6>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f000 fa75 	bl	8001b64 <wizphy_getphyconf>
         break;
 800167a:	e026      	b.n	80016ca <ctlwizchip+0x1b6>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fad9 	bl	8001c38 <wizphy_setphypmode>
 8001686:	4603      	mov	r3, r0
 8001688:	e020      	b.n	80016cc <ctlwizchip+0x1b8>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 800168a:	f000 f9e8 	bl	8001a5e <wizphy_getphypmode>
 800168e:	4603      	mov	r3, r0
 8001690:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 8001692:	7dfb      	ldrb	r3, [r7, #23]
 8001694:	2bff      	cmp	r3, #255	; 0xff
 8001696:	d102      	bne.n	800169e <ctlwizchip+0x18a>
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	e016      	b.n	80016cc <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	7dfa      	ldrb	r2, [r7, #23]
 80016a2:	701a      	strb	r2, [r3, #0]
         break;
 80016a4:	e011      	b.n	80016ca <ctlwizchip+0x1b6>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80016a6:	f000 f9c4 	bl	8001a32 <wizphy_getphylink>
 80016aa:	4603      	mov	r3, r0
 80016ac:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80016ae:	7dfb      	ldrb	r3, [r7, #23]
 80016b0:	2bff      	cmp	r3, #255	; 0xff
 80016b2:	d102      	bne.n	80016ba <ctlwizchip+0x1a6>
 80016b4:	f04f 33ff 	mov.w	r3, #4294967295
 80016b8:	e008      	b.n	80016cc <ctlwizchip+0x1b8>
         *(uint8_t*)arg = tmp;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	7dfa      	ldrb	r2, [r7, #23]
 80016be:	701a      	strb	r2, [r3, #0]
         break;
 80016c0:	e003      	b.n	80016ca <ctlwizchip+0x1b6>
   #endif      
      default:
         return -1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
 80016c6:	e001      	b.n	80016cc <ctlwizchip+0x1b8>
         break;
 80016c8:	bf00      	nop
   }
   return 0;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd90      	pop	{r4, r7, pc}
 80016d4:	20000024 	.word	0x20000024

080016d8 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	2b05      	cmp	r3, #5
 80016e8:	d82c      	bhi.n	8001744 <ctlnetwork+0x6c>
 80016ea:	a201      	add	r2, pc, #4	; (adr r2, 80016f0 <ctlnetwork+0x18>)
 80016ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f0:	08001709 	.word	0x08001709
 80016f4:	08001711 	.word	0x08001711
 80016f8:	08001719 	.word	0x08001719
 80016fc:	08001727 	.word	0x08001727
 8001700:	08001735 	.word	0x08001735
 8001704:	0800173d 	.word	0x0800173d
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8001708:	6838      	ldr	r0, [r7, #0]
 800170a:	f000 fadf 	bl	8001ccc <wizchip_setnetinfo>
         break;
 800170e:	e01c      	b.n	800174a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8001710:	6838      	ldr	r0, [r7, #0]
 8001712:	f000 fb1b 	bl	8001d4c <wizchip_getnetinfo>
         break;
 8001716:	e018      	b.n	800174a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fb55 	bl	8001dcc <wizchip_setnetmode>
 8001722:	4603      	mov	r3, r0
 8001724:	e012      	b.n	800174c <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8001726:	f000 fb73 	bl	8001e10 <wizchip_getnetmode>
 800172a:	4603      	mov	r3, r0
 800172c:	461a      	mov	r2, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	701a      	strb	r2, [r3, #0]
         break;
 8001732:	e00a      	b.n	800174a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8001734:	6838      	ldr	r0, [r7, #0]
 8001736:	f000 fb73 	bl	8001e20 <wizchip_settimeout>
         break;
 800173a:	e006      	b.n	800174a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 800173c:	6838      	ldr	r0, [r7, #0]
 800173e:	f000 fb90 	bl	8001e62 <wizchip_gettimeout>
         break;
 8001742:	e002      	b.n	800174a <ctlnetwork+0x72>
      default:
         return -1;
 8001744:	f04f 33ff 	mov.w	r3, #4294967295
 8001748:	e000      	b.n	800174c <ctlnetwork+0x74>
   }
   return 0;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b086      	sub	sp, #24
 8001758:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2206      	movs	r2, #6
 800175e:	4619      	mov	r1, r3
 8001760:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001764:	f7fe ffa8 	bl	80006b8 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2204      	movs	r2, #4
 800176e:	4619      	mov	r1, r3
 8001770:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001774:	f7fe ffa0 	bl	80006b8 <WIZCHIP_READ_BUF>
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	2204      	movs	r2, #4
 800177e:	4619      	mov	r1, r3
 8001780:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001784:	f7fe ff98 	bl	80006b8 <WIZCHIP_READ_BUF>
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	2204      	movs	r2, #4
 800178e:	4619      	mov	r1, r3
 8001790:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001794:	f7fe ff90 	bl	80006b8 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8001798:	2180      	movs	r1, #128	; 0x80
 800179a:	2000      	movs	r0, #0
 800179c:	f7fe ff3e 	bl	800061c <WIZCHIP_WRITE>
   getMR(); // for delay
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7fe feef 	bl	8000584 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2206      	movs	r2, #6
 80017aa:	4619      	mov	r1, r3
 80017ac:	f44f 6010 	mov.w	r0, #2304	; 0x900
 80017b0:	f7fe ffe2 	bl	8000778 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2204      	movs	r2, #4
 80017ba:	4619      	mov	r1, r3
 80017bc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80017c0:	f7fe ffda 	bl	8000778 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 80017c4:	f107 0310 	add.w	r3, r7, #16
 80017c8:	2204      	movs	r2, #4
 80017ca:	4619      	mov	r1, r3
 80017cc:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80017d0:	f7fe ffd2 	bl	8000778 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	2204      	movs	r2, #4
 80017da:	4619      	mov	r1, r3
 80017dc:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 80017e0:	f7fe ffca 	bl	8000778 <WIZCHIP_WRITE_BUF>
}
 80017e4:	bf00      	nop
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 80017fa:	f7ff ffab 	bl	8001754 <wizchip_sw_reset>
   if(txsize)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d03b      	beq.n	800187c <wizchip_init+0x90>
   {
      tmp = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001808:	2300      	movs	r3, #0
 800180a:	73fb      	strb	r3, [r7, #15]
 800180c:	e015      	b.n	800183a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800180e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	7bbb      	ldrb	r3, [r7, #14]
 800181a:	4413      	add	r3, r2
 800181c:	b2db      	uxtb	r3, r3
 800181e:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8001820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001824:	2b10      	cmp	r3, #16
 8001826:	dd02      	ble.n	800182e <wizchip_init+0x42>
 8001828:	f04f 33ff 	mov.w	r3, #4294967295
 800182c:	e066      	b.n	80018fc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800182e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001832:	b2db      	uxtb	r3, r3
 8001834:	3301      	adds	r3, #1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	73fb      	strb	r3, [r7, #15]
 800183a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183e:	2b07      	cmp	r3, #7
 8001840:	dde5      	ble.n	800180e <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001842:	2300      	movs	r3, #0
 8001844:	73fb      	strb	r3, [r7, #15]
 8001846:	e015      	b.n	8001874 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8001848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800184c:	009b      	lsls	r3, r3, #2
 800184e:	3301      	adds	r3, #1
 8001850:	00db      	lsls	r3, r3, #3
 8001852:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 8001856:	4618      	mov	r0, r3
 8001858:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	4413      	add	r3, r2
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	4619      	mov	r1, r3
 8001864:	f7fe feda 	bl	800061c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	3301      	adds	r3, #1
 8001870:	b2db      	uxtb	r3, r3
 8001872:	73fb      	strb	r3, [r7, #15]
 8001874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001878:	2b07      	cmp	r3, #7
 800187a:	dde5      	ble.n	8001848 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d03b      	beq.n	80018fa <wizchip_init+0x10e>
   {
      tmp = 0;
 8001882:	2300      	movs	r3, #0
 8001884:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	e015      	b.n	80018b8 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 800188c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	4413      	add	r3, r2
 8001894:	781a      	ldrb	r2, [r3, #0]
 8001896:	7bbb      	ldrb	r3, [r7, #14]
 8001898:	4413      	add	r3, r2
 800189a:	b2db      	uxtb	r3, r3
 800189c:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 800189e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018a2:	2b10      	cmp	r3, #16
 80018a4:	dd02      	ble.n	80018ac <wizchip_init+0xc0>
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	e027      	b.n	80018fc <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80018ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018bc:	2b07      	cmp	r3, #7
 80018be:	dde5      	ble.n	800188c <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80018c0:	2300      	movs	r3, #0
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e015      	b.n	80018f2 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 80018c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	3301      	adds	r3, #1
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 80018d4:	4618      	mov	r0, r3
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	4413      	add	r3, r2
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	4619      	mov	r1, r3
 80018e2:	f7fe fe9b 	bl	800061c <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80018e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	3301      	adds	r3, #1
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	73fb      	strb	r3, [r7, #15]
 80018f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f6:	2b07      	cmp	r3, #7
 80018f8:	dde5      	ble.n	80018c6 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8001912:	88fb      	ldrh	r3, [r7, #6]
 8001914:	0a1b      	lsrs	r3, r3, #8
 8001916:	b29b      	uxth	r3, r3
 8001918:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800191a:	7bfb      	ldrb	r3, [r7, #15]
 800191c:	f023 030f 	bic.w	r3, r3, #15
 8001920:	b2db      	uxtb	r3, r3
 8001922:	4619      	mov	r1, r3
 8001924:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001928:	f7fe fe78 	bl	800061c <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	e014      	b.n	800195c <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8001932:	7bba      	ldrb	r2, [r7, #14]
 8001934:	7bfb      	ldrb	r3, [r7, #15]
 8001936:	fa42 f303 	asr.w	r3, r2, r3
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <wizchip_clrinterrupt+0x52>
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	3301      	adds	r3, #1
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800194e:	211f      	movs	r1, #31
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe fe63 	bl	800061c <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	3301      	adds	r3, #1
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	7bfb      	ldrb	r3, [r7, #15]
 800195e:	2b07      	cmp	r3, #7
 8001960:	d9e7      	bls.n	8001932 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 8001962:	bf00      	nop
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}

0800196c <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800197a:	2300      	movs	r3, #0
 800197c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 800197e:	f44f 50a8 	mov.w	r0, #5376	; 0x1500
 8001982:	f7fe fdff 	bl	8000584 <WIZCHIP_READ>
 8001986:	4603      	mov	r3, r0
 8001988:	f023 030f 	bic.w	r3, r3, #15
 800198c:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 800198e:	f44f 50b8 	mov.w	r0, #5888	; 0x1700
 8001992:	f7fe fdf7 	bl	8000584 <WIZCHIP_READ>
 8001996:	4603      	mov	r3, r0
 8001998:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80019ac:	88bb      	ldrh	r3, [r7, #4]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 80019c0:	88fb      	ldrh	r3, [r7, #6]
 80019c2:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	4619      	mov	r1, r3
 80019d0:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 80019d4:	f7fe fe22 	bl	800061c <WIZCHIP_WRITE>
   setSIMR(simr);
 80019d8:	7bbb      	ldrb	r3, [r7, #14]
 80019da:	4619      	mov	r1, r3
 80019dc:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 80019e0:	f7fe fe1c 	bl	800061c <WIZCHIP_WRITE>
#endif   
}
 80019e4:	bf00      	nop
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80019fa:	2300      	movs	r3, #0
 80019fc:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 80019fe:	f44f 50b0 	mov.w	r0, #5632	; 0x1600
 8001a02:	f7fe fdbf 	bl	8000584 <WIZCHIP_READ>
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 8001a0a:	f44f 50c0 	mov.w	r0, #6144	; 0x1800
 8001a0e:	f7fe fdb9 	bl	8000584 <WIZCHIP_READ>
 8001a12:	4603      	mov	r3, r0
 8001a14:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8001a16:	79bb      	ldrb	r3, [r7, #6]
 8001a18:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 8001a1a:	88bb      	ldrh	r3, [r7, #4]
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	4413      	add	r3, r2
 8001a26:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8001a28:	88bb      	ldrh	r3, [r7, #4]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 8001a3c:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001a40:	f7fe fda0 	bl	8000584 <WIZCHIP_READ>
 8001a44:	4603      	mov	r3, r0
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b082      	sub	sp, #8
 8001a62:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 8001a64:	2300      	movs	r3, #0
 8001a66:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 8001a68:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001a6c:	f7fe fd8a 	bl	8000584 <WIZCHIP_READ>
 8001a70:	4603      	mov	r3, r0
 8001a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a76:	2b30      	cmp	r3, #48	; 0x30
 8001a78:	d102      	bne.n	8001a80 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	e001      	b.n	8001a84 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 8001a80:	2300      	movs	r3, #0
 8001a82:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 8001a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 8001a96:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001a9a:	f7fe fd73 	bl	8000584 <WIZCHIP_READ>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001aa8:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	4619      	mov	r1, r3
 8001aae:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001ab2:	f7fe fdb3 	bl	800061c <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8001ab6:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001aba:	f7fe fd63 	bl	8000584 <WIZCHIP_READ>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ac8:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	4619      	mov	r1, r3
 8001ace:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001ad2:	f7fe fda3 	bl	800061c <WIZCHIP_WRITE>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d104      	bne.n	8001afc <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af8:	73fb      	strb	r3, [r7, #15]
 8001afa:	e003      	b.n	8001b04 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
 8001afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b02:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	785b      	ldrb	r3, [r3, #1]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d104      	bne.n	8001b16 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001b0c:	7bfb      	ldrb	r3, [r7, #15]
 8001b0e:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	e019      	b.n	8001b4a <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	78db      	ldrb	r3, [r3, #3]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d10d      	bne.n	8001b3a <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	789b      	ldrb	r3, [r3, #2]
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d104      	bne.n	8001b30 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8001b26:	7bfb      	ldrb	r3, [r7, #15]
 8001b28:	f043 0318 	orr.w	r3, r3, #24
 8001b2c:	73fb      	strb	r3, [r7, #15]
 8001b2e:	e00c      	b.n	8001b4a <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	f043 0308 	orr.w	r3, r3, #8
 8001b36:	73fb      	strb	r3, [r7, #15]
 8001b38:	e007      	b.n	8001b4a <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	789b      	ldrb	r3, [r3, #2]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d103      	bne.n	8001b4a <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	f043 0310 	orr.w	r3, r3, #16
 8001b48:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 8001b4a:	7bfb      	ldrb	r3, [r7, #15]
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001b52:	f7fe fd63 	bl	800061c <WIZCHIP_WRITE>
   wizphy_reset();
 8001b56:	f7ff ff9b 	bl	8001a90 <wizphy_reset>
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8001b70:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001b74:	f7fe fd06 	bl	8000584 <WIZCHIP_READ>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	119b      	asrs	r3, r3, #6
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001b8c:	7bfb      	ldrb	r3, [r7, #15]
 8001b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	d001      	beq.n	8001b9a <wizphy_getphyconf+0x36>
 8001b96:	2b38      	cmp	r3, #56	; 0x38
 8001b98:	d103      	bne.n	8001ba2 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	705a      	strb	r2, [r3, #1]
         break;
 8001ba0:	e003      	b.n	8001baa <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	705a      	strb	r2, [r3, #1]
         break;
 8001ba8:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001baa:	7bfb      	ldrb	r3, [r7, #15]
 8001bac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bb0:	3b10      	subs	r3, #16
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	bf8c      	ite	hi
 8001bb6:	2201      	movhi	r2, #1
 8001bb8:	2200      	movls	r2, #0
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	2a00      	cmp	r2, #0
 8001bbe:	d10f      	bne.n	8001be0 <wizphy_getphyconf+0x7c>
 8001bc0:	4a1b      	ldr	r2, [pc, #108]	; (8001c30 <wizphy_getphyconf+0xcc>)
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bf14      	ite	ne
 8001bce:	2301      	movne	r3, #1
 8001bd0:	2300      	moveq	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	709a      	strb	r2, [r3, #2]
         break;
 8001bde:	e003      	b.n	8001be8 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	709a      	strb	r2, [r3, #2]
         break;
 8001be6:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bee:	3b08      	subs	r3, #8
 8001bf0:	2b18      	cmp	r3, #24
 8001bf2:	bf8c      	ite	hi
 8001bf4:	2201      	movhi	r2, #1
 8001bf6:	2200      	movls	r2, #0
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	2a00      	cmp	r2, #0
 8001bfc:	d10f      	bne.n	8001c1e <wizphy_getphyconf+0xba>
 8001bfe:	4a0d      	ldr	r2, [pc, #52]	; (8001c34 <wizphy_getphyconf+0xd0>)
 8001c00:	fa22 f303 	lsr.w	r3, r2, r3
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bf14      	ite	ne
 8001c0c:	2301      	movne	r3, #1
 8001c0e:	2300      	moveq	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	70da      	strb	r2, [r3, #3]
         break;
 8001c1c:	e003      	b.n	8001c26 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2200      	movs	r2, #0
 8001c22:	70da      	strb	r2, [r3, #3]
         break;
 8001c24:	bf00      	nop
   }
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	00010101 	.word	0x00010101
 8001c34:	01010001 	.word	0x01010001

08001c38 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8001c46:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001c4a:	f7fe fc9b 	bl	8000584 <WIZCHIP_READ>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 8001c52:	7bfb      	ldrb	r3, [r7, #15]
 8001c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d102      	bne.n	8001c62 <wizphy_setphypmode+0x2a>
 8001c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c60:	e030      	b.n	8001cc4 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001c68:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d104      	bne.n	8001c7a <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 8001c70:	7bfb      	ldrb	r3, [r7, #15]
 8001c72:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e003      	b.n	8001c82 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001c80:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	4619      	mov	r1, r3
 8001c86:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001c8a:	f7fe fcc7 	bl	800061c <WIZCHIP_WRITE>
   wizphy_reset();
 8001c8e:	f7ff feff 	bl	8001a90 <wizphy_reset>
   tmp = getPHYCFGR();
 8001c92:	f44f 5038 	mov.w	r0, #11776	; 0x2e00
 8001c96:	f7fe fc75 	bl	8000584 <WIZCHIP_READ>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d106      	bne.n	8001cb2 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d008      	beq.n	8001cc0 <wizphy_setphypmode+0x88>
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e008      	b.n	8001cc4 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8001cb2:	7bfb      	ldrb	r3, [r7, #15]
 8001cb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <wizphy_setphypmode+0x88>
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	e001      	b.n	8001cc4 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2206      	movs	r2, #6
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001cde:	f7fe fd4b 	bl	8000778 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	330e      	adds	r3, #14
 8001ce6:	2204      	movs	r2, #4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cee:	f7fe fd43 	bl	8000778 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	330a      	adds	r3, #10
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001cfe:	f7fe fd3b 	bl	8000778 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3306      	adds	r3, #6
 8001d06:	2204      	movs	r2, #4
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001d0e:	f7fe fd33 	bl	8000778 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7c9a      	ldrb	r2, [r3, #18]
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <wizchip_setnetinfo+0x78>)
 8001d18:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7cda      	ldrb	r2, [r3, #19]
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <wizchip_setnetinfo+0x78>)
 8001d20:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7d1a      	ldrb	r2, [r3, #20]
 8001d26:	4b07      	ldr	r3, [pc, #28]	; (8001d44 <wizchip_setnetinfo+0x78>)
 8001d28:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	7d5a      	ldrb	r2, [r3, #21]
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <wizchip_setnetinfo+0x78>)
 8001d30:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	7d9a      	ldrb	r2, [r3, #22]
 8001d36:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <wizchip_setnetinfo+0x7c>)
 8001d38:	701a      	strb	r2, [r3, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	200000ec 	.word	0x200000ec
 8001d48:	200000f0 	.word	0x200000f0

08001d4c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2206      	movs	r2, #6
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f44f 6010 	mov.w	r0, #2304	; 0x900
 8001d5e:	f7fe fcab 	bl	80006b8 <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	330e      	adds	r3, #14
 8001d66:	2204      	movs	r2, #4
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d6e:	f7fe fca3 	bl	80006b8 <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	330a      	adds	r3, #10
 8001d76:	2204      	movs	r2, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8001d7e:	f7fe fc9b 	bl	80006b8 <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	3306      	adds	r3, #6
 8001d86:	2204      	movs	r2, #4
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001d8e:	f7fe fc93 	bl	80006b8 <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 8001d92:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <wizchip_getnetinfo+0x78>)
 8001d94:	781a      	ldrb	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <wizchip_getnetinfo+0x78>)
 8001d9c:	785a      	ldrb	r2, [r3, #1]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 8001da2:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <wizchip_getnetinfo+0x78>)
 8001da4:	789a      	ldrb	r2, [r3, #2]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <wizchip_getnetinfo+0x78>)
 8001dac:	78da      	ldrb	r2, [r3, #3]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8001db2:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <wizchip_getnetinfo+0x7c>)
 8001db4:	781a      	ldrb	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	759a      	strb	r2, [r3, #22]
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	200000ec 	.word	0x200000ec
 8001dc8:	200000f0 	.word	0x200000f0

08001dcc <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d002      	beq.n	8001dea <wizchip_setnetmode+0x1e>
 8001de4:	f04f 33ff 	mov.w	r3, #4294967295
 8001de8:	e00e      	b.n	8001e08 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7fe fbca 	bl	8000584 <WIZCHIP_READ>
 8001df0:	4603      	mov	r3, r0
 8001df2:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7fe fc0b 	bl	800061c <WIZCHIP_WRITE>
   return 0;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3710      	adds	r7, #16
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7fe fbb5 	bl	8000584 <WIZCHIP_READ>
 8001e1a:	4603      	mov	r3, r0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001e32:	f7fe fbf3 	bl	800061c <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	885b      	ldrh	r3, [r3, #2]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	4619      	mov	r1, r3
 8001e42:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001e46:	f7fe fbe9 	bl	800061c <WIZCHIP_WRITE>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	885b      	ldrh	r3, [r3, #2]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	4619      	mov	r1, r3
 8001e52:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001e56:	f7fe fbe1 	bl	800061c <WIZCHIP_WRITE>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 8001e62:	b590      	push	{r4, r7, lr}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 8001e6a:	f44f 50d8 	mov.w	r0, #6912	; 0x1b00
 8001e6e:	f7fe fb89 	bl	8000584 <WIZCHIP_READ>
 8001e72:	4603      	mov	r3, r0
 8001e74:	461a      	mov	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 8001e7a:	f44f 50c8 	mov.w	r0, #6400	; 0x1900
 8001e7e:	f7fe fb81 	bl	8000584 <WIZCHIP_READ>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	021b      	lsls	r3, r3, #8
 8001e88:	b29c      	uxth	r4, r3
 8001e8a:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 8001e8e:	f7fe fb79 	bl	8000584 <WIZCHIP_READ>
 8001e92:	4603      	mov	r3, r0
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	4423      	add	r3, r4
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	805a      	strh	r2, [r3, #2]
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd90      	pop	{r4, r7, pc}
	...

08001ea8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ea8:	f7fe fb65 	bl	8000576 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eac:	480b      	ldr	r0, [pc, #44]	; (8001edc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001eae:	490c      	ldr	r1, [pc, #48]	; (8001ee0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001eb0:	4a0c      	ldr	r2, [pc, #48]	; (8001ee4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb4:	e002      	b.n	8001ebc <LoopCopyDataInit>

08001eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eba:	3304      	adds	r3, #4

08001ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec0:	d3f9      	bcc.n	8001eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec2:	4a09      	ldr	r2, [pc, #36]	; (8001ee8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001ec4:	4c09      	ldr	r4, [pc, #36]	; (8001eec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec8:	e001      	b.n	8001ece <LoopFillZerobss>

08001eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ecc:	3204      	adds	r2, #4

08001ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed0:	d3fb      	bcc.n	8001eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ed2:	f001 fc85 	bl	80037e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ed6:	f7fe f939 	bl	800014c <main>
  bx lr
 8001eda:	4770      	bx	lr
  ldr r0, =_sdata
 8001edc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee0:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001ee4:	0800387c 	.word	0x0800387c
  ldr r2, =_sbss
 8001ee8:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001eec:	200000f8 	.word	0x200000f8

08001ef0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC1_2_IRQHandler>
	...

08001ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_Init+0x28>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_Init+0x28>)
 8001efe:	f043 0310 	orr.w	r3, r3, #16
 8001f02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f04:	2003      	movs	r0, #3
 8001f06:	f000 f907 	bl	8002118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0a:	200f      	movs	r0, #15
 8001f0c:	f000 f808 	bl	8001f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f10:	f7fe fa8c 	bl	800042c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40022000 	.word	0x40022000

08001f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_InitTick+0x54>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_InitTick+0x58>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f911 	bl	8002166 <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00e      	b.n	8001f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d80a      	bhi.n	8001f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f000 f8e7 	bl	800212e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <HAL_InitTick+0x5c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	2000001c 	.word	0x2000001c
 8001f78:	20000054 	.word	0x20000054
 8001f7c:	20000050 	.word	0x20000050

08001f80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b05      	ldr	r3, [pc, #20]	; (8001f9c <HAL_IncTick+0x1c>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a03      	ldr	r2, [pc, #12]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bc80      	pop	{r7}
 8001f9a:	4770      	bx	lr
 8001f9c:	20000054 	.word	0x20000054
 8001fa0:	200000f4 	.word	0x200000f4

08001fa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fa8:	4b02      	ldr	r3, [pc, #8]	; (8001fb4 <HAL_GetTick+0x10>)
 8001faa:	681b      	ldr	r3, [r3, #0]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	200000f4 	.word	0x200000f4

08001fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc8:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fea:	4a04      	ldr	r2, [pc, #16]	; (8001ffc <__NVIC_SetPriorityGrouping+0x44>)
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	60d3      	str	r3, [r2, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002004:	4b04      	ldr	r3, [pc, #16]	; (8002018 <__NVIC_GetPriorityGrouping+0x18>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	f003 0307 	and.w	r3, r3, #7
}
 800200e:	4618      	mov	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	; (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	; (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	; 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	; 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020e4:	d301      	bcc.n	80020ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020e6:	2301      	movs	r3, #1
 80020e8:	e00f      	b.n	800210a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ea:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <SysTick_Config+0x40>)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3b01      	subs	r3, #1
 80020f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020f2:	210f      	movs	r1, #15
 80020f4:	f04f 30ff 	mov.w	r0, #4294967295
 80020f8:	f7ff ff90 	bl	800201c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <SysTick_Config+0x40>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002102:	4b04      	ldr	r3, [pc, #16]	; (8002114 <SysTick_Config+0x40>)
 8002104:	2207      	movs	r2, #7
 8002106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	e000e010 	.word	0xe000e010

08002118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff49 	bl	8001fb8 <__NVIC_SetPriorityGrouping>
}
 8002126:	bf00      	nop
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	4603      	mov	r3, r0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800213c:	2300      	movs	r3, #0
 800213e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002140:	f7ff ff5e 	bl	8002000 <__NVIC_GetPriorityGrouping>
 8002144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	6978      	ldr	r0, [r7, #20]
 800214c:	f7ff ff90 	bl	8002070 <NVIC_EncodePriority>
 8002150:	4602      	mov	r2, r0
 8002152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002156:	4611      	mov	r1, r2
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff ff5f 	bl	800201c <__NVIC_SetPriority>
}
 800215e:	bf00      	nop
 8002160:	3718      	adds	r7, #24
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ffb0 	bl	80020d4 <SysTick_Config>
 8002174:	4603      	mov	r3, r0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002180:	b480      	push	{r7}
 8002182:	b08b      	sub	sp, #44	; 0x2c
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002192:	e169      	b.n	8002468 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002194:	2201      	movs	r2, #1
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	f040 8158 	bne.w	8002462 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4a9a      	ldr	r2, [pc, #616]	; (8002420 <HAL_GPIO_Init+0x2a0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d05e      	beq.n	800227a <HAL_GPIO_Init+0xfa>
 80021bc:	4a98      	ldr	r2, [pc, #608]	; (8002420 <HAL_GPIO_Init+0x2a0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d875      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021c2:	4a98      	ldr	r2, [pc, #608]	; (8002424 <HAL_GPIO_Init+0x2a4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d058      	beq.n	800227a <HAL_GPIO_Init+0xfa>
 80021c8:	4a96      	ldr	r2, [pc, #600]	; (8002424 <HAL_GPIO_Init+0x2a4>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d86f      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021ce:	4a96      	ldr	r2, [pc, #600]	; (8002428 <HAL_GPIO_Init+0x2a8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d052      	beq.n	800227a <HAL_GPIO_Init+0xfa>
 80021d4:	4a94      	ldr	r2, [pc, #592]	; (8002428 <HAL_GPIO_Init+0x2a8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d869      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021da:	4a94      	ldr	r2, [pc, #592]	; (800242c <HAL_GPIO_Init+0x2ac>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d04c      	beq.n	800227a <HAL_GPIO_Init+0xfa>
 80021e0:	4a92      	ldr	r2, [pc, #584]	; (800242c <HAL_GPIO_Init+0x2ac>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d863      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021e6:	4a92      	ldr	r2, [pc, #584]	; (8002430 <HAL_GPIO_Init+0x2b0>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d046      	beq.n	800227a <HAL_GPIO_Init+0xfa>
 80021ec:	4a90      	ldr	r2, [pc, #576]	; (8002430 <HAL_GPIO_Init+0x2b0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d85d      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021f2:	2b12      	cmp	r3, #18
 80021f4:	d82a      	bhi.n	800224c <HAL_GPIO_Init+0xcc>
 80021f6:	2b12      	cmp	r3, #18
 80021f8:	d859      	bhi.n	80022ae <HAL_GPIO_Init+0x12e>
 80021fa:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <HAL_GPIO_Init+0x80>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	0800227b 	.word	0x0800227b
 8002204:	08002255 	.word	0x08002255
 8002208:	08002267 	.word	0x08002267
 800220c:	080022a9 	.word	0x080022a9
 8002210:	080022af 	.word	0x080022af
 8002214:	080022af 	.word	0x080022af
 8002218:	080022af 	.word	0x080022af
 800221c:	080022af 	.word	0x080022af
 8002220:	080022af 	.word	0x080022af
 8002224:	080022af 	.word	0x080022af
 8002228:	080022af 	.word	0x080022af
 800222c:	080022af 	.word	0x080022af
 8002230:	080022af 	.word	0x080022af
 8002234:	080022af 	.word	0x080022af
 8002238:	080022af 	.word	0x080022af
 800223c:	080022af 	.word	0x080022af
 8002240:	080022af 	.word	0x080022af
 8002244:	0800225d 	.word	0x0800225d
 8002248:	08002271 	.word	0x08002271
 800224c:	4a79      	ldr	r2, [pc, #484]	; (8002434 <HAL_GPIO_Init+0x2b4>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002252:	e02c      	b.n	80022ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	623b      	str	r3, [r7, #32]
          break;
 800225a:	e029      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	3304      	adds	r3, #4
 8002262:	623b      	str	r3, [r7, #32]
          break;
 8002264:	e024      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	3308      	adds	r3, #8
 800226c:	623b      	str	r3, [r7, #32]
          break;
 800226e:	e01f      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	330c      	adds	r3, #12
 8002276:	623b      	str	r3, [r7, #32]
          break;
 8002278:	e01a      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d102      	bne.n	8002288 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002282:	2304      	movs	r3, #4
 8002284:	623b      	str	r3, [r7, #32]
          break;
 8002286:	e013      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d105      	bne.n	800229c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002290:	2308      	movs	r3, #8
 8002292:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	69fa      	ldr	r2, [r7, #28]
 8002298:	611a      	str	r2, [r3, #16]
          break;
 800229a:	e009      	b.n	80022b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800229c:	2308      	movs	r3, #8
 800229e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	615a      	str	r2, [r3, #20]
          break;
 80022a6:	e003      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022a8:	2300      	movs	r3, #0
 80022aa:	623b      	str	r3, [r7, #32]
          break;
 80022ac:	e000      	b.n	80022b0 <HAL_GPIO_Init+0x130>
          break;
 80022ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2bff      	cmp	r3, #255	; 0xff
 80022b4:	d801      	bhi.n	80022ba <HAL_GPIO_Init+0x13a>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	e001      	b.n	80022be <HAL_GPIO_Init+0x13e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3304      	adds	r3, #4
 80022be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	2bff      	cmp	r3, #255	; 0xff
 80022c4:	d802      	bhi.n	80022cc <HAL_GPIO_Init+0x14c>
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	e002      	b.n	80022d2 <HAL_GPIO_Init+0x152>
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	3b08      	subs	r3, #8
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	210f      	movs	r1, #15
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	401a      	ands	r2, r3
 80022e4:	6a39      	ldr	r1, [r7, #32]
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	431a      	orrs	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 80b1 	beq.w	8002462 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002300:	4b4d      	ldr	r3, [pc, #308]	; (8002438 <HAL_GPIO_Init+0x2b8>)
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	4a4c      	ldr	r2, [pc, #304]	; (8002438 <HAL_GPIO_Init+0x2b8>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6193      	str	r3, [r2, #24]
 800230c:	4b4a      	ldr	r3, [pc, #296]	; (8002438 <HAL_GPIO_Init+0x2b8>)
 800230e:	699b      	ldr	r3, [r3, #24]
 8002310:	f003 0301 	and.w	r3, r3, #1
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002318:	4a48      	ldr	r2, [pc, #288]	; (800243c <HAL_GPIO_Init+0x2bc>)
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	3302      	adds	r3, #2
 8002320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002324:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	220f      	movs	r2, #15
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	43db      	mvns	r3, r3
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	4013      	ands	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	4a40      	ldr	r2, [pc, #256]	; (8002440 <HAL_GPIO_Init+0x2c0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d013      	beq.n	800236c <HAL_GPIO_Init+0x1ec>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4a3f      	ldr	r2, [pc, #252]	; (8002444 <HAL_GPIO_Init+0x2c4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d00d      	beq.n	8002368 <HAL_GPIO_Init+0x1e8>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a3e      	ldr	r2, [pc, #248]	; (8002448 <HAL_GPIO_Init+0x2c8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d007      	beq.n	8002364 <HAL_GPIO_Init+0x1e4>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a3d      	ldr	r2, [pc, #244]	; (800244c <HAL_GPIO_Init+0x2cc>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d101      	bne.n	8002360 <HAL_GPIO_Init+0x1e0>
 800235c:	2303      	movs	r3, #3
 800235e:	e006      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 8002360:	2304      	movs	r3, #4
 8002362:	e004      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 8002364:	2302      	movs	r3, #2
 8002366:	e002      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_GPIO_Init+0x1ee>
 800236c:	2300      	movs	r3, #0
 800236e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002370:	f002 0203 	and.w	r2, r2, #3
 8002374:	0092      	lsls	r2, r2, #2
 8002376:	4093      	lsls	r3, r2
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	4313      	orrs	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800237e:	492f      	ldr	r1, [pc, #188]	; (800243c <HAL_GPIO_Init+0x2bc>)
 8002380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	68fa      	ldr	r2, [r7, #12]
 8002388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002398:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	492c      	ldr	r1, [pc, #176]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	608b      	str	r3, [r1, #8]
 80023a4:	e006      	b.n	80023b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023a6:	4b2a      	ldr	r3, [pc, #168]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	4928      	ldr	r1, [pc, #160]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d006      	beq.n	80023ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023c0:	4b23      	ldr	r3, [pc, #140]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	4922      	ldr	r1, [pc, #136]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60cb      	str	r3, [r1, #12]
 80023cc:	e006      	b.n	80023dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	491e      	ldr	r1, [pc, #120]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023d8:	4013      	ands	r3, r2
 80023da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d006      	beq.n	80023f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4918      	ldr	r1, [pc, #96]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	604b      	str	r3, [r1, #4]
 80023f4:	e006      	b.n	8002404 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023f6:	4b16      	ldr	r3, [pc, #88]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	4914      	ldr	r1, [pc, #80]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 8002400:	4013      	ands	r3, r2
 8002402:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d021      	beq.n	8002454 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002410:	4b0f      	ldr	r3, [pc, #60]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	490e      	ldr	r1, [pc, #56]	; (8002450 <HAL_GPIO_Init+0x2d0>)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	600b      	str	r3, [r1, #0]
 800241c:	e021      	b.n	8002462 <HAL_GPIO_Init+0x2e2>
 800241e:	bf00      	nop
 8002420:	10320000 	.word	0x10320000
 8002424:	10310000 	.word	0x10310000
 8002428:	10220000 	.word	0x10220000
 800242c:	10210000 	.word	0x10210000
 8002430:	10120000 	.word	0x10120000
 8002434:	10110000 	.word	0x10110000
 8002438:	40021000 	.word	0x40021000
 800243c:	40010000 	.word	0x40010000
 8002440:	40010800 	.word	0x40010800
 8002444:	40010c00 	.word	0x40010c00
 8002448:	40011000 	.word	0x40011000
 800244c:	40011400 	.word	0x40011400
 8002450:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002454:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <HAL_GPIO_Init+0x304>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	43db      	mvns	r3, r3
 800245c:	4909      	ldr	r1, [pc, #36]	; (8002484 <HAL_GPIO_Init+0x304>)
 800245e:	4013      	ands	r3, r2
 8002460:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002464:	3301      	adds	r3, #1
 8002466:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	f47f ae8e 	bne.w	8002194 <HAL_GPIO_Init+0x14>
  }
}
 8002478:	bf00      	nop
 800247a:	bf00      	nop
 800247c:	372c      	adds	r7, #44	; 0x2c
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	40010400 	.word	0x40010400

08002488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	807b      	strh	r3, [r7, #2]
 8002494:	4613      	mov	r3, r2
 8002496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002498:	787b      	ldrb	r3, [r7, #1]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024a4:	e003      	b.n	80024ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024a6:	887b      	ldrh	r3, [r7, #2]
 80024a8:	041a      	lsls	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	611a      	str	r2, [r3, #16]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bc80      	pop	{r7}
 80024b6:	4770      	bx	lr

080024b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e272      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f000 8087 	beq.w	80025e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024d8:	4b92      	ldr	r3, [pc, #584]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d00c      	beq.n	80024fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024e4:	4b8f      	ldr	r3, [pc, #572]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 030c 	and.w	r3, r3, #12
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d112      	bne.n	8002516 <HAL_RCC_OscConfig+0x5e>
 80024f0:	4b8c      	ldr	r3, [pc, #560]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024fc:	d10b      	bne.n	8002516 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fe:	4b89      	ldr	r3, [pc, #548]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d06c      	beq.n	80025e4 <HAL_RCC_OscConfig+0x12c>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d168      	bne.n	80025e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e24c      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800251e:	d106      	bne.n	800252e <HAL_RCC_OscConfig+0x76>
 8002520:	4b80      	ldr	r3, [pc, #512]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a7f      	ldr	r2, [pc, #508]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 8002526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	e02e      	b.n	800258c <HAL_RCC_OscConfig+0xd4>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d10c      	bne.n	8002550 <HAL_RCC_OscConfig+0x98>
 8002536:	4b7b      	ldr	r3, [pc, #492]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7a      	ldr	r2, [pc, #488]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 800253c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	4b78      	ldr	r3, [pc, #480]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a77      	ldr	r2, [pc, #476]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 8002548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e01d      	b.n	800258c <HAL_RCC_OscConfig+0xd4>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0xbc>
 800255a:	4b72      	ldr	r3, [pc, #456]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a71      	ldr	r2, [pc, #452]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 8002560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b6f      	ldr	r3, [pc, #444]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a6e      	ldr	r2, [pc, #440]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0xd4>
 8002574:	4b6b      	ldr	r3, [pc, #428]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a6a      	ldr	r2, [pc, #424]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 800257a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b68      	ldr	r3, [pc, #416]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a67      	ldr	r2, [pc, #412]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 8002586:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7ff fd06 	bl	8001fa4 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800259c:	f7ff fd02 	bl	8001fa4 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	; 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e200      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b5d      	ldr	r3, [pc, #372]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0xe4>
 80025ba:	e014      	b.n	80025e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7ff fcf2 	bl	8001fa4 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7ff fcee 	bl	8001fa4 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e1ec      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d6:	4b53      	ldr	r3, [pc, #332]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x10c>
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d063      	beq.n	80026ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025f2:	4b4c      	ldr	r3, [pc, #304]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025fe:	4b49      	ldr	r3, [pc, #292]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	2b08      	cmp	r3, #8
 8002608:	d11c      	bne.n	8002644 <HAL_RCC_OscConfig+0x18c>
 800260a:	4b46      	ldr	r3, [pc, #280]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d116      	bne.n	8002644 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	4b43      	ldr	r3, [pc, #268]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_RCC_OscConfig+0x176>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d001      	beq.n	800262e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e1c0      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262e:	4b3d      	ldr	r3, [pc, #244]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4939      	ldr	r1, [pc, #228]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002642:	e03a      	b.n	80026ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264c:	4b36      	ldr	r3, [pc, #216]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7ff fca7 	bl	8001fa4 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265a:	f7ff fca3 	bl	8001fa4 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e1a1      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266c:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4927      	ldr	r1, [pc, #156]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]
 800268c:	e015      	b.n	80026ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268e:	4b26      	ldr	r3, [pc, #152]	; (8002728 <HAL_RCC_OscConfig+0x270>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002694:	f7ff fc86 	bl	8001fa4 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269c:	f7ff fc82 	bl	8001fa4 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e180      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ae:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d03a      	beq.n	800273c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d019      	beq.n	8002702 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ce:	4b17      	ldr	r3, [pc, #92]	; (800272c <HAL_RCC_OscConfig+0x274>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d4:	f7ff fc66 	bl	8001fa4 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026dc:	f7ff fc62 	bl	8001fa4 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e160      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ee:	4b0d      	ldr	r3, [pc, #52]	; (8002724 <HAL_RCC_OscConfig+0x26c>)
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026fa:	2001      	movs	r0, #1
 80026fc:	f000 fabc 	bl	8002c78 <RCC_Delay>
 8002700:	e01c      	b.n	800273c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002702:	4b0a      	ldr	r3, [pc, #40]	; (800272c <HAL_RCC_OscConfig+0x274>)
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002708:	f7ff fc4c 	bl	8001fa4 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800270e:	e00f      	b.n	8002730 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002710:	f7ff fc48 	bl	8001fa4 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d908      	bls.n	8002730 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e146      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
 8002722:	bf00      	nop
 8002724:	40021000 	.word	0x40021000
 8002728:	42420000 	.word	0x42420000
 800272c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002730:	4b92      	ldr	r3, [pc, #584]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 8002732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1e9      	bne.n	8002710 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0304 	and.w	r3, r3, #4
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80a6 	beq.w	8002896 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274a:	2300      	movs	r3, #0
 800274c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800274e:	4b8b      	ldr	r3, [pc, #556]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10d      	bne.n	8002776 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800275a:	4b88      	ldr	r3, [pc, #544]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	4a87      	ldr	r2, [pc, #540]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 8002760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002764:	61d3      	str	r3, [r2, #28]
 8002766:	4b85      	ldr	r3, [pc, #532]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002772:	2301      	movs	r3, #1
 8002774:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002776:	4b82      	ldr	r3, [pc, #520]	; (8002980 <HAL_RCC_OscConfig+0x4c8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277e:	2b00      	cmp	r3, #0
 8002780:	d118      	bne.n	80027b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002782:	4b7f      	ldr	r3, [pc, #508]	; (8002980 <HAL_RCC_OscConfig+0x4c8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a7e      	ldr	r2, [pc, #504]	; (8002980 <HAL_RCC_OscConfig+0x4c8>)
 8002788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800278c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278e:	f7ff fc09 	bl	8001fa4 <HAL_GetTick>
 8002792:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002794:	e008      	b.n	80027a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002796:	f7ff fc05 	bl	8001fa4 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	2b64      	cmp	r3, #100	; 0x64
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e103      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	4b75      	ldr	r3, [pc, #468]	; (8002980 <HAL_RCC_OscConfig+0x4c8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0f0      	beq.n	8002796 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d106      	bne.n	80027ca <HAL_RCC_OscConfig+0x312>
 80027bc:	4b6f      	ldr	r3, [pc, #444]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	4a6e      	ldr	r2, [pc, #440]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	f043 0301 	orr.w	r3, r3, #1
 80027c6:	6213      	str	r3, [r2, #32]
 80027c8:	e02d      	b.n	8002826 <HAL_RCC_OscConfig+0x36e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d10c      	bne.n	80027ec <HAL_RCC_OscConfig+0x334>
 80027d2:	4b6a      	ldr	r3, [pc, #424]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	4a69      	ldr	r2, [pc, #420]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	f023 0301 	bic.w	r3, r3, #1
 80027dc:	6213      	str	r3, [r2, #32]
 80027de:	4b67      	ldr	r3, [pc, #412]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	4a66      	ldr	r2, [pc, #408]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 80027e4:	f023 0304 	bic.w	r3, r3, #4
 80027e8:	6213      	str	r3, [r2, #32]
 80027ea:	e01c      	b.n	8002826 <HAL_RCC_OscConfig+0x36e>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b05      	cmp	r3, #5
 80027f2:	d10c      	bne.n	800280e <HAL_RCC_OscConfig+0x356>
 80027f4:	4b61      	ldr	r3, [pc, #388]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4a60      	ldr	r2, [pc, #384]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	6213      	str	r3, [r2, #32]
 8002800:	4b5e      	ldr	r3, [pc, #376]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	4a5d      	ldr	r2, [pc, #372]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 8002806:	f043 0301 	orr.w	r3, r3, #1
 800280a:	6213      	str	r3, [r2, #32]
 800280c:	e00b      	b.n	8002826 <HAL_RCC_OscConfig+0x36e>
 800280e:	4b5b      	ldr	r3, [pc, #364]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	4a5a      	ldr	r2, [pc, #360]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	6213      	str	r3, [r2, #32]
 800281a:	4b58      	ldr	r3, [pc, #352]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	4a57      	ldr	r2, [pc, #348]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 8002820:	f023 0304 	bic.w	r3, r3, #4
 8002824:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d015      	beq.n	800285a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282e:	f7ff fbb9 	bl	8001fa4 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002834:	e00a      	b.n	800284c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7ff fbb5 	bl	8001fa4 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	; 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e0b1      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284c:	4b4b      	ldr	r3, [pc, #300]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0ee      	beq.n	8002836 <HAL_RCC_OscConfig+0x37e>
 8002858:	e014      	b.n	8002884 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285a:	f7ff fba3 	bl	8001fa4 <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002860:	e00a      	b.n	8002878 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7ff fb9f 	bl	8001fa4 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002870:	4293      	cmp	r3, r2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e09b      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002878:	4b40      	ldr	r3, [pc, #256]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d1ee      	bne.n	8002862 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002884:	7dfb      	ldrb	r3, [r7, #23]
 8002886:	2b01      	cmp	r3, #1
 8002888:	d105      	bne.n	8002896 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288a:	4b3c      	ldr	r3, [pc, #240]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	4a3b      	ldr	r2, [pc, #236]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 8002890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002894:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8087 	beq.w	80029ae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028a0:	4b36      	ldr	r3, [pc, #216]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 030c 	and.w	r3, r3, #12
 80028a8:	2b08      	cmp	r3, #8
 80028aa:	d061      	beq.n	8002970 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d146      	bne.n	8002942 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b4:	4b33      	ldr	r3, [pc, #204]	; (8002984 <HAL_RCC_OscConfig+0x4cc>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ba:	f7ff fb73 	bl	8001fa4 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028c0:	e008      	b.n	80028d4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c2:	f7ff fb6f 	bl	8001fa4 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d901      	bls.n	80028d4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028d0:	2303      	movs	r3, #3
 80028d2:	e06d      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d4:	4b29      	ldr	r3, [pc, #164]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d1f0      	bne.n	80028c2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a1b      	ldr	r3, [r3, #32]
 80028e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e8:	d108      	bne.n	80028fc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028ea:	4b24      	ldr	r3, [pc, #144]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	4921      	ldr	r1, [pc, #132]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 80028f8:	4313      	orrs	r3, r2
 80028fa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028fc:	4b1f      	ldr	r3, [pc, #124]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a19      	ldr	r1, [r3, #32]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	430b      	orrs	r3, r1
 800290e:	491b      	ldr	r1, [pc, #108]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 8002910:	4313      	orrs	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002914:	4b1b      	ldr	r3, [pc, #108]	; (8002984 <HAL_RCC_OscConfig+0x4cc>)
 8002916:	2201      	movs	r2, #1
 8002918:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800291a:	f7ff fb43 	bl	8001fa4 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002922:	f7ff fb3f 	bl	8001fa4 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e03d      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x46a>
 8002940:	e035      	b.n	80029ae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HAL_RCC_OscConfig+0x4cc>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002948:	f7ff fb2c 	bl	8001fa4 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002950:	f7ff fb28 	bl	8001fa4 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e026      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002962:	4b06      	ldr	r3, [pc, #24]	; (800297c <HAL_RCC_OscConfig+0x4c4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x498>
 800296e:	e01e      	b.n	80029ae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d107      	bne.n	8002988 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e019      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
 800297c:	40021000 	.word	0x40021000
 8002980:	40007000 	.word	0x40007000
 8002984:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <HAL_RCC_OscConfig+0x500>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	429a      	cmp	r2, r3
 800299a:	d106      	bne.n	80029aa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d001      	beq.n	80029ae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e000      	b.n	80029b0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3718      	adds	r7, #24
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000

080029bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d101      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e0d0      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029d0:	4b6a      	ldr	r3, [pc, #424]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d910      	bls.n	8002a00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029de:	4b67      	ldr	r3, [pc, #412]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f023 0207 	bic.w	r2, r3, #7
 80029e6:	4965      	ldr	r1, [pc, #404]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ee:	4b63      	ldr	r3, [pc, #396]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	683a      	ldr	r2, [r7, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e0b8      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d020      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a18:	4b59      	ldr	r3, [pc, #356]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	4a58      	ldr	r2, [pc, #352]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0308 	and.w	r3, r3, #8
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d005      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a30:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	4a52      	ldr	r2, [pc, #328]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a3c:	4b50      	ldr	r3, [pc, #320]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	494d      	ldr	r1, [pc, #308]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d040      	beq.n	8002adc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d107      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a62:	4b47      	ldr	r3, [pc, #284]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d115      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e07f      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d107      	bne.n	8002a8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a7a:	4b41      	ldr	r3, [pc, #260]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d109      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e073      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a8a:	4b3d      	ldr	r3, [pc, #244]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e06b      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a9a:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f023 0203 	bic.w	r2, r3, #3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	4936      	ldr	r1, [pc, #216]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aac:	f7ff fa7a 	bl	8001fa4 <HAL_GetTick>
 8002ab0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab4:	f7ff fa76 	bl	8001fa4 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e053      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aca:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 020c 	and.w	r2, r3, #12
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d1eb      	bne.n	8002ab4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002adc:	4b27      	ldr	r3, [pc, #156]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d210      	bcs.n	8002b0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 0207 	bic.w	r2, r3, #7
 8002af2:	4922      	ldr	r1, [pc, #136]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e032      	b.n	8002b72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0304 	and.w	r3, r3, #4
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b18:	4b19      	ldr	r3, [pc, #100]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4916      	ldr	r1, [pc, #88]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d009      	beq.n	8002b4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b36:	4b12      	ldr	r3, [pc, #72]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	490e      	ldr	r1, [pc, #56]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b4a:	f000 f82d 	bl	8002ba8 <HAL_RCC_GetSysClockFreq>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	091b      	lsrs	r3, r3, #4
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	490a      	ldr	r1, [pc, #40]	; (8002b84 <HAL_RCC_ClockConfig+0x1c8>)
 8002b5c:	5ccb      	ldrb	r3, [r1, r3]
 8002b5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <HAL_RCC_ClockConfig+0x1cc>)
 8002b64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_RCC_ClockConfig+0x1d0>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7ff f9d8 	bl	8001f20 <HAL_InitTick>

  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	3710      	adds	r7, #16
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40022000 	.word	0x40022000
 8002b80:	40021000 	.word	0x40021000
 8002b84:	08003850 	.word	0x08003850
 8002b88:	2000001c 	.word	0x2000001c
 8002b8c:	20000050 	.word	0x20000050

08002b90 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002b94:	4b03      	ldr	r3, [pc, #12]	; (8002ba4 <HAL_RCC_EnableCSS+0x14>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	601a      	str	r2, [r3, #0]
}
 8002b9a:	bf00      	nop
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bc80      	pop	{r7}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	4242004c 	.word	0x4242004c

08002ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60bb      	str	r3, [r7, #8]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bc2:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 030c 	and.w	r3, r3, #12
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d002      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x30>
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d003      	beq.n	8002bde <HAL_RCC_GetSysClockFreq+0x36>
 8002bd6:	e027      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bd8:	4b19      	ldr	r3, [pc, #100]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bda:	613b      	str	r3, [r7, #16]
      break;
 8002bdc:	e027      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	0c9b      	lsrs	r3, r3, #18
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	4a17      	ldr	r2, [pc, #92]	; (8002c44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002be8:	5cd3      	ldrb	r3, [r2, r3]
 8002bea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d010      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002bf6:	4b11      	ldr	r3, [pc, #68]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	0c5b      	lsrs	r3, r3, #17
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	4a11      	ldr	r2, [pc, #68]	; (8002c48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c0a:	fb03 f202 	mul.w	r2, r3, r2
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	617b      	str	r3, [r7, #20]
 8002c16:	e004      	b.n	8002c22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a0c      	ldr	r2, [pc, #48]	; (8002c4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c1c:	fb02 f303 	mul.w	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	613b      	str	r3, [r7, #16]
      break;
 8002c26:	e002      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c2a:	613b      	str	r3, [r7, #16]
      break;
 8002c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c2e:	693b      	ldr	r3, [r7, #16]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	371c      	adds	r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	007a1200 	.word	0x007a1200
 8002c44:	08003860 	.word	0x08003860
 8002c48:	08003870 	.word	0x08003870
 8002c4c:	003d0900 	.word	0x003d0900

08002c50 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002c54:	4b06      	ldr	r3, [pc, #24]	; (8002c70 <HAL_RCC_NMI_IRQHandler+0x20>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5c:	2b80      	cmp	r3, #128	; 0x80
 8002c5e:	d104      	bne.n	8002c6a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002c60:	f000 f828 	bl	8002cb4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002c64:	4b03      	ldr	r3, [pc, #12]	; (8002c74 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002c66:	2280      	movs	r2, #128	; 0x80
 8002c68:	701a      	strb	r2, [r3, #0]
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	4002100a 	.word	0x4002100a

08002c78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <RCC_Delay+0x34>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0a      	ldr	r2, [pc, #40]	; (8002cb0 <RCC_Delay+0x38>)
 8002c86:	fba2 2303 	umull	r2, r3, r2, r3
 8002c8a:	0a5b      	lsrs	r3, r3, #9
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c94:	bf00      	nop
  }
  while (Delay --);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1e5a      	subs	r2, r3, #1
 8002c9a:	60fa      	str	r2, [r7, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1f9      	bne.n	8002c94 <RCC_Delay+0x1c>
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr
 8002cac:	2000001c 	.word	0x2000001c
 8002cb0:	10624dd3 	.word	0x10624dd3

08002cb4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e076      	b.n	8002dc0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d108      	bne.n	8002cec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ce2:	d009      	beq.n	8002cf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	61da      	str	r2, [r3, #28]
 8002cea:	e005      	b.n	8002cf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fd fbbc 	bl	8000490 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d7c:	ea42 0103 	orr.w	r1, r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	0c1a      	lsrs	r2, r3, #16
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f002 0204 	and.w	r2, r2, #4
 8002d9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	69da      	ldr	r2, [r3, #28]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3708      	adds	r7, #8
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d101      	bne.n	8002dea <HAL_SPI_Transmit+0x22>
 8002de6:	2302      	movs	r3, #2
 8002de8:	e12d      	b.n	8003046 <HAL_SPI_Transmit+0x27e>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002df2:	f7ff f8d7 	bl	8001fa4 <HAL_GetTick>
 8002df6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d002      	beq.n	8002e0e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e0c:	e116      	b.n	800303c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_SPI_Transmit+0x52>
 8002e14:	88fb      	ldrh	r3, [r7, #6]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d102      	bne.n	8002e20 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e1e:	e10d      	b.n	800303c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2203      	movs	r2, #3
 8002e24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	68ba      	ldr	r2, [r7, #8]
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	88fa      	ldrh	r2, [r7, #6]
 8002e38:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	88fa      	ldrh	r2, [r7, #6]
 8002e3e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e66:	d10f      	bne.n	8002e88 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e92:	2b40      	cmp	r3, #64	; 0x40
 8002e94:	d007      	beq.n	8002ea6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ea4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eae:	d14f      	bne.n	8002f50 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_SPI_Transmit+0xf6>
 8002eb8:	8afb      	ldrh	r3, [r7, #22]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d142      	bne.n	8002f44 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	881a      	ldrh	r2, [r3, #0]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ece:	1c9a      	adds	r2, r3, #2
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ee2:	e02f      	b.n	8002f44 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d112      	bne.n	8002f18 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	881a      	ldrh	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	1c9a      	adds	r2, r3, #2
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f16:	e015      	b.n	8002f44 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f18:	f7ff f844 	bl	8001fa4 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d803      	bhi.n	8002f30 <HAL_SPI_Transmit+0x168>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f2e:	d102      	bne.n	8002f36 <HAL_SPI_Transmit+0x16e>
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d106      	bne.n	8002f44 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002f42:	e07b      	b.n	800303c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1ca      	bne.n	8002ee4 <HAL_SPI_Transmit+0x11c>
 8002f4e:	e050      	b.n	8002ff2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <HAL_SPI_Transmit+0x196>
 8002f58:	8afb      	ldrh	r3, [r7, #22]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d144      	bne.n	8002fe8 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	330c      	adds	r3, #12
 8002f68:	7812      	ldrb	r2, [r2, #0]
 8002f6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	1c5a      	adds	r2, r3, #1
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	3b01      	subs	r3, #1
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f84:	e030      	b.n	8002fe8 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d113      	bne.n	8002fbc <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	7812      	ldrb	r2, [r2, #0]
 8002fa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fba:	e015      	b.n	8002fe8 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fbc:	f7fe fff2 	bl	8001fa4 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d803      	bhi.n	8002fd4 <HAL_SPI_Transmit+0x20c>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd2:	d102      	bne.n	8002fda <HAL_SPI_Transmit+0x212>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002fe6:	e029      	b.n	800303c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d1c9      	bne.n	8002f86 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	6839      	ldr	r1, [r7, #0]
 8002ff6:	68f8      	ldr	r0, [r7, #12]
 8002ff8:	f000 fbcc 	bl	8003794 <SPI_EndRxTxTransaction>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003010:	2300      	movs	r3, #0
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	613b      	str	r3, [r7, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	77fb      	strb	r3, [r7, #31]
 8003032:	e003      	b.n	800303c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003044:	7ffb      	ldrb	r3, [r7, #31]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b088      	sub	sp, #32
 8003052:	af02      	add	r7, sp, #8
 8003054:	60f8      	str	r0, [r7, #12]
 8003056:	60b9      	str	r1, [r7, #8]
 8003058:	603b      	str	r3, [r7, #0]
 800305a:	4613      	mov	r3, r2
 800305c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d002      	beq.n	8003074 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800306e:	2302      	movs	r3, #2
 8003070:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003072:	e0fb      	b.n	800326c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800307c:	d112      	bne.n	80030a4 <HAL_SPI_Receive+0x56>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d10e      	bne.n	80030a4 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2204      	movs	r2, #4
 800308a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800308e:	88fa      	ldrh	r2, [r7, #6]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	68ba      	ldr	r2, [r7, #8]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f000 f8ef 	bl	800327e <HAL_SPI_TransmitReceive>
 80030a0:	4603      	mov	r3, r0
 80030a2:	e0e8      	b.n	8003276 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_SPI_Receive+0x64>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e0e1      	b.n	8003276 <HAL_SPI_Receive+0x228>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030ba:	f7fe ff73 	bl	8001fa4 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_SPI_Receive+0x7e>
 80030c6:	88fb      	ldrh	r3, [r7, #6]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d102      	bne.n	80030d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030d0:	e0cc      	b.n	800326c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2204      	movs	r2, #4
 80030d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	88fa      	ldrh	r2, [r7, #6]
 80030ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003118:	d10f      	bne.n	800313a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003128:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003138:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b40      	cmp	r3, #64	; 0x40
 8003146:	d007      	beq.n	8003158 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003156:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d16a      	bne.n	8003236 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003160:	e032      	b.n	80031c8 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b01      	cmp	r3, #1
 800316e:	d115      	bne.n	800319c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f103 020c 	add.w	r2, r3, #12
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800317c:	7812      	ldrb	r2, [r2, #0]
 800317e:	b2d2      	uxtb	r2, r2
 8003180:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	87da      	strh	r2, [r3, #62]	; 0x3e
 800319a:	e015      	b.n	80031c8 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800319c:	f7fe ff02 	bl	8001fa4 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	683a      	ldr	r2, [r7, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d803      	bhi.n	80031b4 <HAL_SPI_Receive+0x166>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b2:	d102      	bne.n	80031ba <HAL_SPI_Receive+0x16c>
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80031c6:	e051      	b.n	800326c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1c7      	bne.n	8003162 <HAL_SPI_Receive+0x114>
 80031d2:	e035      	b.n	8003240 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d113      	bne.n	800320a <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	b292      	uxth	r2, r2
 80031ee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	1c9a      	adds	r2, r3, #2
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003208:	e015      	b.n	8003236 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800320a:	f7fe fecb 	bl	8001fa4 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d803      	bhi.n	8003222 <HAL_SPI_Receive+0x1d4>
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003220:	d102      	bne.n	8003228 <HAL_SPI_Receive+0x1da>
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d106      	bne.n	8003236 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003234:	e01a      	b.n	800326c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323a:	b29b      	uxth	r3, r3
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1c9      	bne.n	80031d4 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	6839      	ldr	r1, [r7, #0]
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 fa53 	bl	80036f0 <SPI_EndRxTransaction>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d002      	beq.n	8003256 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2220      	movs	r2, #32
 8003254:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325a:	2b00      	cmp	r3, #0
 800325c:	d002      	beq.n	8003264 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	75fb      	strb	r3, [r7, #23]
 8003262:	e003      	b.n	800326c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003274:	7dfb      	ldrb	r3, [r7, #23]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}

0800327e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800327e:	b580      	push	{r7, lr}
 8003280:	b08c      	sub	sp, #48	; 0x30
 8003282:	af00      	add	r7, sp, #0
 8003284:	60f8      	str	r0, [r7, #12]
 8003286:	60b9      	str	r1, [r7, #8]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800328c:	2301      	movs	r3, #1
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003290:	2300      	movs	r3, #0
 8003292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800329c:	2b01      	cmp	r3, #1
 800329e:	d101      	bne.n	80032a4 <HAL_SPI_TransmitReceive+0x26>
 80032a0:	2302      	movs	r3, #2
 80032a2:	e198      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x358>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032ac:	f7fe fe7a 	bl	8001fa4 <HAL_GetTick>
 80032b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80032c2:	887b      	ldrh	r3, [r7, #2]
 80032c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d00f      	beq.n	80032ee <HAL_SPI_TransmitReceive+0x70>
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032d4:	d107      	bne.n	80032e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d103      	bne.n	80032e6 <HAL_SPI_TransmitReceive+0x68>
 80032de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032e2:	2b04      	cmp	r3, #4
 80032e4:	d003      	beq.n	80032ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80032e6:	2302      	movs	r3, #2
 80032e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032ec:	e16d      	b.n	80035ca <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d005      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x82>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_SPI_TransmitReceive+0x82>
 80032fa:	887b      	ldrh	r3, [r7, #2]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d103      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003306:	e160      	b.n	80035ca <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b04      	cmp	r3, #4
 8003312:	d003      	beq.n	800331c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2205      	movs	r2, #5
 8003318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	887a      	ldrh	r2, [r7, #2]
 8003332:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	68ba      	ldr	r2, [r7, #8]
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	887a      	ldrh	r2, [r7, #2]
 800333e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	887a      	ldrh	r2, [r7, #2]
 8003344:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	d007      	beq.n	8003370 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800336e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003378:	d17c      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_SPI_TransmitReceive+0x10a>
 8003382:	8b7b      	ldrh	r3, [r7, #26]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d16a      	bne.n	800345e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338c:	881a      	ldrh	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003398:	1c9a      	adds	r2, r3, #2
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	3b01      	subs	r3, #1
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ac:	e057      	b.n	800345e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	d11b      	bne.n	80033f4 <HAL_SPI_TransmitReceive+0x176>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d016      	beq.n	80033f4 <HAL_SPI_TransmitReceive+0x176>
 80033c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d113      	bne.n	80033f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	881a      	ldrh	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	1c9a      	adds	r2, r3, #2
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d119      	bne.n	8003436 <HAL_SPI_TransmitReceive+0x1b8>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d014      	beq.n	8003436 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003416:	b292      	uxth	r2, r2
 8003418:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341e:	1c9a      	adds	r2, r3, #2
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003432:	2301      	movs	r3, #1
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003436:	f7fe fdb5 	bl	8001fa4 <HAL_GetTick>
 800343a:	4602      	mov	r2, r0
 800343c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003442:	429a      	cmp	r2, r3
 8003444:	d80b      	bhi.n	800345e <HAL_SPI_TransmitReceive+0x1e0>
 8003446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d007      	beq.n	800345e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800345c:	e0b5      	b.n	80035ca <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003462:	b29b      	uxth	r3, r3
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1a2      	bne.n	80033ae <HAL_SPI_TransmitReceive+0x130>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346c:	b29b      	uxth	r3, r3
 800346e:	2b00      	cmp	r3, #0
 8003470:	d19d      	bne.n	80033ae <HAL_SPI_TransmitReceive+0x130>
 8003472:	e080      	b.n	8003576 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d002      	beq.n	8003482 <HAL_SPI_TransmitReceive+0x204>
 800347c:	8b7b      	ldrh	r3, [r7, #26]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d16f      	bne.n	8003562 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	330c      	adds	r3, #12
 800348c:	7812      	ldrb	r2, [r2, #0]
 800348e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a8:	e05b      	b.n	8003562 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 0302 	and.w	r3, r3, #2
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d11c      	bne.n	80034f2 <HAL_SPI_TransmitReceive+0x274>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034bc:	b29b      	uxth	r3, r3
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d017      	beq.n	80034f2 <HAL_SPI_TransmitReceive+0x274>
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d114      	bne.n	80034f2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	330c      	adds	r3, #12
 80034d2:	7812      	ldrb	r2, [r2, #0]
 80034d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d119      	bne.n	8003534 <HAL_SPI_TransmitReceive+0x2b6>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d014      	beq.n	8003534 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003530:	2301      	movs	r3, #1
 8003532:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003534:	f7fe fd36 	bl	8001fa4 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003540:	429a      	cmp	r2, r3
 8003542:	d803      	bhi.n	800354c <HAL_SPI_TransmitReceive+0x2ce>
 8003544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354a:	d102      	bne.n	8003552 <HAL_SPI_TransmitReceive+0x2d4>
 800354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354e:	2b00      	cmp	r3, #0
 8003550:	d107      	bne.n	8003562 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003560:	e033      	b.n	80035ca <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d19e      	bne.n	80034aa <HAL_SPI_TransmitReceive+0x22c>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003570:	b29b      	uxth	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d199      	bne.n	80034aa <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003578:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f90a 	bl	8003794 <SPI_EndRxTxTransaction>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d006      	beq.n	8003594 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2220      	movs	r2, #32
 8003590:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003592:	e01a      	b.n	80035ca <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10a      	bne.n	80035b2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800359c:	2300      	movs	r3, #0
 800359e:	617b      	str	r3, [r7, #20]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	617b      	str	r3, [r7, #20]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	617b      	str	r3, [r7, #20]
 80035b0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035c0:	e003      	b.n	80035ca <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3730      	adds	r7, #48	; 0x30
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035f0:	f7fe fcd8 	bl	8001fa4 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	4413      	add	r3, r2
 80035fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003600:	f7fe fcd0 	bl	8001fa4 <HAL_GetTick>
 8003604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003606:	4b39      	ldr	r3, [pc, #228]	; (80036ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	015b      	lsls	r3, r3, #5
 800360c:	0d1b      	lsrs	r3, r3, #20
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003616:	e054      	b.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d050      	beq.n	80036c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003620:	f7fe fcc0 	bl	8001fa4 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	429a      	cmp	r2, r3
 800362e:	d902      	bls.n	8003636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d13d      	bne.n	80036b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800364e:	d111      	bne.n	8003674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003658:	d004      	beq.n	8003664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d107      	bne.n	8003674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800367c:	d10f      	bne.n	800369e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800369c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e017      	b.n	80036e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d101      	bne.n	80036bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	3b01      	subs	r3, #1
 80036c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689a      	ldr	r2, [r3, #8]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4013      	ands	r3, r2
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	bf0c      	ite	eq
 80036d2:	2301      	moveq	r3, #1
 80036d4:	2300      	movne	r3, #0
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	461a      	mov	r2, r3
 80036da:	79fb      	ldrb	r3, [r7, #7]
 80036dc:	429a      	cmp	r2, r3
 80036de:	d19b      	bne.n	8003618 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3720      	adds	r7, #32
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	2000001c 	.word	0x2000001c

080036f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003704:	d111      	bne.n	800372a <SPI_EndRxTransaction+0x3a>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800370e:	d004      	beq.n	800371a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003718:	d107      	bne.n	800372a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003728:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003732:	d117      	bne.n	8003764 <SPI_EndRxTransaction+0x74>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373c:	d112      	bne.n	8003764 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2200      	movs	r2, #0
 8003746:	2101      	movs	r1, #1
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7ff ff49 	bl	80035e0 <SPI_WaitFlagStateUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01a      	beq.n	800378a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003758:	f043 0220 	orr.w	r2, r3, #32
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e013      	b.n	800378c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2200      	movs	r2, #0
 800376c:	2180      	movs	r1, #128	; 0x80
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f7ff ff36 	bl	80035e0 <SPI_WaitFlagStateUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d007      	beq.n	800378a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800377e:	f043 0220 	orr.w	r2, r3, #32
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e000      	b.n	800378c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2200      	movs	r2, #0
 80037a8:	2180      	movs	r1, #128	; 0x80
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f7ff ff18 	bl	80035e0 <SPI_WaitFlagStateUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	f043 0220 	orr.w	r2, r3, #32
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e000      	b.n	80037c8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <memset>:
 80037d0:	4603      	mov	r3, r0
 80037d2:	4402      	add	r2, r0
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d100      	bne.n	80037da <memset+0xa>
 80037d8:	4770      	bx	lr
 80037da:	f803 1b01 	strb.w	r1, [r3], #1
 80037de:	e7f9      	b.n	80037d4 <memset+0x4>

080037e0 <__libc_init_array>:
 80037e0:	b570      	push	{r4, r5, r6, lr}
 80037e2:	2600      	movs	r6, #0
 80037e4:	4d0c      	ldr	r5, [pc, #48]	; (8003818 <__libc_init_array+0x38>)
 80037e6:	4c0d      	ldr	r4, [pc, #52]	; (800381c <__libc_init_array+0x3c>)
 80037e8:	1b64      	subs	r4, r4, r5
 80037ea:	10a4      	asrs	r4, r4, #2
 80037ec:	42a6      	cmp	r6, r4
 80037ee:	d109      	bne.n	8003804 <__libc_init_array+0x24>
 80037f0:	f000 f81a 	bl	8003828 <_init>
 80037f4:	2600      	movs	r6, #0
 80037f6:	4d0a      	ldr	r5, [pc, #40]	; (8003820 <__libc_init_array+0x40>)
 80037f8:	4c0a      	ldr	r4, [pc, #40]	; (8003824 <__libc_init_array+0x44>)
 80037fa:	1b64      	subs	r4, r4, r5
 80037fc:	10a4      	asrs	r4, r4, #2
 80037fe:	42a6      	cmp	r6, r4
 8003800:	d105      	bne.n	800380e <__libc_init_array+0x2e>
 8003802:	bd70      	pop	{r4, r5, r6, pc}
 8003804:	f855 3b04 	ldr.w	r3, [r5], #4
 8003808:	4798      	blx	r3
 800380a:	3601      	adds	r6, #1
 800380c:	e7ee      	b.n	80037ec <__libc_init_array+0xc>
 800380e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003812:	4798      	blx	r3
 8003814:	3601      	adds	r6, #1
 8003816:	e7f2      	b.n	80037fe <__libc_init_array+0x1e>
 8003818:	08003874 	.word	0x08003874
 800381c:	08003874 	.word	0x08003874
 8003820:	08003874 	.word	0x08003874
 8003824:	08003878 	.word	0x08003878

08003828 <_init>:
 8003828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800382a:	bf00      	nop
 800382c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800382e:	bc08      	pop	{r3}
 8003830:	469e      	mov	lr, r3
 8003832:	4770      	bx	lr

08003834 <_fini>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	bf00      	nop
 8003838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383a:	bc08      	pop	{r3}
 800383c:	469e      	mov	lr, r3
 800383e:	4770      	bx	lr
